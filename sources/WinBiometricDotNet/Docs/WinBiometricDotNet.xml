<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WinBiometricDotNet</name>
    </assembly>
    <members>
        <member name="T:WinBiometricDotNet.AntiSpoofPolicy">
            <summary>
            Represents the antispoofing policy for a user.
            </summary>
        </member>
        <member name="M:WinBiometricDotNet.AntiSpoofPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WinBiometricDotNet.AntiSpoofPolicy"/> class.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AntiSpoofPolicy.Action">
            <summary>
            Gets or sets the action to take for the antispoofing policy.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AntiSpoofPolicy.Source">
            <summary>
            Gets or sets a value for the antispoofing policy.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AntiSpoofPolicyAction">
            <summary>
            Specifies the types of actions you take for the antispoofing policy of a user.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.AntiSpoofPolicyAction.Disable">
            <summary>
            Turns off the detection of spoofing for a biometric factor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.AntiSpoofPolicyAction.Enable">
            <summary>
            Turns on the detection of spoofing for a biometric factor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.AntiSpoofPolicyAction.Remove">
            <summary>
            Removes the entire antispoofing policy for the biometric factor from the account.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:WinBiometricDotNet.WinBiometric.AsyncCompleted"/> event handler.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncCompletedEventArgs.Result">
            <summary>
            Gets a value that represents the result of an event.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncCompletedHandler">
            <summary>
            Represents the method that will handle the <see cref="E:WinBiometricDotNet.WinBiometric.AsyncCompleted"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:WinBiometricDotNet.AsyncCompletedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:WinBiometricDotNet.AsyncNotificationMethod">
            <summary>
            <para>Defines constants that specify how completion notifications for asynchronous operations are to be delivered to the client application.</para>
            <para>This API supports the product infrastructure and is not intended to be used directly from your code.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.AsyncNotificationMethod.NotifyNone">
            <summary>
            The operation is synchronous.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.AsyncNotificationMethod.NotifyCallback">
            <summary>
            The client-implemented PWINBIO_ASYNC_COMPLETION_CALLBACK function is called by the framework.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.AsyncNotificationMethod.NotifyMessage">
            <summary>
            The framework sends completion notices to the client application window message queue.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.AsyncNotificationMethod.NotifyMaximumValue">
            <summary>
            The maximum enumeration value. This constant is not directly used by the WinBioAsyncOpenFramework and WinBioAsyncOpenSession.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncResult">
            <summary>
            The <see cref="T:WinBiometricDotNet.AsyncResult"/> class contains the results of an asynchronous operation.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResult.ApiStatus">
            <summary>
            Gets the error code returned by the operation.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResult.Framework">
            <summary>
            Gets the handle of an asynchronous session started by calling the <see cref="M:WinBiometricDotNet.WinBiometric.AsyncOpenFramework(System.IntPtr)"/> function.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResult.OperationType">
            <summary>
            Gets type of the asynchronous operation.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResult.Parameter">
            <summary>
            Gets the data that contain additional information about the success or failure of asynchronous operations begun by the client application.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResult.SequenceNumber">
            <summary>
            Gets the sequence number of the asynchronous operation.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResult.Session">
            <summary>
            Gets the handle of an asynchronous session started by calling the <see cref="M:WinBiometricDotNet.WinBiometric.AsyncOpenSession(System.IntPtr)"/> function.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResult.TimeStamp">
            <summary>
            Gets the system date and time at which the biometric operation began.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResult.UnitId">
            <summary>
            Gets the numeric unit identifier of the biometric unit that performed the operation.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResult.UserData">
            <summary>
            Gets the address of an optional buffer supplied by the caller.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncResultCaptureSample">
            <summary>
            The <see cref="T:WinBiometricDotNet.AsyncResultCaptureSample"/> class contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.WinBiometric.CaptureSample(WinBiometricDotNet.Session,WinBiometricDotNet.Purpose,WinBiometricDotNet.DataFlags)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultCaptureSample.Sample">
            <summary>
            Gets the data that contain sample.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultCaptureSample.SampleSize">
            <summary>
            Gets a value that contains the size, in bytes, of <see cref="P:WinBiometricDotNet.AsyncResultCaptureSample.Sample"/> property.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultCaptureSample.RejectDetail">
            <summary>
            Gets a value that contains additional information about the failure to capture a biometric sample.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncResultControlUnit">
            <summary>
            The <see cref="T:WinBiometricDotNet.AsyncResultControlUnit"/> class contains the results of a call to <see cref="M:WinBiometricDotNet.WinBiometric.ControlUnit(WinBiometricDotNet.Session,System.UInt32,WinBiometricDotNet.Component,System.UInt32,System.Byte[],System.Byte[],System.IntPtr@,System.UInt32@)"/> or <see cref="M:WinBiometricDotNet.WinBiometric.ControlUnitPrivileged(WinBiometricDotNet.Session,System.UInt32,WinBiometricDotNet.Component,System.UInt32,System.Byte[],System.Byte[],System.IntPtr@,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultControlUnit.Component">
            <summary>
            Gets a value that specifies the component within the biometric unit that performed the operation.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultControlUnit.ControlCode">
            <summary>
            Gets a value that specifies the vendor-defined code recognized by the biometric unit.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultControlUnit.OperationStatus">
            <summary>
            Gets a value that specifies the vendor-defined status code that specifies the outcome of the control operation.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultControlUnit.ReceiveBuffer">
            <summary>
            Gets a buffer that receives information sent by the adapter specified by the <see cref="P:WinBiometricDotNet.AsyncResultControlUnit.Component"/> property.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultControlUnit.ReceiveDataSize">
            <summary>
            Gets a size, in bytes, of the data written to the buffer specified by the <see cref="P:WinBiometricDotNet.AsyncResultControlUnit.ReceiveBuffer"/> property.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultControlUnit.SendBuffer">
            <summary>
            Gets a buffer that contains the control information sent to the adapter by the component.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncResultDeleteTemplate">
            <summary>
            The <see cref="T:WinBiometricDotNet.AsyncResultDeleteTemplate"/> class contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.WinBiometric.DeleteTemplate(WinBiometricDotNet.Session,System.UInt32,WinBiometricDotNet.BiometricIdentity,WinBiometricDotNet.FingerPosition)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultDeleteTemplate.Identity">
            <summary>
            Gets the data that contains the GUID or SID of the template to be deleted.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultDeleteTemplate.FingerPosition">
            <summary>
            Gets a value that provides additional information about the template to be deleted.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncResultEnrollBegin">
            <summary>
            The <see cref="T:WinBiometricDotNet.AsyncResultEnrollBegin"/> class contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.WinBiometric.BeginEnroll(WinBiometricDotNet.Session,WinBiometricDotNet.FingerPosition,System.UInt32)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultEnrollBegin.FingerPosition">
            <summary>
            Gets a value that provides additional information about the enrollment.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncResultEnrollCapture">
            <summary>
            The <see cref="T:WinBiometricDotNet.AsyncResultEnrollCapture"/> class contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.WinBiometric.CaptureEnroll(WinBiometricDotNet.Session)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultEnrollCapture.RejectDetail">
            <summary>
            Gets a value that contains additional information about the failure to capture a biometric sample.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncResultEnrollCommit">
            <summary>
            The <see cref="T:WinBiometricDotNet.AsyncResultEnrollCommit"/> class contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.WinBiometric.CommitEnroll(WinBiometricDotNet.Session)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultEnrollCommit.Identity">
            <summary>
            Gets the data that receives the identifier (GUID or SID) of the template.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultEnrollCommit.IsNewTemplate">
            <summary>
            Gets a value indicating whether the template being added to the database is new.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncResultEnumBiometricUnits">
            <summary>
            The <see cref="T:WinBiometricDotNet.AsyncResultEnumBiometricUnits"/> class contains the results of a call to <see cref="M:WinBiometricDotNet.WinBiometric.AsyncEnumBiometricUnits(WinBiometricDotNet.Framework,WinBiometricDotNet.BiometricTypes)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultEnumBiometricUnits.BiometricUnits">
            <summary>
            Get the array of <see cref="T:WinBiometricDotNet.BiometricUnit"/>.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncResultEnumDatabases">
            <summary>
            The <see cref="T:WinBiometricDotNet.AsyncResultEnumDatabases"/> class contains the results of a call to <see cref="M:WinBiometricDotNet.WinBiometric.AsyncEnumDatabases(WinBiometricDotNet.Framework,WinBiometricDotNet.BiometricTypes)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultEnumDatabases.Databases">
            <summary>
            Get the array of <see cref="T:WinBiometricDotNet.BiometricDatabase"/>.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncResultEnumEnrollments">
            <summary>
            The <see cref="T:WinBiometricDotNet.AsyncResultEnumEnrollments"/> class contains the results of a call to <see cref="M:WinBiometricDotNet.WinBiometric.EnumEnrollments(WinBiometricDotNet.Session,System.UInt32)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultEnumEnrollments.Identity">
            <summary>
            Gets the GUID or SID of the template from which the sub-factors were retrieved.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultEnumEnrollments.FingerPositions">
            <summary>
            Gets the array of <see cref="T:WinBiometricDotNet.FingerPosition"/>.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncResultEnumServiceProviders">
            <summary>
            The <see cref="T:WinBiometricDotNet.AsyncResultEnumServiceProviders"/> class contains the results of a call to <see cref="M:WinBiometricDotNet.WinBiometric.AsyncEnumServiceProviders(WinBiometricDotNet.Framework,WinBiometricDotNet.BiometricTypes)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultEnumServiceProviders.ServiceProviders">
            <summary>
            Get the array of <see cref="T:WinBiometricDotNet.BiometricServiceProvider"/>.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncResultGetEvent">
            <summary>
            The <see cref="T:WinBiometricDotNet.AsyncResultGetEvent"/> class contains the results of events to monitor.
            </summary>
            <remarks>This class is not currently supported.</remarks>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultGetEvent.EventType">
            <summary>
            Gets a value that specifies the type of service provider event notice raised.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultGetEvent.Parameter">
            <summary>
            Gets the data that contains status information sent to the callback routine when an event notice is raised.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncResultGetProperty">
            <summary>
            The <see cref="T:WinBiometricDotNet.AsyncResultGetProperty"/> class contains the results of a call to <see cref="M:WinBiometricDotNet.WinBiometric.GetProperty(WinBiometricDotNet.Session,WinBiometricDotNet.PropertyType,WinBiometricDotNet.PropertyId,System.UInt32,WinBiometricDotNet.BiometricIdentity,WinBiometricDotNet.FingerPosition,System.Byte[]@)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultGetProperty.Identity">
            <summary>
            Gets the data that contains identity.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultGetProperty.FingerPosition">
            <summary>
            Gets a value that specifies sub-factor.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultGetProperty.PropertyBuffer">
            <summary>
            Get a buffer that contains property value.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultGetProperty.PropertyId">
            <summary>
            Gets a value that specifies the property that was queried.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultGetProperty.PropertyType">
            <summary>
            Gets a value that specifies source of the property information.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncResultIdentify">
            <summary>
            The <see cref="T:WinBiometricDotNet.AsyncResultIdentify"/> class contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.WinBiometric.Identify(WinBiometricDotNet.Session)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultIdentify.Identity">
            <summary>
            Gets the data that receives the GUID or SID of the user providing the biometric sample.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultIdentify.FingerPosition">
            <summary>
            Gets a value that receives the sub-factor associated with the biometric sample.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultIdentify.RejectDetail">
            <summary>
            Gets a value that contains additional information about the failure to capture a biometric sample.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncResultParameter">
            <summary>
            Provides a results of an asynchronous operation. This is an abstract class.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncResultSetProperty">
            <summary>
            The <see cref="T:WinBiometricDotNet.AsyncResultSetProperty"/> class contains the results of a call to <see cref="M:WinBiometricDotNet.WinBiometric.SetAntiSpoofPolicyProperty(WinBiometricDotNet.Session,WinBiometricDotNet.PropertyType,WinBiometricDotNet.BiometricIdentity,WinBiometricDotNet.AntiSpoofPolicy)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultSetProperty.Identity">
            <summary>
            Gets the data that specifies the account for which the property was set.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultSetProperty.FingerPosition">
            <summary>
            Gets a value that specifies sub-factor.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultSetProperty.PropertyBuffer">
            <summary>
            Gets a buffer that specifies the value to which the property was set.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultSetProperty.PropertyId">
            <summary>
            Gets a value that specifies the property that was set.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultSetProperty.PropertyType">
            <summary>
            Gets a value that specifies the type of the property that was set.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.AsyncResultVerify">
            <summary>
            The <see cref="T:WinBiometricDotNet.AsyncResultVerify"/> class contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.WinBiometric.Verify(WinBiometricDotNet.Session,WinBiometricDotNet.FingerPosition)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultVerify.IsMatch">
            <summary>
            Gets a value indicating whether the captured sample matched the user identity specified.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.AsyncResultVerify.RejectDetail">
            <summary>
            Gets a value that contains additional information about the failure to capture a biometric sample.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.BiometricCapabilities">
            <summary>
            Specifies the capabilities of biometric sensor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricCapabilities.Sensor">
            <summary>
            The device can collect biometric data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricCapabilities.Matching">
            <summary>
            The device can perform match operations.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricCapabilities.Database">
            <summary>
            The sensor contains an onboard database.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricCapabilities.Proccessing">
            <summary>
            The device can process samples and turn them into biometric templates.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricCapabilities.Encryption">
            <summary>
            The device supports encryption of samples and templates.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricCapabilities.Navigation">
            <summary>
            The device can be used as a navigation device. Some devices and drivers can capture data in a format that can be translated by a user-mode application into navigation events, much like a mouse.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricCapabilities.Indicator">
            <summary>
            The device has an indicator that can be turned on or off.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricCapabilities.VirtualSensor">
            <summary>
            The sensor adapter manages its own connection to the biometric hardware.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.BiometricDatabase">
            <summary>
            The <see cref="T:WinBiometricDotNet.BiometricDatabase"/> class describes the capabilities of a biometric storage adapter.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricDatabase.BiometricFactor">
            <summary>
            Gets the type of biometric measurement saved in the database.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricDatabase.ConnectionString">
            <summary>
            Gets a string value that can be sent to a database server to identify the database.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricDatabase.DatabaseFlag">
            <summary>
            Gets a flag about the characteristics of the database.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricDatabase.DatabaseId">
            <summary>
            Gets a GUID that identifies the database.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricDatabase.DatabaseTypes">
            <summary>
            Gets a type about the characteristics of the database.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricDatabase.DataFormat">
            <summary>
            Gets a GUID that identifies the format of the templates in the database.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricDatabase.FilePath">
            <summary>
            Gets the path and file name of the database if it resides on the computer disk.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.BiometricIdentity">
            <summary>
            The <see cref="T:WinBiometricDotNet.BiometricIdentity"/> class contains an identifying value associated with a biometric template.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricIdentity.Type">
            <summary>
            Gets the format of the identity information contained in this class.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricIdentity.Sid">
            <summary>
            Gets a value that contains an account SID.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricIdentity.TemplateGuid">
            <summary>
            Gets a 128-bit GUID value that identifies the template.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.BiometricPoolType">
            <summary>
            The <see cref="T:WinBiometricDotNet.BiometricPoolType"/> enumeration specifies the type of biometric unit pool to be used in the session.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricPoolType.Unknown">
            <summary>
            The pool type is unknown.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricPoolType.System">
            <summary>
            Specifies a shared collection of biometric units managed by the service provider.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricPoolType.Private">
            <summary>
            Specifies a collection of biometric units that are managed by the caller.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricPoolType.Unassigned">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.BiometricSensorSubType">
            <summary>
            The <see cref="T:WinBiometricDotNet.BiometricSensorSubType"/> enumeration specifies the onboard sensor capabilities.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricSensorSubType.Unknown">
            <summary>
            The sensor sub types is not known.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricSensorSubType.Swipe">
            <summary>
            The sensor supports fingerprint swipes.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricSensorSubType.Touch">
            <summary>
            The sensor supports finger touches.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.BiometricServiceProvider">
            <summary>
            The <see cref="T:WinBiometricDotNet.BiometricServiceProvider"/> class describes the capabilities of a biometric service provider.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricServiceProvider.BiometricFactor">
            <summary>
            Gets the type of biometric measurement used by this device.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricServiceProvider.Description">
            <summary>
            Gets a description of the biometric service provider.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricServiceProvider.Id">
            <summary>
            Gets a value that uniquely identifies this biometric service provider component.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricServiceProvider.Vendor">
            <summary>
            Gets the name of the vendor supplying the biometric service provider.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricServiceProvider.Version">
            <summary>
            Gets the software version of the biometric service provider component.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.BiometricTypes">
            <summary>
            Represent the standard biometric types defined by National Institute of Standards and Technology Information (NISTIR) 6529-A.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.Mask">
            <summary>
            Bitmask that specifies the supported set of biometric factors.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.NoAvailable">
            <summary>
            No biometric type is available.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.Multiple">
            <summary>
            Multiple types are specified.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.FacialFeatures">
            <summary>
            The biometric sensor captures facial features.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.Voice">
            <summary>
            The biometric sensor captures voice data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.Fingerprint">
            <summary>
            The biometric sensor captures fingerprint data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.Iris">
            <summary>
            The biometric sensor captures iris data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.Retina">
            <summary>
            The biometric sensor captures retina data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.HandGeometry">
            <summary>
            The biometric sensor captures hand data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.SignatureDynamics">
            <summary>
            The biometric sensor captures signatures.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.KeystrokeDynamics">
            <summary>
            The biometric sensor captures keystrokes.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.LipMovement">
            <summary>
            The biometric sensor captures lip data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.ThermalFaceImage">
            <summary>
            The biometric sensor captures thermal face imaging.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.ThermalHandImage">
            <summary>
            The biometric sensor captures thermal hand imaging.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.Gait">
            <summary>
            The biometric sensor captures walking gait data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.Scent">
            <summary>
            The biometric sensor captures scent data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.Dna">
            <summary>
            The biometric sensor captures DNA data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.EarShape">
            <summary>
            The biometric sensor captures ear information.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.FingerGeometry">
            <summary>
            The biometric sensor captures finger shape information.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.Palmprint">
            <summary>
            The biometric sensor captures palm prints.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.VeinPattern">
            <summary>
            The biometric sensor captures blood vein pattern data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.FootPrint">
            <summary>
            The biometric sensor captures foot prints.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.Other">
            <summary>
            The supported biometric data is not defined by the current constants.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.Password">
            <summary>
            The biometric sensor captures password data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.BiometricTypes.Any">
            <summary>
            The biometric sensor captures any type of data.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.BiometricUnit">
            <summary>
            The <see cref="T:WinBiometricDotNet.BiometricUnit"/> class describes the capabilities of a biometric unit.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricUnit.BiometricFactor">
            <summary>
            Gets the type of the biometric unit.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricUnit.SensorSubType">
            <summary>
            Gets the onboard sensor capabilities.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricUnit.UnitId">
            <summary>
            Gets a value that identifies the biometric unit. 
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricUnit.DeviceInstanceId">
            <summary>
            Gets the device ID.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricUnit.Description">
            <summary>
            Gets a description of the biometric unit.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricUnit.Manufacturer">
            <summary>
            Gets the name of the manufacturer.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricUnit.Model">
            <summary>
            Gets the model number of the biometric unit.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricUnit.SerialNumber">
            <summary>
            Gets the serial number of the biometric unit. 
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricUnit.FirmwareVersion">
            <summary>
            Gets the major and minor version numbers for the biometric unit.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricUnit.Capabilities">
            <summary>
            Gets the capabilities of biometric sensor.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricUnit.PoolType">
            <summary>
            Gets the type of biometric unit pool.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.BiometricUnitVersion">
            <summary>
            The <see cref="T:WinBiometricDotNet.BiometricUnitVersion"/> class contains the software version number of a biometric service provider component.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricUnitVersion.MajorVersion">
            <summary>
            Gets the major version number.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.BiometricUnitVersion.MinorVersion">
            <summary>
            Gets the minor version number.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.CaptureEnrollResult">
            <summary>
            The <see cref="T:WinBiometricDotNet.CaptureEnrollResult"/> class contains a result returned from <see cref="M:WinBiometricDotNet.WinBiometric.CaptureEnroll(WinBiometricDotNet.Session)"/> or <see cref="M:WinBiometricDotNet.WinBiometric.CaptureEnrollWithCallback(WinBiometricDotNet.Session)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.CaptureEnrollResult.OperationStatus">
            <summary>
            Gets the error code returned by the capture operation.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.CaptureEnrollResult.RejectDetail">
            <summary>
            Gets a value that contains additional information about the failure to capture a biometric sample.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.CaptureEnrollResult.IsRequiredMoreData">
            <summary>
            Gets a value indicating whether enrollment operation requires more biometrics sample.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.CaptureSample">
            <summary>
            The <see cref="T:WinBiometricDotNet.CaptureSample"/> class contains a fingerprint sample data.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.CaptureSample.Height">
            <summary>
            Gets the height, in pixels.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.CaptureSample.Image">
            <summary>
            Gets the pixel data of the captured fingerprint or palm image.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.CaptureSample.HorizontalImageResolution">
            <summary>
            Gets the horizontal resolution of the captured fingerprint or palm image.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.CaptureSample.HorizontalScanResolution">
            <summary>
            Gets the horizontal resolution of the scan.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.CaptureSample.VerticalImageResolution">
            <summary>
            Gets the vertical resolution of the captured fingerprint or palm image.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.CaptureSample.VerticalScanResolution">
            <summary>
            Gets the vertical resolution of the scan.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.CaptureSample.Width">
            <summary>
            Gets the width, in pixels.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.CaptureSampleEventArgs">
            <summary>
            Provides data for the <see cref="E:WinBiometricDotNet.WinBiometric.SampleCaptured"/> event handler.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.CaptureSampleEventArgs.Result">
            <summary>
            Gets a value that represents the result of an event.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.CaptureSampleResult">
            <summary>
            The <see cref="T:WinBiometricDotNet.VerifyResult"/> class contains a result returned from <see cref="M:WinBiometricDotNet.WinBiometric.CaptureSample(WinBiometricDotNet.Session,WinBiometricDotNet.Purpose,WinBiometricDotNet.DataFlags)"/> or <see cref="M:WinBiometricDotNet.WinBiometric.CaptureSampleWithCallback(WinBiometricDotNet.Session,WinBiometricDotNet.Purpose,WinBiometricDotNet.DataFlags)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.CaptureSampleResult.Sample">
            <summary>
            Gets the data that contain sample.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.CaptureSampleResult.OperationStatus">
            <summary>
            Gets the error code returned by the capture operation.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.CaptureSampleResult.RejectDetail">
            <summary>
            Gets a value that contains additional information about the failure to capture a biometric sample.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.CaptureSampleResult.SampleSize">
            <summary>
            Gets a value that contains the size, in bytes, of <see cref="P:WinBiometricDotNet.CaptureSampleResult.Sample"/> property.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.CaptureSampleResult.UnitId">
            <summary>
            Gets a value that contains the ID of the biometric unit that generated the sample.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.ChangeTypes">
            <summary>
            The <see cref="T:WinBiometricDotNet.ChangeTypes"/> enumeration identify the type of change that occurred in the framework.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.ChangeTypes.Unit">
            <summary>
            A biometric unit was attached to or detached from the computer.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Component">
            <summary>
            The <see cref="T:WinBiometricDotNet.Component"/> enumeration specifies the type of adapter being used.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Component.Sensor">
            <summary>
            Specifies a sensor adapter.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Component.Engine">
            <summary>
            Specifies an engine adapter.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Component.Storage">
            <summary>
            Specifies a storage adapter.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.CredentialFormat">
            <summary>
            The <see cref="T:WinBiometricDotNet.CredentialFormat"/> enumeration specifies the end-user credential format.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.CredentialFormat.Generic">
            <summary>
            The password is in a generic format.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.CredentialFormat.Packed">
            <summary>
            The password is in a compressed format.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.CredentialFormat.Protected">
            <summary>
            The password credential was wrapped with CredProtect.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.CredentialState">
            <summary>
            The <see cref="T:WinBiometricDotNet.CredentialState"/> enumeration specifies whether a credential has been associated with the biometric data for an end user.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.CredentialState.NotSet">
            <summary>
            A credential has been associated with the end user.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.CredentialState.Set">
            <summary>
            A credential has not been associated with the end user.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.CredentialTypes">
            <summary>
            The <see cref="T:WinBiometricDotNet.CredentialTypes"/> enumeration filter on the credential type.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.CredentialTypes.Password">
            <summary>
            Filters password credentials.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.CredentialTypes.All">
            <summary>
            Filters all credentials.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.DatabaseFlags">
            <summary>
            The <see cref="T:WinBiometricDotNet.DatabaseFlags"/> enumeration specifies the characteristics of database.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.DatabaseFlags.Removable">
            <summary>
            The storage medium containing the database can be physically removed from the computer.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.DatabaseFlags.Remote">
            <summary>
            The database resides on a remote computer.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.DatabaseTypes">
            <summary>
            The <see cref="T:WinBiometricDotNet.DatabaseTypes"/> enumeration specifies the type of database.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.DatabaseTypes.File">
            <summary>
            The database is contained in a file.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.DatabaseTypes.DatabaseManagementSystem">
            <summary>
            The database is managed by an external database management system (DBMS) component, such as Microsoft SQL Server.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.DatabaseTypes.OnChip">
            <summary>
            The database resides on the biometric sensor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.DatabaseTypes.SmartCard">
            <summary>
            The database resides on a smart card.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.DataFlags">
            <summary>
            The <see cref="T:WinBiometricDotNet.DataFlags"/> enumeration specifies the type of processing to be applied to the captured sample.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.DataFlags.Privacy">
            <summary>
            The data is encrypted.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.DataFlags.Integrity">
            <summary>
            The data is digitally signed or is protected by a message authentication code (MAC).
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.DataFlags.Signed">
            <summary>
            If this flag and the <see cref="F:WinBiometricDotNet.DataFlags.Integrity"/> flag are set, the data is signed. If this flag is not set but the <see cref="F:WinBiometricDotNet.DataFlags.Integrity"/> flag is set, a MAC is computed on the data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.DataFlags.Raw">
            <summary>
            The data is in the format with which it was captured.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.DataFlags.Intermediate">
            <summary>
            The data is not raw but has not been completely processed.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.DataFlags.Processed">
            <summary>
            The data has been processed.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.DataFlags.OptionMaskPresent">
            <summary>
            The flag mask.
            </summary>
            <remarks>This value is always one (1).</remarks>
        </member>
        <member name="T:WinBiometricDotNet.EnrollCapturedEventArgs">
            <summary>
            Provides data for the <see cref="E:WinBiometricDotNet.WinBiometric.EnrollCaptured"/> event handler.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.EnrollCapturedEventArgs.Result">
            <summary>
            Gets a value that represents the result of an event.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.EnrollCapturedHandler">
            <summary>
            Represents the method that will handle the <see cref="E:WinBiometricDotNet.WinBiometric.EnrollCaptured"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:WinBiometricDotNet.EnrollCapturedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:WinBiometricDotNet.ErrorEvent">
            <summary>
            The <see cref="T:WinBiometricDotNet.ErrorEvent"/> class contains the data that identifies the success or failure of the operation being monitored.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.ErrorEvent.ErrorCode">
            <summary>
            Gets an error code that resulted from computations performed by the Windows Biometric Framework.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.EventMonitoredEventArgs">
            <summary>
            Provides data for the <see cref="E:WinBiometricDotNet.WinBiometric.EventMonitored"/> event handler.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.EventMonitoredEventArgs.EventType">
            <summary>
            Gets a value that specifies the type of service provider event notice raised.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.EventMonitoredEventArgs.OperationStatus">
            <summary>
            Gets the error code returned by the capture operation.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.EventMonitoredEventArgs.EventParameter">
            <summary>
            Gets the data that contains status information sent to the callback routine when an event notice is raised.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.EventMonitoredHandler">
            <summary>
            Represents the method that will handle the <see cref="E:WinBiometricDotNet.WinBiometric.EventMonitored"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:WinBiometricDotNet.EventMonitoredEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:WinBiometricDotNet.EventParameter">
            <summary>
            Provides a result from the <see cref="E:WinBiometricDotNet.WinBiometric.EventMonitored"/> event. This is an abstract class.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.EventTypes">
            <summary>
            The <see cref="T:WinBiometricDotNet.EventTypes"/> enumeration specifies the types of service provider event notifications to monitor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.EventTypes.Unclaimed">
            <summary>
            The sensor detected a finger swipe that was not requested by the application or by the window that currently has focus. The Windows Biometric Framework calls into your callback function to indicate that a finger swipe has occurred but does not try to identify the fingerprint.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.EventTypes.UnclaimedIdentify">
            <summary>
            The sensor detected a finger swipe that was not requested by the application or by the window that currently has focus. The Windows Biometric Framework attempts to identify the fingerprint and passes the result of that process to your callback function.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.FingerPosition">
            <summary>
            The <see cref="T:WinBiometricDotNet.FingerPosition"/> enumeration specifies the numeric number of finger position.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.Unknown">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.RightThumb">
            <summary>
            The thumb finger of right hand.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.RightIndex">
            <summary>
            The index finger of right hand.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.RightMiddle">
            <summary>
            The middle finger of right hand.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.RightRing">
            <summary>
            The ring finger of right hand.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.RightLittle">
            <summary>
            The little finger of right hand.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.LeftThumb">
            <summary>
            The thumb finger of left hand.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.LeftIndex">
            <summary>
            The index finger of left hand.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.LeftMiddle">
            <summary>
            The middle finger of left hand.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.LeftRing">
            <summary>
            The ring finger of left hand.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.LeftLittle">
            <summary>
            The little finger of left hand.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.RightSlap">
            <summary>
            The four-finger slap of right hand.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.LeftSlap">
            <summary>
            The four-finger slap of left hand.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.TwoThumbs">
            <summary>
            The two-thumbs.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.UnspecifiedPosition01">
            <summary>
            The unspecified position 01.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.UnspecifiedPosition02">
            <summary>
            The unspecified position 02.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.UnspecifiedPosition03">
            <summary>
            The unspecified position 03.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.UnspecifiedPosition04">
            <summary>
            The unspecified position 04.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.UnspecifiedPosition05">
            <summary>
            The unspecified position 05.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.UnspecifiedPosition06">
            <summary>
            The unspecified position 06.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.UnspecifiedPosition07">
            <summary>
            The unspecified position 07.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.UnspecifiedPosition08">
            <summary>
            The unspecified position 08.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.UnspecifiedPosition09">
            <summary>
            The unspecified position 09.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.FingerPosition.UnspecifiedPosition10">
            <summary>
            The unspecified position 10.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Framework">
            <summary>
            Represent the handle to the biometric framework.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.Framework.Handle">
            <summary>
            Get the pointer to the handle.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.IdentifiedEventArgs">
            <summary>
            Provides data for the <see cref="E:WinBiometricDotNet.WinBiometric.Identified"/> event handler.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.IdentifiedEventArgs.Result">
            <summary>
            Gets a value that represents the result of an event.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.IdentifiedHandler">
            <summary>
            Represents the method that will handle the <see cref="E:WinBiometricDotNet.WinBiometric.Identified"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:WinBiometricDotNet.IdentifiedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:WinBiometricDotNet.IdentifyResult">
            <summary>
            The <see cref="T:WinBiometricDotNet.IdentifyResult"/> class contains a result returned from <see cref="M:WinBiometricDotNet.WinBiometric.Identify(WinBiometricDotNet.Session)"/> or <see cref="M:WinBiometricDotNet.WinBiometric.IdentifyWithCallback(WinBiometricDotNet.Session)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.IdentifyResult.FingerPosition">
            <summary>
            Gets a value that receives the sub-factor associated with the biometric sample.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.IdentifyResult.Identity">
            <summary>
            Gets the data that receives the GUID or SID of the user providing the biometric sample.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.IdentifyResult.RejectDetail">
            <summary>
            Gets a value that contains additional information about the failure to capture a biometric sample.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.IdentifyResult.UnitId">
            <summary>
            Gets a value that specifies the biometric unit used to perform the identification.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.IdentifyResult.OperationStatus">
            <summary>
            Gets the error code returned by the capture operation.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.IdentityType">
            <summary>
            The <see cref="T:WinBiometricDotNet.IdentityType"/> enumeration specifies the format of the identity information contained in the <see cref="T:WinBiometricDotNet.BiometricIdentity"/> class.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.IdentityType.Null">
            <summary>
            The template has no associated ID. 
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.IdentityType.WildCard">
            <summary>
            The class matches all template identities.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.IdentityType.Guid">
            <summary>
            A GUID identifies the template.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.IdentityType.Sid">
            <summary>
            An account SID identifies the template.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.ERROR_SUCCESS">
            <summary>
            The operation completed successfully.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.ERROR_NO_MORE_ITEMS">
            <summary>
            No more data is available.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.DELETE">
            <summary>
            Required to delete the object.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.READ_CONTROL">
            <summary>
            Required to read the DACL and ownership information for the object. For access to the system access control list (SACL), see ACCESS_SYSTEM_SECURITY later in this table.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.SYNCHRONIZE">
            <summary>
            test
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WRITE_DAC">
            <summary>
            Required to change the DACL information for the object.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WRITE_OWNER">
            <summary>
            Required to change the ownership information in the object's security descriptor (SECURITY_DESCRIPTOR).
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.ACCESS_SYSTEM_SECURITY">
            <summary>
            Required to get or set the SACL in an object's ACL. The operating system grants this right to the new token only if the SE_SECURITY_NAME privilege is enabled in the access token of the calling thread.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.STANDARD_RIGHTS_EXECUTE">
            <summary>
            Currently defined to equal READ_CONTROL.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.STANDARD_RIGHTS_REQUIRED">
            <summary>
            Combines DELETE, READ_CONTROL, WRITE_DAC, and WRITE_OWNER access.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.STANDARD_RIGHTS_ALL">
            <summary>
            Combines DELETE, READ_CONTROL, WRITE_DAC, WRITE_OWNER, and SYNCHRONIZE access. However, the SYNCHRONIZE value is not applicable to token objects. Thus, STANDARD_RIGHTS_ALL has a functionally equivalent to STANDARD_RIGHTS_REQUIRED.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_ADJUST_DEFAULT">
            <summary>
            Required to change the default owner, primary group, or DACL of an access token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_ADJUST_GROUPS">
            <summary>
            Required to adjust the attributes of the groups in an access token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_ADJUST_PRIVILEGES">
            <summary>
            Required to enable or disable the privileges in an access token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_ADJUST_SESSIONID">
            <summary>
            Required to adjust the session ID (SID) of an access token. The operating system grants this right to the new token only if the SE_TCB_NAME privilege is enabled in the access token of the calling thread.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_ASSIGN_PRIMARY">
            <summary>
            Required to attach a primary token to a process. The operating system grants this right to the new token only if the SE_ASSIGNPRIMARYTOKEN_NAME privilege is enabled in the access token of the calling thread.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_DUPLICATE">
            <summary>
            Required to duplicate an access token. Note that the givenExistingTokenHandle token must contain this right in order to successfully use this routine.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_EXECUTE">
            <summary>
            Combines STANDARD_RIGHTS_EXECUTE and TOKEN_IMPERSONATE.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_IMPERSONATE">
            <summary>
            Required to attach an impersonation access token to a process.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_QUERY">
            <summary>
            Required to query an access token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_QUERY_SOURCE">
            <summary>
            Required to query the source of an access token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_READ">
            <summary>
            Combines STANDARD_RIGHTS_READ and TOKEN_QUERY.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_WRITE">
            <summary>
            Combines STANDARD_RIGHTS_WRITE, TOKEN_ADJUST_PRIVILEGES, TOKEN_ADJUST_GROUPS, and TOKEN_ADJUST_DEFAULT.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_ALL_ACCESS">
            <summary>
            Combines all possible token access permissions for a token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_ALL_ACCESS_P">
            <summary>
            test
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_QUERY_VALUE">
            <summary>
            Permission to query subkey data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_SET_VALUE">
            <summary>
            Permission to set subkey data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_CREATE_SUB_KEY">
            <summary>
            Permission to create subkeys.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_ENUMERATE_SUB_KEYS">
            <summary>
            Permission to enumerate subkeys.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_NOTIFY">
            <summary>
            Permission for change notification.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_CREATE_LINK">
            <summary>
            Permission to create a symbolic link.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_WOW64_32KEY">
            <summary>
            Access a 32-bit key from either a 32-bit or 64-bit application.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_WOW64_64KEY">
            <summary>
            Access a 64-bit key from either a 32-bit or 64-bit application.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_WOW64_RES">
            <summary>
            
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_READ">
            <summary>
            Combination of <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_QUERY_VALUE"/>, <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_ENUMERATE_SUB_KEYS"/>, and <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_NOTIFY"/> access.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_WRITE">
            <summary>
            Combination of <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_SET_VALUE"/> and <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_CREATE_SUB_KEY"/> access.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_EXECUTE">
            <summary>
            Permission for read access.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_ALL_ACCESS">
            <summary>
            Combination of <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_QUERY_VALUE"/>, <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_ENUMERATE_SUB_KEYS"/>, <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_NOTIFY"/>, <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_CREATE_SUB_KEY"/>, <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_CREATE_LINK"/>, and <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_SET_VALUE"/> access.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_ANY">
            <summary>
            No type restriction.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_DWORD">
            <summary>
            Restrict type to 32-bit <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_BINARY"/> | <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_DWORD"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_QWORD">
            <summary>
            Restrict type to 64-bit <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_BINARY"/> | <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_DWORD"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_BINARY">
            <summary>
            Restrict type to <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_BINARY"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_DWORD">
            <summary>
            Restrict type to <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_DWORD"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_EXPAND_SZ">
            <summary>
            Restrict type to <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_EXPAND_SZ"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_MULTI_SZ">
            <summary>
            Restrict type to <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_MULTI_SZ"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_NONE">
            <summary>
            Restrict type to <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_NONE"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_QWORD">
            <summary>
            Restrict type to <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_QWORD"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_SZ">
            <summary>
            Restrict type to <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_SZ"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_CREATED_NEW_KEY">
            <summary>
            The key did not exist and was created.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_OPENED_EXISTING_KEY">
            <summary>
            The key existed and was simply opened without being changed.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_BINARY">
            <summary>
            Binary data in any form.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_DWORD">
            <summary>
            A 32-bit number.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_DWORD_LITTLE_ENDIAN">
            <summary>
            <para>A 32-bit number in little-endian format.</para>
            <para>Windows is designed to run on little-endian computer architectures. Therefore, this value is defined as <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_DWORD"/> in the Windows header files.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_DWORD_BIG_ENDIAN">
            <summary>
            <para>A 32-bit number in big-endian format.</para>
            <para>Some UNIX systems support big-endian architectures.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_EXPAND_SZ">
            <summary>
            A null-terminated string that contains unexpanded references to environment variables (for example, "%PATH%"). It will be a Unicode or ANSI string depending on whether you use the Unicode or ANSI functions. To expand the environment variable references, use the <see cref="!:ExpandEnvironmentStrings"/> function.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_LINK">
            <summary>
            A null-terminated Unicode string that contains the target path of a symbolic link that was created by calling the <see cref="!:RegCreateKeyEx"/> function with <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_OPTION_CREATE_LINK"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_MULTI_SZ">
            <summary>
            <para>A sequence of null-terminated strings, terminated by an empty string (\0).</para>
            <para>The following is an example:</para>
            <para>String1\0String2\0String3\0LastString\0\0</para>
            <para>The first \0 terminates the first string, the second to the last \0 terminates the last string, and the final \0 terminates the sequence. Note that the final terminator must be factored into the length of the string.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_NONE">
            <summary>
            No defined value type.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_QWORD">
            <summary>
            A 64-bit number.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_QWORD_LITTLE_ENDIAN">
            <summary>
            <para>A 64-bit number in little-endian format.</para>
            <para>Windows is designed to run on little-endian computer architectures. Therefore, this value is defined as <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_QWORD"/> in the Windows header files.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_SZ">
            <summary>
            A null-terminated string. This will be either a Unicode or an ANSI string, depending on whether you use the Unicode or ANSI functions.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.BIO_UNIT_RAW">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.BIO_UNIT_MAINTENANCE">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.BIO_UNIT_OPEN_SESSION">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.BIO_UNIT_EXTENDED_ACCESS">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.BIO_UNIT_ENROLL">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_UNSUPPORTED_FACTOR">
            <summary>
            The specified biometric factor is not supported.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_UNIT">
            <summary>
            The unit ID number does not correspond to a valid biometric device.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_UNKNOWN_ID">
            <summary>
            The biometric sample does not match any known identity.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_CANCELED">
            <summary>
            The biometric operation was canceled before it could complete.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_NO_MATCH">
            <summary>
            The biometric sample does not match the specified identity or sub-factor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_CAPTURE_ABORTED">
            <summary>
            A biometric sample could not be captured because the capture operation was aborted.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_ENROLLMENT_IN_PROGRESS">
            <summary>
            An enrollment transaction could not be started because another enrollment is already in progress.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_BAD_CAPTURE">
            <summary>
            The captured sample cannot be used for further biometric operations.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_CONTROL_CODE">
            <summary>
            The biometric unit does not support the specified unit control code.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATA_COLLECTION_IN_PROGRESS">
            <summary>
            A pending data collection operation is already in progress.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_UNSUPPORTED_DATA_FORMAT">
            <summary>
            The biometric sensor driver does not support the requested data format.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_UNSUPPORTED_DATA_TYPE">
            <summary>
            The biometric sensor driver does not support the requested data type.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_UNSUPPORTED_PURPOSE">
            <summary>
            The biometric sensor driver does not support the requested data purpose.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_DEVICE_STATE">
            <summary>
            The biometric unit is not in the proper state to perform the specified operation.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DEVICE_BUSY">
            <summary>
            The operation could not be performed because the sensor device was busy.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATABASE_CANT_CREATE">
            <summary>
            The storage adapter was not able to create a new database.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATABASE_CANT_OPEN">
            <summary>
            The storage adapter was not able to open an existing database.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATABASE_CANT_CLOSE">
            <summary>
            The storage adapter was not able to close a database.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATABASE_CANT_ERASE">
            <summary>
            The storage adapter was not able to erase a database.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATABASE_CANT_FIND">
            <summary>
            The storage adapter was not able to find a database.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATABASE_ALREADY_EXISTS">
            <summary>
            The storage adapter was not able to create a database because the specified database already exists.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATABASE_FULL">
            <summary>
            The storage adapter was not able to add a record to the database because the database is full.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATABASE_LOCKED">
            <summary>
            The database is locked and its contents are inaccessible.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATABASE_CORRUPTED">
            <summary>
            The contents of the database have become corrupted and are inaccessible.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATABASE_NO_SUCH_RECORD">
            <summary>
            No records were deleted because the specified identity and sub-factor are not present in the database.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DUPLICATE_ENROLLMENT">
            <summary>
            The specified identity and sub-factor are already enrolled in the database.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATABASE_READ_ERROR">
            <summary>
            An error occurred while trying to read from the database.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATABASE_WRITE_ERROR">
            <summary>
            An error occurred while trying to write to the database.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATABASE_NO_RESULTS">
            <summary>
            No records in the database matched the query.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATABASE_NO_MORE_RECORDS">
            <summary>
            All records from the most recent database query have been retrieved.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATABASE_EOF">
            <summary>
            A database operation unexpectedly encountered the end of the file.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATABASE_BAD_INDEX_VECTOR">
            <summary>
            A database operation failed due to a malformed index vector.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INCORRECT_BSP">
            <summary>
            The biometric unit does not belong to the specified service provider.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INCORRECT_SENSOR_POOL">
            <summary>
            The biometric unit does not belong to the specified sensor pool.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_NO_CAPTURE_DATA">
            <summary>
            The sensor adapter capture buffer is empty.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_SENSOR_MODE">
            <summary>
            The sensor adapter does not support the sensor mode specified in the configuration.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_LOCK_VIOLATION">
            <summary>
            The requested operation cannot be performed due to a locking conflict.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DUPLICATE_TEMPLATE">
            <summary>
            The data in a biometric template matches that of another template already in the database.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_OPERATION">
            <summary>
            The requested operation is not valid for the current state of the session or the biometric unit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_SESSION_BUSY">
            <summary>
            The session cannot begin a new operation because another operation is already in progress.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_CRED_PROV_DISABLED">
            <summary>
            System policy settings have disabled the biometric credential provider.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_CRED_PROV_NO_CREDENTIAL">
            <summary>
            The requested credential was not found.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DISABLED">
            <summary>
            System policy settings have disabled the biometric service.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_CONFIGURATION_FAILURE">
            <summary>
            The biometric unit could not be configured.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_SENSOR_UNAVAILABLE">
            <summary>
            A private pool cannot be created because one or more biometric units are not available.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_SAS_ENABLED">
            <summary>
            A secure attention sequence (CTRL-ALT-DELETE) is required for logon.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DEVICE_FAILURE">
            <summary>
            A biometric sensor has failed.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_FAST_USER_SWITCH_DISABLED">
            <summary>
            >Fast user switching is disabled.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_NOT_ACTIVE_CONSOLE">
            <summary>
            The System sensor pool cannot be opened from Terminal Server client sessions.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_EVENT_MONITOR_ACTIVE">
            <summary>
            There is already an active event monitor associated with the specified session.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_PROPERTY_TYPE">
            <summary>
            The value specified is not a valid property type.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_PROPERTY_ID">
            <summary>
            The value specified is not a valid property ID.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_UNSUPPORTED_PROPERTY">
            <summary>
            The biometric unit does not support the specified property.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_ADAPTER_INTEGRITY_FAILURE">
            <summary>
            The adapter did not pass its integrity check.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INCORRECT_SESSION_TYPE">
            <summary>
            This operation requires a different type of session handle.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_SESSION_HANDLE_CLOSED">
            <summary>
            This session handle has already been closed.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DEADLOCK_DETECTED">
            <summary>
            The requested operation was aborted because it would have caused a deadlock.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_NO_PREBOOT_IDENTITY">
            <summary>
            There is no pre-boot logon identity available.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_MAX_ERROR_COUNT_EXCEEDED">
            <summary>
            The operation was aborted because there were too many errors.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_AUTO_LOGON_DISABLED">
            <summary>
            System policy settings have disabled pre-boot auto-logon using biometrics.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_TICKET">
            <summary>
            The specified ticket is either incorrect or has expired.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_TICKET_QUOTA_EXCEEDED">
            <summary>
            The calling process has too many outstanding tickets.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATA_PROTECTION_FAILURE">
            <summary>
            The biometric service could not decrypt the data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_CRED_PROV_SECURITY_LOCKOUT">
            <summary>
            Biometric authentication has been disabled because of too many unregistered fingerpint scans.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_UNSUPPORTED_POOL_TYPE">
            <summary>
            The requested pool type is not supported by this biometric factor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_SELECTION_REQUIRED">
            <summary>
            A specific individual must be selected in order to perform an enrollment.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_PRESENCE_MONITOR_ACTIVE">
            <summary>
            A presence monitor is already active on that session.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_SUBFACTOR">
            <summary>
            The specified sub-factor value is out of range or is not supported.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_CALIBRATION_FORMAT_ARRAY">
            <summary>
            The sensor adapter returned an invalid calibration format array.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_NO_SUPPORTED_CALIBRATION_FORMAT">
            <summary>
            The sensor and engine adapter don't share a common calibration format.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_UNSUPPORTED_SENSOR_CALIBRATION_FORMAT">
            <summary>
            The sensor adapter does not support the requested calibration format.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_CALIBRATION_BUFFER_TOO_SMALL">
            <summary>
            The requested calibration buffer size is too small.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_CALIBRATION_BUFFER_TOO_LARGE">
            <summary>
            The requested calibration buffer size is too large.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_CALIBRATION_BUFFER_INVALID">
            <summary>
            The sensor adapter cannot process the contents of the calibration buffer.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_KEY_IDENTIFIER">
            <summary>
            The key identifier is invalid.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_KEY_CREATION_FAILED">
            <summary>
            The key cannot be created.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_KEY_IDENTIFIER_BUFFER_TOO_SMALL">
            <summary>
            The key identifier buffer is too small.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_PROPERTY_UNAVAILABLE">
            <summary>
            The biometric unt is unable to provide data for this property at the present time.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_POLICY_PROTECTION_UNAVAILABLE">
            <summary>
            Policy protection is not available because a TPM 2.0 device is either not present or not supported.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INSECURE_SENSOR">
            <summary>
            The biometric sensor does not support a secure hardware data path.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_BUFFER_ID">
            <summary>
            The identifier does not refer to a valid buffer.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_BUFFER">
            <summary>
            The contents of the buffer are not valid.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_TRUSTLET_INTEGRITY_FAIL">
            <summary>
            The Windows Biometric Service secure component was compromised.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_ENROLLMENT_CANCELED_BY_SUSPEND">
            <summary>
            The Windows Biometric Service canceled the enrollment because the platform entered a suspended state.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_I_MORE_DATA">
            <summary>
            Another sample is needed for the current enrollment template.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_I_EXTENDED_STATUS_INFORMATION">
            <summary>
            Return data includes multiple status values, which must be checked separately.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_ADD_FILE">
            <summary>
            For a directory, the right to create a file in the directory.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_ADD_SUBDIRECTORY">
            <summary>
            For a directory, the right to create a subdirectory.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_ALL_ACCESS">
            <summary>
            All possible access rights for a file.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_APPEND_DATA">
            <summary>
            For a file object, the right to append data to the file. (For local files, write operations will not overwrite existing data if this flag is specified without <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_WRITE_DATA"/>.) For a directory object, the right to create a subdirectory (<see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_ADD_SUBDIRECTORY"/>).
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_CREATE_PIPE_INSTANCE">
            <summary>
            For a named pipe, the right to create a pipe.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_DELETE_CHILD">
            <summary>
            For a directory, the right to delete a directory and all the files it contains, including read-only files.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_EXECUTE">
            <summary>
            For a native code file, the right to execute the file. This access right given to scripts may cause the script to be executable, depending on the script interpreter.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_LIST_DIRECTORY">
            <summary>
            For a directory, the right to list the contents of the directory.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_READ_ATTRIBUTES">
            <summary>
            The right to read file attributes.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_READ_DATA">
            <summary>
            For a file object, the right to read the corresponding file data. For a directory object, the right to read the corresponding directory data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_READ_EA">
            <summary>
            The right to read extended file attributes.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_TRAVERSE">
            <summary>
            For a directory, the right to traverse the directory. By default, users are assigned the <see cref="!:BYPASS_TRAVERSE_CHECKING"/> privilege, which ignores the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_TRAVERSE"/> access right. See the remarks in File Security and Access Rights for more information.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_WRITE_ATTRIBUTES">
            <summary>
            The right to write file attributes.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_WRITE_DATA">
            <summary>
            For a file object, the right to write data to the file. For a directory object, the right to create a file in the directory (<see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_ADD_FILE"/>).
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.FILE_WRITE_EA">
            <summary>
            The right to write extended file attributes.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.STANDARD_RIGHTS_READ">
            <summary>
            Includes READ_CONTROL, which is the right to read the information in the file or directory object's security descriptor. This does not include the information in the SACL.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.STANDARD_RIGHTS_WRITE">
            <summary>
            Same as STANDARD_RIGHTS_READ.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.SECURITY_MAX_SID_SIZE">
            <summary>
            The maximum length of a security identifier (SID) value. Currently this is 68.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_MAX_STRING_LEN">
            <summary>
            The maximum length of a WINBIO_STRING value. Currently this is 256.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_MAX_SAMPLE_BUFFER_SIZE">
            <summary>
            The maximum number of bytes in a single biometric data capture.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.LOAD_LIBRARY_AS_DATAFILE">
            <summary>
            <para>If this value is used, the system maps the file into the calling process's virtual address space as if it were a data file. Nothing is done to execute or prepare to execute the mapped file. Therefore, you cannot call functions like <see cref="!:GetModuleFileName"/>, <see cref="!:GetModuleHandle"/> or <see cref="!:GetProcAddress"/> with this DLL. Using this value causes writes to read-only memory to raise an access violation. Use this flag when you want to load a DLL only to extract messages or resources from it.</para>
            <para>This value can be used with <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.LOAD_LIBRARY_AS_IMAGE_RESOURCE"/>. For more information, see Remarks.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE">
            <summary>
            <para>Similar to <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.LOAD_LIBRARY_AS_DATAFILE"/>, except that the DLL file is opened with exclusive write access for the calling process. Other processes cannot open the DLL file for write access while it is in use. However, the DLL can still be opened by other processes.</para>
            <para>This value can be used with <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.LOAD_LIBRARY_AS_IMAGE_RESOURCE"/>. For more information, see Remarks.</para>
            <para>Windows Server 2003 and Windows XP:  This value is not supported until Windows Vista.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.LOAD_LIBRARY_AS_IMAGE_RESOURCE">
            <summary>
            <para>If this value is used, the system maps the file into the process's virtual address space as an image file. However, the loader does not load the static imports or perform the other usual initialization steps. Use this flag when you want to load a DLL only to extract messages or resources from it.</para>
            <para>Unless the application depends on the file having the in-memory layout of an image, this value should be used with either <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE"/> or <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.LOAD_LIBRARY_AS_DATAFILE"/>. For more information, see the Remarks section.</para>
            <para>Windows Server 2003 and Windows XP:  This value is not supported until Windows Vista.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.LOAD_LIBRARY_SEARCH_APPLICATION_DIR">
            <summary>
            <para>If this value is used, the application's installation directory is searched for the DLL and its dependencies. Directories in the standard search path are not searched. This value cannot be combined with <see cref="!:LOAD_WITH_ALTERED_SEARCH_PATH"/>.</para>
            <para>Windows 7, Windows Server 2008 R2, Windows Vista, and Windows Server 2008:  This value requires KB2533623 to be installed.</para>
            <para>Windows Server 2003 and Windows XP:  This value is not supported.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.LOAD_LIBRARY_SEARCH_DEFAULT_DIRS">
            <summary>
            <para>This value is a combination of <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.LOAD_LIBRARY_SEARCH_APPLICATION_DIR"/>, <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.LOAD_LIBRARY_SEARCH_SYSTEM32"/>, and <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.LOAD_LIBRARY_SEARCH_USER_DIRS"/>. Directories in the standard search path are not searched. This value cannot be combined with <see cref="!:LOAD_WITH_ALTERED_SEARCH_PATH"/>.</para>
            <para>This value represents the recommended maximum number of directories an application should include in its DLL search path.</para>
            <para>Windows 7, Windows Server 2008 R2, Windows Vista, and Windows Server 2008:  This value requires KB2533623 to be installed.</para>
            <para>Windows Server 2003 and Windows XP:  This value is not supported.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR">
            <summary>
            <para>If this value is used, the directory that contains the DLL is temporarily added to the beginning of the list of directories that are searched for the DLL's dependencies. Directories in the standard search path are not searched.</para>
            <para>The <paramref name="lpFileName"/> parameter must specify a fully qualified path. This value cannot be combined with <see cref="!:LOAD_WITH_ALTERED_SEARCH_PATH"/>.</para>
            <para>For example, if Lib2.dll is a dependency of C:\Dir1\Lib1.dll, loading Lib1.dll with this value causes the system to search for Lib2.dll only in C:\Dir1. To search for Lib2.dll in C:\Dir1 and all of the directories in the DLL search path, combine this value with <see cref="!:LOAD_LIBRARY_DEFAULT_DIRS"/>.</para>
            <para>Windows 7, Windows Server 2008 R2, Windows Vista, and Windows Server 2008:  This value requires KB2533623 to be installed.</para>
            <para>Windows Server 2003 and Windows XP:  This value is not supported.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.LOAD_LIBRARY_SEARCH_SYSTEM32">
            <summary>
            <para>If this value is used, %windows%\system32 is searched for the DLL and its dependencies. Directories in the standard search path are not searched. This value cannot be combined with <see cref="!:LOAD_WITH_ALTERED_SEARCH_PATH"/>.</para>
            <para>Windows 7, Windows Server 2008 R2, Windows Vista, and Windows Server 2008:  This value requires KB2533623 to be installed.</para>
            <para>Windows Server 2003 and Windows XP:  This value is not supported.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.LOAD_LIBRARY_SEARCH_USER_DIRS">
            <summary>
            <para>If this value is used, directories added using the <see cref="!:AddDllDirectory"/> or the <see cref="!:SetDllDirectory"/> function are searched for the DLL and its dependencies. If more than one directory has been added, the order in which the directories are searched is unspecified. Directories in the standard search path are not searched. This value cannot be combined with <see cref="!:LOAD_WITH_ALTERED_SEARCH_PATH"/>.</para>
            <para>Windows 7, Windows Server 2008 R2, Windows Vista, and Windows Server 2008:  This value requires KB2533623 to be installed.</para>
            <para>Windows Server 2003 and Windows XP:  This value is not supported.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CLASSES_ROOT">
            <summary>
            <para>Registry entries subordinate to this key define types (or classes) of documents and the properties associated with those types. Shell and COM applications use the information stored under this key.</para>
            <para>This key also provides backward compatibility with the Windows 3.1 registration database by storing information for DDE and OLE support. File viewers and user interface extensions store their OLE class identifiers in <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CLASSES_ROOT"/>, and in-process servers are registered in this key.</para>
            <para>This handle should not be used in a service or an application that impersonates different users.</para>
            <para>For more information, see <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CLASSES_ROOT"/>.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_CONFIG">
            <summary>
            <para>Contains information about the current hardware profile of the local computer system. The information under <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_CONFIG"/> describes only the differences between the current hardware configuration and the standard configuration. Information about the standard hardware configuration is stored under the Software and System keys of <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_LOCAL_MACHINE"/>.</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_CONFIG"/> is an alias for HKEY_LOCAL_MACHINE\System\CurrentControlSet\Hardware Profiles\Current.</para>
            <para>For more information, see <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_CONFIG"/>.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_USER">
            <summary>
            <para>Registry entries subordinate to this key define the preferences of the current user. These preferences include the settings of environment variables, data about program groups, colors, printers, network connections, and application preferences. This key makes it easier to establish the current user's settings; the key maps to the current user's branch in HKEY_USERS. In <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_USER"/>, software vendors store the current user-specific preferences to be used within their applications. Microsoft, for example, creates the HKEY_CURRENT_USER\Software\Microsoft key for its applications to use, with each application creating its own subkey under the Microsoft key.</para>
            <para>The mapping between <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_USER"/> and HKEY_USERS is per process and is established the first time the process references <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_USER"/>. The mapping is based on the security context of the first thread to reference <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_USER"/>. If this security context does not have a registry hive loaded in <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_USERS"/>, the mapping is established with HKEY_USERS\.Default. After this mapping is established it persists, even if the security context of the thread changes.</para>
            <para>All registry entries in <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_USER"/> except those under HKEY_CURRENT_USER\Software\Classes are included in the per-user registry portion of a roaming user profile. To exclude other entries from a roaming user profile, store them in <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_USER_LOCAL_SETTINGS"/>.</para>
            <para>This handle should not be used in a service or an application that impersonates different users. Instead, call the <see cref="!:RegOpenCurrentUser"/> function.</para>
            <para>For more information, see <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_USER"/>.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_USER_LOCAL_SETTINGS">
            <summary>
            <para>Registry entries subordinate to this key define preferences of the current user that are local to the machine. These entries are not included in the per-user registry portion of a roaming user profile.</para>
            <para>Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP/2000:  This key is supported starting with Windows 7 and Windows Server 2008 R2.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_LOCAL_MACHINE">
            <summary>
            <para>Registry entries subordinate to this key define the physical state of the computer, including data about the bus type, system memory, and installed hardware and software. It contains subkeys that hold current configuration data, including Plug and Play information (the Enum branch, which includes a complete list of all hardware that has ever been on the system), network logon preferences, network security information, software-related information (such as server names and the location of the server), and other system information.</para>
            <para>For more information, see <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_LOCAL_MACHINE"/>.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_PERFORMANCE_DATA">
            <summary>
            Registry entries subordinate to this key allow you to access performance data. The data is not actually stored in the registry; the registry functions cause the system to collect the data from its source.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_PERFORMANCE_NLSTEXT">
            <summary>
            <para>Registry entries subordinate to this key reference the text strings that describe counters in the local language of the area in which the computer system is running. These entries are not available to Regedit.exe and Regedt32.exe.</para>
            <para>Windows 2000:  This key is not supported.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_PERFORMANCE_TEXT">
            <summary>
            <para>Registry entries subordinate to this key reference the text strings that describe counters in US English. These entries are not available to Regedit.exe and Regedt32.exe.</para>
            <para>Windows 2000:  This key is not supported.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_USERS">
            <summary>
            Registry entries subordinate to this key define the default user configuration for new users on the local computer and the user configuration for the current user.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_FORMAT_OWNER">
            <summary>
            InterNational Committee for Information Technology Standards (INCITS) technical committee M1 (biometrics).
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_FORMAT_TYPE">
            <summary>
            ANSI INCITS 381 finger image based data interchange format.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_SENSOR_SUBTYPE_SWIPE">
            <summary>
            The device requires the user to swipe their fingertip over the sensor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_SENSOR_SUBTYPE_TOUCH">
            <summary>
            The device requires the user to place their entire fingerprint on a sensor pad.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_STANDARD_TYPE_MASK">
            <summary>
            Bitmask that specifies the supported set of biometric factors.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_NO_TYPE_AVAILABLE">
            <summary>
            No biometric type is available.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_MULTIPLE">
            <summary>
            Multiple types are specified.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_FACIAL_FEATURES">
            <summary>
            The biometric sensor captures facial features.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_VOICE">
            <summary>
            The biometric sensor captures voice data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_FINGERPRINT">
            <summary>
            The biometric sensor captures fingerprint data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_IRIS">
            <summary>
            The biometric sensor captures iris data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_RETINA">
            <summary>
            The biometric sensor captures retina data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_HAND_GEOMETRY">
            <summary>
            The biometric sensor captures hand data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_SIGNATURE_DYNAMICS">
            <summary>
            The biometric sensor captures signatures.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_KEYSTROKE_DYNAMICS">
            <summary>
            The biometric sensor captures keystrokes.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_LIP_MOVEMENT">
            <summary>
            The biometric sensor captures lip data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_THERMAL_FACE_IMAGE">
            <summary>
            The biometric sensor captures thermal face imaging.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_THERMAL_HAND_IMAGE">
            <summary>
            The biometric sensor captures thermal hand imaging.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_GAIT">
            <summary>
            The biometric sensor captures walking gait data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_SCENT">
            <summary>
            The biometric sensor captures scent data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_DNA">
            <summary>
            The biometric sensor captures DNA data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_EAR_SHAPE">
            <summary>
            The biometric sensor captures ear information.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_FINGER_GEOMETRY">
            <summary>
            The biometric sensor captures finger shape information.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_PALM_PRINT">
            <summary>
            The biometric sensor captures palm prints.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_VEIN_PATTERN">
            <summary>
            The biometric sensor captures blood vein pattern data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_FOOT_PRINT">
            <summary>
            The biometric sensor captures foot prints.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_OTHER">
            <summary>
            The supported biometric data is not defined by the current constants.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_PASSWORD">
            <summary>
            The biometric sensor captures password data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_ANY">
            <summary>
            The biometric sensor captures any type of data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_PRIVACY">
            <summary>
            The data is encrypted.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_INTEGRITY">
            <summary>
            The data is digitally signed or is protected by a message authentication code (MAC).
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_SIGNED">
            <summary>
            If this flag and the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_INTEGRITY"/> flag are set, the data is signed. If this flag is not set but the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_INTEGRITY"/> flag is set, a MAC is computed on the data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_RAW">
            <summary>
            The data is in the format with which it was captured.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_INTERMEDIATE">
            <summary>
            The data is not raw but has not been completely processed.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_PROCESSED">
            <summary>
            The data has been processed.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_OPTION_MASK_PRESENT">
            <summary>
            The flag mask. This value is always one (1).
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_FIELD_SUBHEAD_COUNT">
            <summary>
            Provided for conformity with NISTIR 6529-A, the Common Biometric Exchange Formats Framework (CBEFF) Patron Format A, but not used.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_FIELD_PRODUCT_ID">
            <summary>
            The ProductId member is valid.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_FIELD_PATRON_ID">
            <summary>
            Provided for conformity with NISTIR 6529-A, CBEFF Patron Format A, but not used.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_FIELD_INDEX">
            <summary>
            Provided for conformity with NISTIR 6529-A, CBEFF Patron Format A, but not used.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_FIELD_CREATION_DATE">
            <summary>
            The CreationDate member is valid.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_FIELD_VALIDITY_PERIOD">
            <summary>
            The ValidityPeriod member is valid.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_FIELD_BIOMETRIC_TYPE">
            <summary>
            The Type member is valid.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_FIELD_BIOMETRIC_SUBTYPE">
            <summary>
            The Subtype member is valid.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_FIELD_CBEFF_HEADER_VERSION">
            <summary>
            The HeaderVersion member is valid.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_FIELD_PATRON_HEADER_VERSION">
            <summary>
            The PatronHeaderVersion member is valid.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_FIELD_BIOMETRIC_PURPOSE">
            <summary>
            The Purpose member is valid.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_FIELD_BIOMETRIC_CONDITION">
            <summary>
            Provided for conformity with NISTIR 6529-A, CBEFF Patron Format A, but not used.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_FIELD_QUALITY">
            <summary>
            The DataQuality member is valid.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_FIELD_CREATOR">
            <summary>
            Provided for conformity with NISTIR 6529-A, CBEFF Patron Format A, but not used.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_FIELD_CHALLENGE">
            <summary>
            Provided for conformity with NISTIR 6529-A, CBEFF Patron Format A, but not used.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_FIELD_PAYLOAD">
            <summary>
            Provided for conformity with NISTIR 6529-A, CBEFF Patron Format A, but not used.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_NO_PURPOSE_AVAILABLE">
            <summary>
            No purpose is specified.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PURPOSE_VERIFY">
            <summary>
            Verify the identity of a user.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PURPOSE_IDENTIFY">
            <summary>
            Identify a user.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PURPOSE_ENROLL">
            <summary>
            Enroll a user.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PURPOSE_ENROLL_FOR_VERIFICATION">
            <summary>
            Capture a biometric sample and determine whether the sample corresponds to the specified user identity.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PURPOSE_ENROLL_FOR_IDENTIFICATION">
            <summary>
            Capture a biometric sample and determine whether it matches an existing biometric template.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PURPOSE_AUDIT">
            <summary>
            Extra information that can be used for logging or for display. This value is ignored on input by all functions. On output, it will only be available if supported by the biometric unit and you specify WINBIO_DATA_FLAG_RAW in the Flags parameter of the WinBioCaptureSample function.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_QUALITY_NOT_SET">
            <summary>
            Quality measurements are supported by the BIR creator, but no value is set in the BIR.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_QUALITY_NOT_SUPPORTED">
            <summary>
            Quality measurements are not supported by the BIR creator.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CBEFF_HEADER_VERSION">
            <summary>
            Specifies the header version.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PATRON_HEADER_VERSION">
            <summary>
            Specifies the patron header version.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_SENSOR">
            <summary>
            The device can collect biometric data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_MATCHING">
            <summary>
            The device can perform match operations.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_DATABASE">
            <summary>
            The sensor contains an onboard database.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_PROCESSING">
            <summary>
            The device can process samples and turn them into biometric templates.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_ENCRYPTION">
            <summary>
            The device supports encryption of samples and templates.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_NAVIGATION">
            <summary>
            The device can be used as a navigation device. Some devices and drivers can capture data in a format that can be translated by a user-mode application into navigation events, much like a mouse.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_INDICATOR">
            <summary>
            The device has an indicator that can be turned on or off.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_VIRTUAL_SENSOR">
            <summary>
            The sensor adapter manages its own connection to the biometric hardware.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_SECURE_SENSOR">
            <summary>
            The device supports security methods available in the WinBio engine adapter interface version 4.0 or later.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_SCP_V1">
            <summary>
            Secure Connection Protocol (SCP) V1
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_WAKE">
            <summary>
            Modern standby support
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_COMPONENT_SENSOR">
            <summary>
            Specifies a sensor adapter.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_COMPONENT_ENGINE">
            <summary>
            Specifies an engine adapter.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_COMPONENT_STORAGE">
            <summary>
            Specifies a storage adapter.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATABASE_TYPE_MASK">
            <summary>
            Represents a mask for all of the _TYPE_ bits.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATABASE_TYPE_FILE">
            <summary>
            The database is contained in a file.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATABASE_TYPE_DBMS">
            <summary>
            The database is managed by an external database management system (DBMS) component, such as Microsoft SQL Server.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATABASE_TYPE_ONCHIP">
            <summary>
            The database resides on the biometric sensor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATABASE_TYPE_SMARTCARD">
            <summary>
            The database resides on a smart card.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATABASE_FLAG_MASK">
            <summary>
            Represents a mask for all of the _FLAG_ bits.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATABASE_FLAG_REMOVABLE">
            <summary>
            The storage medium containing the database can be physically removed from the computer.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATABASE_FLAG_REMOTE">
            <summary>
            The database resides on a remote computer.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DB_DEFAULT">
            <summary>
            Each biometric unit in the sensor pool uses the default database specified in the default biometric unit configuration.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DB_BOOTSTRAP">
            <summary>
            Can be used for scenarios prior to starting Windows. Typically, the database is part of the sensor chip or is part of the BIOS and can only be used for template enrollment and deletion.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DB_ONCHIP">
            <summary>
            The database resides on the sensor chip.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_FP_UNCLAIMED">
            <summary>
            The sensor detected a finger swipe that was not requested by the application or by the window that currently has focus. The Windows Biometric Framework calls into your callback function to indicate that a finger swipe has occurred but does not try to identify the fingerprint.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_FP_UNCLAIMED_IDENTIFY">
            <summary>
            The sensor detected a finger swipe that was not requested by the application or by the window that currently has focus. The Windows Biometric Framework attempts to identify the fingerprint and passes the result of that process to your callback function.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_DEFAULT">
            <summary>
            Sensor configuration flag. The biometric units operate in the manner specified during installation.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_BASIC">
            <summary>
            Sensor configuration flag. The biometric units operate only as basic capture devices.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_ADVANCED">
            <summary>
            Sensor configuration flag. The biometric units use internal processing and storage capabilities.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_RAW">
            <summary>
            Desired access flag. The client application captures raw biometric data using <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioCaptureSample(System.UInt32,System.Byte,System.Byte,System.UInt32@,System.IntPtr@,System.IntPtr@,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_MAINTENANCE">
            <summary>
            Desired access flag. The client performs vendor-defined control operations on a biometric unit by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioControlUnitPrivileged(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FRAMEWORK_CHANGE_UNIT">
            <summary>
            A biometric unit has been attached to or detached from the computer.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ID_TYPE_NULL">
            <summary>
            The template has no associated ID.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ID_TYPE_WILDCARD">
            <summary>
            The structure matches all template identities.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ID_TYPE_GUID">
            <summary>
            A GUID identifies the template.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ID_TYPE_SID">
            <summary>
            An account SID identifies the template.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_INDICATOR_ON">
            <summary>
            The sensor indicator light is on.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_INDICATOR_OFF">
            <summary>
            The sensor indicator light is off.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_NO_FORMAT_OWNER_AVAILABLE">
            <summary>
            No IBIA (International Biometric Industry Association) assigned owner value is available.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_NO_FORMAT_TYPE_AVAILABLE">
            <summary>
            No owner assigned format type is available.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_NONE">
            <summary>
            No operation has been identified.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_OPEN">
            <summary>
            A biometric session was opened. For more information see WinBioAsyncOpenSession.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_CLOSE">
            <summary>
            A biometric session was closed. For more information, see WinBioCloseSession.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_VERIFY">
            <summary>
            A biometric sample was verified against a user identity. For more information, see WinBioVerify.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_IDENTIFY">
            <summary>
            A biometric sample was captured and compared to an existing template. For more information, see WinBioIdentify.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_LOCATE_SENSOR">
            <summary>
            The ID number of a biometric unit was retrieved. For more information, see WinBioLocateSensor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_ENROLL_BEGIN">
            <summary>
            A biometric enrollment sequence was initiated. For more information, see WinBioEnrollBegin.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_ENROLL_CAPTURE">
            <summary>
            A biometric sample was captured and added to the template. For more information, see WinBioEnrollCapture.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_ENROLL_COMMIT">
            <summary>
            A pending biometric template was finalized. For more information, see WinBioEnrollCommit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_ENROLL_DISCARD">
            <summary>
            A pending biometric template was discarded. For more information, see WinBioEnrollDiscard.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_ENUM_ENROLLMENTS">
            <summary>
            The sub-factors for a given template were enumerated. For more information, see WinBioEnumEnrollments.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_DELETE_TEMPLATE">
            <summary>
            A biometric template was deleted from the store. For more information, see WinBioDeleteTemplate.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_CAPTURE_SAMPLE">
            <summary>
            A biometric sample was captured. For more information, see WinBioCaptureSample.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_GET_PROPERTY">
            <summary>
            A biometric session, unit, or template property was retrieved. For more information, see WinBioGetProperty.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_SET_PROPERTY">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_GET_EVENT">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_LOCK_UNIT">
            <summary>
            A biometric unit was locked for exclusive use by a session. For more information, see WinBioLockUnit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_UNLOCK_UNIT">
            <summary>
            The session lock on a biometric unit was released. For more information, see WinBioUnlockUnit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_CONTROL_UNIT">
            <summary>
            Vendor defined operations were performed on a control unit. For more information, see WinBioControlUnit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_CONTROL_UNIT_PRIVILEGED">
            <summary>
            Privileged vendor defined operations were performed on a control unit. For more information, see WinBioControlUnitPrivileged.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_OPEN_FRAMEWORK">
            <summary>
            A handle to the biometric framework was opened.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_CLOSE_FRAMEWORK">
            <summary>
            A handle to the biometric framework was closed. For more information, see WinBioCloseFramework.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_ENUM_SERVICE_PROVIDERS">
            <summary>
            The installed biometric service providers were enumerated. For more information, see WinBioEnumServiceProviders.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_ENUM_BIOMETRIC_UNITS">
            <summary>
            The attached biometric units were enumerated. For more information, see WinBioEnumBiometricUnits.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_ENUM_DATABASES">
            <summary>
            The registered databases were enumerated. For more information, see WinBioEnumDatabases.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_UNIT_ARRIVAL">
            <summary>
            A biometric unit was created. For more information, see WinBioAsyncMonitorFrameworkChanges.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_OPERATION_UNIT_REMOVAL">
            <summary>
            A biometric unit was deleted. For more information, see WinBioAsyncMonitorFrameworkChanges.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_SYSTEM">
            <summary>
            The session connects to a shared collection of biometric units managed by the service provider.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_PRIVATE">
            <summary>
            The session connects to a collection of biometric units that are managed by the caller.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_SAMPLE_HINT">
            <summary>
            Estimate of the maximum number of good biometric samples required to complete an enrollment template.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_EXTENDED_SENSOR_INFO">
            <summary>
            Returns extended information about the capabilities and attributes of the Sensor component connected to a specific biometric unit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_EXTENDED_ENGINE_INFO">
            <summary>
            Returns extended information about the capabilities and attributes of the Engine component connected to a specific biometric unit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_EXTENDED_STORAGE_INFO">
            <summary>
            Returns extended information about the capabilities and attributes of the Storage component connected to a specific biometric unit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_EXTENDED_ENROLLMENT_STATUS">
            <summary>
            Returns extended information about the status of an in-progress enrollment on a particular biometric unit. If no enrollment is in progress on the BU, it returns WINBIO_E_INVALID_OPERATION in the 'TemplateStatus' field.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_EXTENDED_UNIT_STATUS">
            <summary>
            Returns extended information about the current status of a specific biometric unit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_ANTI_SPOOF_POLICY">
            <summary>
            <para>Gets or sets the values of the anti-spoofing policy for a specific user account.</para>
            <para>Performing a 'Get' operation with the wildcard identity returns the system default value of this policy.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_TYPE_SESSION">
            <summary>
            The property applies to a specific biometric session.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_TYPE_UNIT">
            <summary>
            The property applies to a specific biometric unit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_TYPE_TEMPLATE">
            <summary>
            The property applies to a specific biometric template.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_TYPE_ACCOUNT">
            <summary>
            The property applies to a specific user account that has a biometric enrollment.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_HIGH">
            <summary>
            The finger scan began too high on the finger.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_LOW">
            <summary>
            The finger scan began too low on the finger.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_LEFT">
            <summary>
            The finger was too far left during scanning.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_RIGHT">
            <summary>
            The finger was too far right during scanning.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_FAST">
            <summary>
            The finger was swiped too quickly on the sensor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SLOW">
            <summary>
            The finger was swiped too slowly on the sensor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_POOR_QUALITY">
            <summary>
            The scan quality was too poor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SKEWED">
            <summary>
            The finger did not pass straight across the sensor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SHORT">
            <summary>
            Not enough of the finger was scanned.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_MERGE_FAILURE">
            <summary>
            The fingerprint captures could not be combined.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_UNKNOWN_MODE">
            <summary>
            The operating mode is not known.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_BASIC_MODE">
            <summary>
            Operate the sensor in basic mode. The sensor acts only as a capture device. Any onboard processing or storage capabilities that exist are not used.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_ADVANCED_MODE">
            <summary>
            Operate the sensor in advanced mode. The sensor can capture samples and perform matching and storage functions.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_NAVIGATION_MODE">
            <summary>
            Operate the sensor as a mouse pad. This is not currently supported.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_SLEEP_MODE">
            <summary>
            Operate the sensor in sleep mode.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SETTING_SOURCE_INVALID">
            <summary>
            The setting is not valid.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SETTING_SOURCE_DEFAULT">
            <summary>
            The setting originated from built-in policy.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SETTING_SOURCE_POLICY">
            <summary>
            The setting was created by Group Policy.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SETTING_SOURCE_LOCAL">
            <summary>
            The setting originated in the local computer registry.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK">
            <summary>
            Called by the Windows Biometric Framework to notify the client application that an asynchronous operation has completed. The callback is defined by the client application and called by the Windows Biometric Framework.
            </summary>
            <param name="AsyncResult">Pointer to a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure that contains information about the completed operation. The structure is created by the Windows Biometric Framework. You must call WinBioFree to release the structure.</param>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_CALLBACK">
            <summary>
            <para>Called by the Windows Biometric Framework to return results from the asynchronous <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioCaptureSampleWithCallback(System.UInt32,System.Byte,System.Byte,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_CALLBACK,System.IntPtr)"/> function. The client application must implement this function.</para>
            <para>Important  We recommend that, beginning with Windows 8, you no longer use the <see cref="!:PWINBIO_CAPTURE_CALLBACK"/>/<see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioCaptureSampleWithCallback(System.UInt32,System.Byte,System.Byte,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_CALLBACK,System.IntPtr)"/> combination. Instead, do the following:</para>
            <list type="bullet">
            <item>
            <description>Implement a <see cref="!:PWINBIO_ASYNC_COMPLETION_CALLBACK"/> function to receive notice when the operation completes.</description>
            </item>
            <item>
            <description>Call the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/> function. Pass the address of your callback in the <paramref name="CallbackRoutine"/> parameter. Pass <see cref="!:WINBIO_ASYNC_NOTIFY_CALLBACK"/> in the <paramref name="NotificationMethod"/> parameter. Retrieve an asynchronous session handle.</description>
            </item>
            <item>
            <description>Use the asynchronous session handle to call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioCaptureSample(System.UInt32,System.Byte,System.Byte,System.UInt32@,System.IntPtr@,System.IntPtr@,System.UInt32@)"/>. When the operation finishes, the Windows Biometric Framework will allocate and initialize a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure with the results and invoke your callback with a pointer to the results structure.</description>
            </item>
            <item>
            <description>Call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioFree(System.IntPtr)"/> from your callback implementation to release the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure after you have finished using it.</description>
            </item>
            </list>
            </summary>
            <param name="CaptureCallbackContext">Pointer to a buffer defined by the application and passed to the <paramref name="CaptureCallbackContext"/> parameter of the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioCaptureSampleWithCallback(System.UInt32,System.Byte,System.Byte,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_CALLBACK,System.IntPtr)"/> function. The buffer is not modified by the framework or the biometric unit. Your application can use the data to help it determine what actions to perform or to maintain additional information about the biometric capture.</param>
            <param name="OperationStatus">Error code returned by the capture operation.</param>
            <param name="UnitId">Biometric unit ID number.</param>
            <param name="Sample">Pointer to the sample data.</param>
            <param name="SampleSize">Size, in bytes, of the sample data pointed to by the Sample parameter.</param>
            <param name="RejectDetail">Additional information about the failure, if any, to perform the operation. For more information, see Remarks.</param>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ENROLL_CAPTURE_CALLBACK">
            <summary>
            <para>The <see cref="!:PWINBIO_ENROLL_CAPTURE_CALLBACK"/> function is called by the Windows Biometric Framework to return results from the asynchronous <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollCaptureWithCallback(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ENROLL_CAPTURE_CALLBACK,System.IntPtr)"/> function. The client application must implement this function.</para>
            <para>Important  We recommend that, beginning with Windows 8, you no longer use the <see cref="!:PWINBIO_ENROLL_CAPTURE_CALLBACK"/>/<see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollCaptureWithCallback(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ENROLL_CAPTURE_CALLBACK,System.IntPtr)"/> combination. Instead, do the following:</para>
            <list type="bullet">
            <item>
            <description>Implement a <see cref="!:PWINBIO_ASYNC_COMPLETION_CALLBACK"/> function to receive notice when the operation completes.</description>
            </item>
            <item>
            <description>Call the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/> function. Pass the address of your callback in the CallbackRoutine parameter. Pass <see cref="!:WINBIO_ASYNC_NOTIFY_CALLBACK"/> in the NotificationMethod parameter. Retrieve an asynchronous session handle.</description>
            </item>
            <item>
            <description>Use the asynchronous session handle to call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollCapture(System.UInt32,System.UInt32@)"/>. When the operation finishes, the Windows Biometric Framework will allocate and initialize a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure with the results and invoke your callback with a pointer to the results structure.</description>
            </item>
            <item>
            <description>Call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioFree(System.IntPtr)"/> from your callback implementation to release the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure after you have finished using it.</description>
            </item>
            </list>
            </summary>
            <param name="EnrollCallbackContext">Pointer to a buffer defined by the application and passed to the EnrollCallback parameter of the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollCaptureWithCallback(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ENROLL_CAPTURE_CALLBACK,System.IntPtr)"/> function. The buffer is not modified by the framework or the biometric unit. Your application can use the data to help it determine what actions to perform or to maintain additional information about the biometric capture.</param>
            <param name="OperationStatus">Error code returned by the capture operation.</param>
            <param name="RejectDetail">Additional information about the failure, if any, to perform the operation. For more information, see Remarks.</param>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_CALLBACK">
            <summary>
            Called by the Windows Biometric Framework to return results from the asynchronous <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioRegisterEventMonitor(System.UInt32,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_CALLBACK,System.IntPtr)"/> function. The client application must implement this function.
            </summary>
            <param name="EventCallbackContext">Pointer to a buffer defined by the application and passed to the EventCallbackContext parameter of the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioRegisterEventMonitor(System.UInt32,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_CALLBACK,System.IntPtr)"/> function. The buffer is not modified by the framework or the biometric unit. Your application can use the data to help it determine what actions to perform or to maintain additional information about the biometric capture.</param>
            <param name="OperationStatus">Error code returned by the capture operation.</param>
            <param name="Event">Pointer to a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT"/> value. For more information, see <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT"/> Constants.</param>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTIFY_CALLBACK">
            <summary>
            <para>The <see cref="!:PWINBIO_IDENTIFY_CALLBACK"/> function is called by the Windows Biometric Framework to return results from the asynchronous <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioIdentifyWithCallback(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTIFY_CALLBACK,System.IntPtr)"/> function. The client application must implement this function.</para>
            <para>Important  We recommend that, beginning with Windows 8, you no longer use the <see cref="!:PWINBIO_IDENTIFY_CALLBACK"/>/<see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioIdentifyWithCallback(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTIFY_CALLBACK,System.IntPtr)"/> combination. Instead, do the following:</para>
            <list type="bullet">
            <item>
            <description>Implement a <see cref="!:PWINBIO_ASYNC_COMPLETION_CALLBACK"/> function to receive notice when the operation completes.</description>
            </item>
            <item>
            <description>Call the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/> function. Pass the address of your callback in the CallbackRoutine parameter. Pass <see cref="!:WINBIO_ASYNC_NOTIFY_CALLBACK"/> in the NotificationMethod parameter. Retrieve an asynchronous session handle.</description>
            </item>
            <item>
            <description>Use the asynchronous session handle to call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioIdentify(System.UInt32,System.UInt32@,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.Byte@,System.UInt32@)"/>. When the operation finishes, the Windows Biometric Framework will allocate and initialize a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure with the results and invoke your callback with a pointer to the results structure.</description>
            </item>
            <item>
            <description>Call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioFree(System.IntPtr)"/> from your callback implementation to release the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure after you have finished using it.</description>
            </item>
            </list>
            </summary>
            <param name="IdentifyCallbackContext">Pointer to a buffer defined by the application and passed to the IdentifyCallbackContext parameter of the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioIdentifyWithCallback(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTIFY_CALLBACK,System.IntPtr)"/> function. The buffer is not modified by the framework or the biometric unit. Your application can use the data to help it determine what actions to perform or to maintain additional information about the biometric capture.</param>
            <param name="OperationStatus">Error code returned by the capture operation.</param>
            <param name="UnitId">Biometric unit ID number.</param>
            <param name="Identity">A <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY"/> structure that receives the GUID or SID of the user providing the biometric sample.</param>
            <param name="SubFactor">A <see cref="T:System.Byte"/> value that receives the sub-factor associated with the biometric sample. See the Remarks section for more details.</param>
            <param name="RejectDetail">Additional information about the failure, if any, to perform the operation. For more information, see Remarks.</param>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_LOCATE_SENSOR_CALLBACK">
            <summary>
            <para>Called by the Windows Biometric Framework to return results from the asynchronous <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioLocateSensorWithCallback(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_LOCATE_SENSOR_CALLBACK,System.IntPtr)"/> function. The client application must implement this function.</para>
            <para>Important  We recommend that, beginning with Windows 8, you no longer use the <see cref="!:PWINBIO_LOCATE_SENSOR_CALLBACK"/>/<see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioLocateSensorWithCallback(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_LOCATE_SENSOR_CALLBACK,System.IntPtr)"/> combination. Instead, do the following:</para>
            <list type="bullet">
            <item>
            <description>Implement a <see cref="!:PWINBIO_ASYNC_COMPLETION_CALLBACK"/> function to receive notice when the operation completes.</description>
            </item>
            <item>
            <description>Call the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/> function. Pass the address of your callback in the CallbackRoutine parameter. Pass <see cref="!:WINBIO_ASYNC_NOTIFY_CALLBACK"/> in the NotificationMethod parameter. Retrieve an asynchronous session handle.</description>
            </item>
            <item>
            <description>Use the asynchronous session handle to call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioLocateSensor(System.UInt32,System.UInt32@)"/>. When the operation finishes, the Windows Biometric Framework will allocate and initialize a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure with the results and invoke your callback with a pointer to the results structure.</description>
            </item>
            <item>
            <description>Call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioFree(System.IntPtr)"/> from your callback implementation to release the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure after you have finished using it.</description>
            </item>
            </list>
            </summary>
            <param name="LocateCallbackContext">Pointer to a buffer defined by the application and passed to the LocateCallbackContext parameter of the WinBioLocateSensorWithCallback function. The buffer is not modified by the framework or the biometric unit. Your application can use the data to help it determine what actions to perform or to maintain additional information about the biometric capture.</param>
            <param name="OperationStatus">Error code returned by the capture operation.</param>
            <param name="UnitId">Biometric unit ID number.</param>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_VERIFY_CALLBACK">
            <summary>
            <para>Called by the Windows Biometric Framework to return results from the asynchronous <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioVerifyWithCallback(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.Byte,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_VERIFY_CALLBACK,System.IntPtr)"/> function. The client application must implement this function.</para>
            <para>Important  We recommend that, beginning with Windows 8, you no longer use the <see cref="!:PWINBIO_VERIFY_CALLBACK"/>/<see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioVerifyWithCallback(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.Byte,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_VERIFY_CALLBACK,System.IntPtr)"/> combination. Instead, do the following:</para>
            <list type="bullet">
            <item>
            <description>Implement a <see cref="!:PWINBIO_ASYNC_COMPLETION_CALLBACK"/> function to receive notice when the operation completes.</description>
            </item>
            <item>
            <description>Call the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/> function. Pass the address of your callback in the CallbackRoutine parameter. Pass <see cref="!:WINBIO_ASYNC_NOTIFY_CALLBACK"/> in the NotificationMethod parameter. Retrieve an asynchronous session handle.</description>
            </item>
            <item>
            <description>Use the asynchronous session handle to call WinBioVerify. When the operation finishes, the Windows Biometric Framework will allocate and initialize a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure with the results and invoke your callback with a pointer to the results structure.</description>
            </item>
            <item>
            <description>Call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioFree(System.IntPtr)"/> from your callback implementation to release the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure after you have finished using it.</description>
            </item>
            </list>
            </summary>
            <param name="VerifyCallbackContext">Pointer to a buffer defined by the application and passed to the VerifyCallbackContext parameter of the WinBioVerifyWithCallback function. The buffer is not modified by the framework or the biometric unit. Your application can use the data to help it determine what actions to perform or to maintain additional information about the biometric capture.</param>
            <param name="OperationStatus">Error code returned by the capture operation.</param>
            <param name="UnitId">Biometric unit ID number.</param>
            <param name="Match">A Boolean value that specifies whether the captured sample matched the user identity specified by the Identity parameter.</param>
            <param name="RejectDetail">Additional information about the failure, if any, to perform the operation. For more information, see Remarks.</param>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS">
            <summary>
            <para>The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS"/> enumeration contains values that specify the type of information being assigned to or retrieved from an access token.</para>
            <para>The <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.GetTokenInformation(System.IntPtr,WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS,System.IntPtr,System.UInt32,System.UInt32@)"/> function uses these values to indicate the type of token information to retrieve.</para>
            <para>The <see cref="!:SetTokenInformation"/> function uses these values to set the token information.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenUser">
            <summary>
            The buffer receives a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_USER"/> structure that contains the user account of the token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenGroups">
            <summary>
            The buffer receives a <see cref="!:TOKEN_GROUPS"/> structure that contains the group accounts associated with the token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenPrivileges">
            <summary>
            The buffer receives a <see cref="!:TOKEN_PRIVILEGES"/> structure that contains the privileges of the token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenOwner">
            <summary>
            The buffer receives a <see cref="!:TOKEN_OWNER"/> structure that contains the default owner security identifier (SID) for newly created objects.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenPrimaryGroup">
            <summary>
            The buffer receives a <see cref="!:TOKEN_PRIMARY_GROUP"/> structure that contains the default primary group SID for newly created objects.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenDefaultDacl">
            <summary>
            The buffer receives a <see cref="!:TOKEN_DEFAULT_DACL"/> structure that contains the default DACL for newly created objects.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenSource">
            <summary>
            The buffer receives a <see cref="!:TOKEN_SOURCE"/> structure that contains the source of the token. <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_QUERY_SOURCE"/> access is needed to retrieve this information.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenType">
            <summary>
            The buffer receives a <see cref="!:TOKEN_TYPE"/> value that indicates whether the token is a primary or impersonation token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenImpersonationLevel">
            <summary>
            The buffer receives a SECURITY_IMPERSONATION_LEVEL value that indicates the impersonation level of the token. If the access token is not an impersonation token, the function fails.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenStatistics">
            <summary>
            The buffer receives a <see cref="!:TOKEN_STATISTICS"/> structure that contains various token statistics.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenRestrictedSids">
            <summary>
            The buffer receives a <see cref="!:TOKEN_GROUPS"/> structure that contains the list of restricting SIDs in a restricted token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenSessionId">
            <summary>
            <para>The buffer receives a DWORD value that indicates the Terminal Services session identifier that is associated with the token.</para>
            <para>If the token is associated with the terminal server client session, the session identifier is nonzero.</para>
            <para>Windows Server 2003 and Windows XP:  If the token is associated with the terminal server console session, the session identifier is zero.</para>
            <para>In a non-Terminal Services environment, the session identifier is zero.</para>
            <para>If TokenSessionId is set with <see cref="!:SetTokenInformation"/>, the application must have the Act As Part Of the Operating System privilege, and the application must be enabled to set the session ID in a token.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenGroupsAndPrivileges">
            <summary>
            The buffer receives a <see cref="!:TOKEN_GROUPS_AND_PRIVILEGES"/> structure that contains the user SID, the group accounts, the restricted SIDs, and the authentication ID associated with the token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenSessionReference">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenSandBoxInert">
            <summary>
            The buffer receives a DWORD value that is nonzero if the token includes the SANDBOX_INERT flag.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenAuditPolicy">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenOrigin">
            <summary>
            <para>The buffer receives a <see cref="!:TOKEN_ORIGIN"/> value.</para>
            <para>If the token resulted from a logon that used explicit credentials, such as passing a name, domain, and password to the LogonUser function, then the <see cref="!:TOKEN_ORIGIN"/> structure will contain the ID of the logon session that created it.</para>
            <para>If the token resulted from network authentication, such as a call to <see cref="!:AcceptSecurityContext"/> or a call to <see cref="!:LogonUser"/> with dwLogonType set to <see cref="!:LOGON32_LOGON_NETWORK"/> or <see cref="!:LOGON32_LOGON_NETWORK_CLEARTEXT"/>, then this value will be zero.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenElevationType">
            <summary>
            The buffer receives a <see cref="!:TOKEN_ELEVATION_TYPE"/> value that specifies the elevation level of the token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenLinkedToken">
            <summary>
            The buffer receives a <see cref="!:TOKEN_LINKED_TOKEN"/> structure that contains a handle to another token that is linked to this token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenElevation">
            <summary>
            The buffer receives a <see cref="!:TOKEN_ELEVATION"/> structure that specifies whether the token is elevated.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenHasRestrictions">
            <summary>
            The buffer receives a DWORD value that is nonzero if the token has ever been filtered.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenAccessInformation">
            <summary>
            The buffer receives a <see cref="!:TOKEN_ACCESS_INFORMATION"/> structure that specifies security information contained in the token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenVirtualizationAllowed">
            <summary>
            The buffer receives a DWORD value that is nonzero if virtualization is allowed for the token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenVirtualizationEnabled">
            <summary>
            The buffer receives a DWORD value that is nonzero if virtualization is enabled for the token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenIntegrityLevel">
            <summary>
            The buffer receives a <see cref="!:TOKEN_MANDATORY_LABEL"/> structure that specifies the token's integrity level.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenUIAccess">
            <summary>
            The buffer receives a DWORD value that is nonzero if the token has the UIAccess flag set.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenMandatoryPolicy">
            <summary>
            The buffer receives a <see cref="!:TOKEN_MANDATORY_POLICY"/> structure that specifies the token's mandatory integrity policy.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenLogonSid">
            <summary>
            The buffer receives a <see cref="!:TOKEN_GROUPS"/> structure that specifies the token's logon SID.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenIsAppContainer">
            <summary>
            The buffer receives a DWORD value that is nonzero if the token is an app container token. Any callers who check the TokenIsAppContainer and have it return 0 should also verify that the caller token is not an identify level impersonation token. If the current token is not an app container but is an identity level token, you should return AccessDenied.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenCapabilities">
            <summary>
            The buffer receives a <see cref="!:TOKEN_GROUPS"/> structure that contains the capabilities associated with the token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenAppContainerSid">
            <summary>
            The buffer receives a <see cref="!:TOKEN_APPCONTAINER_INFORMATION"/> structure that contains the AppContainerSid associated with the token. If the token is not associated with an app container, the TokenAppContainer member of the <see cref="!:TOKEN_APPCONTAINER_INFORMATION"/> structure points to NULL.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenAppContainerNumber">
            <summary>
            The buffer receives a DWORD value that includes the app container number for the token. For tokens that are not app container tokens, this value is zero.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenUserClaimAttributes">
            <summary>
            The buffer receives a <see cref="!:CLAIM_SECURITY_ATTRIBUTES_INFORMATION"/> structure that contains the user claims associated with the token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenDeviceClaimAttributes">
            <summary>
            The buffer receives a <see cref="!:CLAIM_SECURITY_ATTRIBUTES_INFORMATION"/> structure that contains the device claims associated with the token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenRestrictedUserClaimAttributes">
            <summary>
            This value is reserved.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenRestrictedDeviceClaimAttributes">
            <summary>
            This value is reserved.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenDeviceGroups">
            <summary>
            The buffer receives a <see cref="!:TOKEN_GROUPS"/> structure that contains the device groups that are associated with the token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenRestrictedDeviceGroups">
            <summary>
            The buffer receives a <see cref="!:TOKEN_GROUPS"/> structure that contains the restricted device groups that are associated with the token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenSecurityAttributes">
            <summary>
            This value is reserved.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.TokenIsRestricted">
            <summary>
            This value is reserved.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS.MaxTokenInfoClass">
            <summary>
            The maximum value for this enumeration.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD">
            <summary>
            Defines constants that specify how completion notifications for asynchronous operations are to be delivered to the client application. This enumeration is used by the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenFramework(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/> and <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/> functions.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD.WINBIO_ASYNC_NOTIFY_NONE">
            <summary>
            The operation is synchronous.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD.WINBIO_ASYNC_NOTIFY_CALLBACK">
            <summary>
            The client-implemented PWINBIO_ASYNC_COMPLETION_CALLBACK function is called by the framework.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD.WINBIO_ASYNC_NOTIFY_MESSAGE">
            <summary>
            The framework sends completion notices to the client application window message queue.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD.WINBIO_ASYNC_NOTIFY_MAXIMUM_VALUE">
            <summary>
            The maximum enumeration value. This constant is not directly used by the WinBioAsyncOpenFramework and WinBioAsyncOpenSession.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_FORMAT">
            <summary>
            Defines flags that can be used to specify the end-user credential format. This enumeration is used by the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioSetCredential(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_TYPE,System.IntPtr,System.IntPtr,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_FORMAT)"/> function.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_FORMAT.WINBIO_PASSWORD_GENERIC">
            <summary>
            The password is in a generic format.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_FORMAT.WINBIO_PASSWORD_PACKED">
            <summary>
            The password is in a compressed format.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_FORMAT.WINBIO_PASSWORD_PROTECTED">
            <summary>
            The password credential was wrapped with <see cref="!:CredProtect"/>.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_TYPE">
            <summary>
            Defines flags that can be used to filter on the credential type. This enumeration is used by the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioSetCredential(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_TYPE,System.IntPtr,System.IntPtr,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_FORMAT)"/>, <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioRemoveCredential(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_TYPE)"/>, and <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioGetCredentialState(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_TYPE,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_STATE@)"/> functions.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_TYPE.WINBIO_CREDENTIAL_PASSWORD">
            <summary>
            Filters password credentials.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_TYPE.WINBIO_CREDENTIAL_ALL">
            <summary>
            Filters all credentials.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_STATE">
            <summary>
            Defines values that specify whether a credential has been associated with the biometric data for an end user. This enumeration is used by the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioGetCredentialState(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_TYPE,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_STATE@)"/> function.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_STATE.WINBIO_CREDENTIAL_NOT_SET">
            <summary>
            A credential has been associated with the end user.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_STATE.WINBIO_CREDENTIAL_SET">
            <summary>
            A credential has not been associated with the end user.
            </summary>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.CopySid(System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            The <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.CopySid(System.UInt32,System.IntPtr,System.IntPtr)"/> function copies a security identifier (SID) to a buffer.
            </summary>
            <param name="nDestinationSidLength">Specifies the length, in bytes, of the buffer receiving the copy of the SID.</param>
            <param name="pDestinationSid">A pointer to a buffer that receives a copy of the source SID structure.</param>
            <param name="pSourceSid">A pointer to a SID structure that the function copies to the buffer pointed to by the pDestinationSid parameter.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero. To get extended error information, call <see cref="!:GetLastError"/>.</para>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.GetLengthSid(System.IntPtr)">
            <summary>
            The <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.GetLengthSid(System.IntPtr)"/> function returns the length, in bytes, of a valid security identifier (SID).
            </summary>
            <param name="pSid">A pointer to the SID structure whose length is returned. The structure is assumed to be valid.</param>
            <returns>
            <para>If the SID structure is valid, the return value is the length, in bytes, of the SID structure.</para>
            <para>If the SID structure is not valid, the return value is undefined. Before calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.GetLengthSid(System.IntPtr)"/>, pass the SID to the <see cref="!:IsValidSid"/> function to verify that the SID is valid.</para>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.GetTokenInformation(System.IntPtr,WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS,System.IntPtr,System.UInt32,System.UInt32@)">
            <summary>
            <para>The <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.GetTokenInformation(System.IntPtr,WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_INFORMATION_CLASS,System.IntPtr,System.UInt32,System.UInt32@)"/> function retrieves a specified type of information about an access token. The calling process must have appropriate access rights to obtain the information.</para>
            <para>To determine if a user is a member of a specific group, use the <see cref="!:CheckTokenMembership"/> function. To determine group membership for app container tokens, use the <see cref="!:CheckTokenMembershipEx"/> function.</para>
            </summary>
            <param name="TokenHandle"></param>
            <param name="TokenInformationClass"></param>
            <param name="TokenInformation"></param>
            <param name="TokenInformationLength"></param>
            <param name="ReturnLength">
            <para>A pointer to a variable that receives the number of bytes needed for the buffer pointed to by the TokenInformation parameter. If this value is larger than the value specified in the TokenInformationLength parameter, the function fails and stores no data in the buffer.</para>
            <para>If the value of the TokenInformationClass parameter is <see cref="!:TokenDefaultDacl"/> and the token has no default DACL, the function sets the variable pointed to by ReturnLength to sizeof(<see cref="!:TOKEN_DEFAULT_DACL"/>) and sets the DefaultDacl member of the <see cref="!:TOKEN_DEFAULT_DACL"/> structure to NULL.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero. To get extended error information, call <see cref="!:GetLastError"/>.</para>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.OpenProcessToken(System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            The <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.OpenProcessToken(System.IntPtr,System.UInt32,System.IntPtr@)"/> function opens the access token associated with a process.
            </summary>
            <param name="ProcessHandle">A handle to the process whose access token is opened. The process must have the <see cref="!:PROCESS_QUERY_INFORMATION"/> access permission.</param>
            <param name="DesiredAccess">
            <para>Specifies an access mask that specifies the requested types of access to the access token. These requested access types are compared with the discretionary access control list (DACL) of the token to determine which accesses are granted or denied.</para>
            <para>For a list of access rights for access tokens, see Access Rights for Access-Token Objects.</para>
            </param>
            <param name="TokenHandle">A pointer to a handle that identifies the newly opened access token when the function returns.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero. To get extended error information, call <see cref="!:GetLastError"/>.</para>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.RegCreateKeyExW(System.UIntPtr,System.String,System.UInt32,System.Text.StringBuilder,System.UInt32,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.SECURITY_ATTRIBUTES*,System.UIntPtr@,System.UInt32@)">
            <summary>
            <para>Creates the specified registry key. If the key already exists, the function opens it. Note that key names are not case sensitive.</para>
            <para>To perform transacted registry operations on a key, call the <see cref="!:RegCreateKeyTransacted"/> function.</para>
            <para>Applications that back up or restore system state including system files and registry hives should use the Volume Shadow Copy Service instead of the registry functions.</para>
            </summary>
            <param name="hKey">
            <para>A handle to an open registry key. The calling process must have <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_CREATE_SUB_KEY"/> access to the key. For more information, see Registry Key Security and Access Rights.</para>
            <para>Access for key creation is checked against the security descriptor of the registry key, not the access mask specified when the handle was obtained. Therefore, even if <paramref name="hKey"/> was opened with a <paramref name="samDesired"/> of <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_READ"/>, it can be used in operations that modify the registry if allowed by its security descriptor.</para>
            <para>This handle is returned by the <see cref="!:RegCreateKeyEx"/> or <see cref="!:RegOpenKeyEx"/> function, or it can be one of the following predefined keys:</para>
            <para><paramref name="HKEY_CLASSES_ROOT"/></para>
            <para><paramref name="HKEY_CURRENT_CONFIG"/></para>
            <para><paramref name="HKEY_CURRENT_USER"/></para>
            <para><paramref name="HKEY_LOCAL_MACHINE"/></para>
            <para><paramref name="HKEY_USERS"/></para>
            </param>
            <param name="lpSubKey">
            <para>The name of a subkey that this function opens or creates. The subkey specified must be a subkey of the key identified by the <paramref name="hKey"/> parameter; it can be up to 32 levels deep in the registry tree. For more information on key names, see Structure of the Registry.</para>
            <para>If <paramref name="lpSubKey"/> is a pointer to an empty string, <paramref name="phkResult"/> receives a new handle to the key specified by hKey.</para>
            <para>This parameter cannot be NULL.</para>
            </param>
            <param name="Reserved">This parameter is reserved and must be zero.</param>
            <param name="lpClass">The user-defined class type of this key. This parameter may be ignored. This parameter can be NULL.</param>
            <param name="dwOptions">
            <para>This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_OPTION_BACKUP_RESTORE"/></para><para>0x00000004L</para></term>
            <description>
            <para>If this flag is set, the function ignores the <paramref name="samDesired"/> parameter and attempts to open the key with the access required to backup or restore the key. If the calling thread has the <see cref="!:SE_BACKUP_NAME"/> privilege enabled, the key is opened with the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.ACCESS_SYSTEM_SECURITY"/> and <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_READ"/> access rights. If the calling thread has the <see cref="!:SE_RESTORE_NAME"/> privilege enabled, beginning with Windows Vista, the key is opened with the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.ACCESS_SYSTEM_SECURITY"/>, <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.DELETE"/> and <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_WRITE"/> access rights. If both privileges are enabled, the key has the combined access rights for both privileges. For more information, see Running with Special Privileges.</para>
            </description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_OPTION_CREATE_LINK"/></para><para>0x00000002L</para></term>
            <description>
            <para>Note  Registry symbolic links should only be used for for application compatibility when absolutely necessary.</para>
            <para>This key is a symbolic link. The target path is assigned to the L"SymbolicLinkValue" value of the key. The target path must be an absolute registry path.</para>
            </description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_OPTION_NON_VOLATILE"/></para><para>0x00000000L</para></term>
            <description>
            <para>This key is not volatile; this is the default. The information is stored in a file and is p<paramref name="reserved"/> when the system is restarted. The <see cref="!:RegSaveKey"/> function saves keys that are not volatile.</para>
            </description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_OPTION_VOLATILE"/></para><para>0x00000001L</para></term>
            <description>
            <para>All keys created by the function are volatile. The information is stored in memory and is not p<paramref name="reserved"/> when the corresponding registry hive is unloaded. For <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_LOCAL_MACHINE"/>, this occurs only when the system initiates a full shutdown. For registry keys loaded by the <see cref="!:RegLoadKey"/> function, this occurs when the corresponding <see cref="!:RegUnLoadKey"/> is performed. The <see cref="!:RegSaveKey"/> function does not save volatile keys. This flag is ignored for keys that already exist.</para>
            <para>Note  On a user selected shutdown, a fast startup shutdown is the default behavior for the system.</para>
            </description>
            </item>
            </list>
            </param>
            <param name="samDesired">A mask that specifies the access rights for the key to be created. For more information, see Registry Key Security and Access Rights.</param>
            <param name="lpSecurityAttributes">
            <para>A pointer to a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.SECURITY_ATTRIBUTES"/> structure that determines whether the returned handle can be inherited by child processes. If lpSecurityAttributes is NULL, the handle cannot be inherited.</para>
            <para>The lpSecurityDescriptor member of the structure specifies a security descriptor for the new key. If <paramref name="lpSecurityAttributes"/> is NULL, the key gets a default security descriptor. The ACLs in a default security descriptor for a key are inherited from its direct parent key.</para>
            </param>
            <param name="phkResult">A pointer to a variable that receives a handle to the opened or created key. If the key is not one of the predefined registry keys, call the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.RegCloseKey(System.UIntPtr)"/> function after you have finished using the handle.</param>
            <param name="lpdwDisposition">
            <para>A pointer to a variable that receives one of the following disposition values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_CREATED_NEW_KEY"/></para><para>0x00000001L</para></term>
            <description>
            <para>The key did not exist and was created.</para>
            </description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_OPENED_EXISTING_KEY"/></para><para>0x00000002L</para></term>
            <description>
            <para>The key existed and was simply opened without being changed.</para>
            </description>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.ERROR_SUCCESS"/>.</para>
            <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.FormatMessage(System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr@,System.UInt32,System.String[])"/> function with the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.FORMAT_MESSAGE_FROM_SYSTEM"/> flag to get a generic description of the error.</para>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.RegDeleteKeyExW(System.UIntPtr,System.String,System.UInt32,System.UInt32)">
            <summary>
            <para>Deletes a subkey and its values from the specified platform-specific view of the registry. Note that key names are not case sensitive.</para>
            <para>To delete a subkey as a transacted operation, call the <see cref="!:RegDeleteKeyTransacted"/> function.</para>
            </summary>
            <param name="hKey"></param>
            <param name="lpSubKey">
            <para>The name of the key to be deleted. This key must be a subkey of the key specified by the value of the <paramref name="hKey"/> parameter.</para>
            <para>The function opens the subkey with the DELETE access right.</para>
            <para>Key names are not case sensitive.</para>
            <para>The value of this parameter cannot be NULL.</para> 
            </param>
            <param name="samDesired">
            <para>An access mask the specifies the platform-specific view of the registry.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_WOW64_32KEY"/></para><para>0x0200</para></term>
            <description>Delete the key from the 32-bit registry view.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_WOW64_64KEY"/></para><para>0x0100</para></term>
            <description>Delete the key from the 64-bit registry view.</description>
            </item>
            </list>
            </param>
            <param name="Reserved">This parameter is reserved and must be zero.</param>
            <returns>
            <para>If the function succeeds, the return value is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.ERROR_SUCCESS"/>.</para>
            <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.FormatMessage(System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr@,System.UInt32,System.String[])"/> function with the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.FORMAT_MESSAGE_FROM_SYSTEM"/> flag to get a generic description of the error.</para>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.RegEnumKeyExW(System.UIntPtr,System.UInt32,System.Text.StringBuilder,System.UInt32@,System.IntPtr,System.Text.StringBuilder,System.IntPtr,WinBiometricDotNet.Interop.SafeNativeMethods.FILETIME@)">
            <summary>
            Enumerates the subkeys of the specified open registry key. The function retrieves information about one subkey each time it is called.
            </summary>
            <param name="hKey">
            <para>A handle to an open registry key. The key must have been opened with the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_ENUMERATE_SUB_KEYS"/> access right. For more information, see Registry Key Security and Access Rights.</para>
            <para>This handle is returned by the <see cref="!:RegCreateKeyEx"/>, <see cref="!:RegCreateKeyTransacted"/>, <see cref="!:RegOpenKeyEx"/>, or <see cref="!:RegOpenKeyTransacted"/> function. It can also be one of the following predefined keys:</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CLASSES_ROOT"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_CONFIG"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_USER"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_LOCAL_MACHINE"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_PERFORMANCE_DATA"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_USERS"/></para>
            </param>
            <param name="dwIndex">
            <para>The index of the subkey to retrieve. This parameter should be zero for the first call to the <see cref="!:RegEnumKeyEx"/> function and then incremented for subsequent calls.</para>
            <para>Because subkeys are not ordered, any new subkey will have an arbitrary index. This means that the function may return subkeys in any order.</para>
            </param>
            <param name="lpName">
            <para>A pointer to a buffer that receives the name of the subkey, including the terminating null character. The function copies only the name of the subkey, not the full key hierarchy, to the buffer. If the function fails, no information is copied to this buffer.</para>
            <para>For more information, see Registry Element Size Limits.</para>
            </param>
            <param name="lpcName">
            <para>A pointer to a variable that specifies the size of the buffer specified by the <paramref name="lpName"/> parameter, in characters. This size should include the terminating null character. If the function succeeds, the variable pointed to by <paramref name="lpcName"/> contains the number of characters stored in the buffer, not including the terminating null character.</para>
            <para>To determine the required buffer size, use the <see cref="!:RegQueryInfoKey"/> function to determine the size of the largest subkey for the key identified by the <paramref name="hKey"/> parameter.</para>
            </param>
            <param name="lpReserved">This parameter is reserved and must be NULL.</param>
            <param name="lpClass">A pointer to a buffer that receives the user-defined class of the enumerated subkey. This parameter can be NULL.</param>
            <param name="lpcClass">A pointer to a variable that specifies the size of the buffer specified by the <paramref name="lpClass"/> parameter, in characters. The size should include the terminating null character. If the function succeeds, <paramref name="lpcClass"/> contains the number of characters stored in the buffer, not including the terminating null character. This parameter can be NULL only if <paramref name="lpClass"/> is NULL.</param>
            <param name="lpftLastWriteTime">A pointer to <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.FILETIME"/> structure that receives the time at which the enumerated subkey was last written. This parameter can be NULL.</param>
            <returns>
            <para>If the function succeeds, the return value is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.ERROR_SUCCESS"/>.</para>
            <para>If the function fails, the return value is a system error code. If there are no more subkeys available, the function returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.ERROR_NO_MORE_ITEMS"/>.</para>
            <para>If the lpName buffer is too small to receive the name of the key, the function returns <see cref="!:ERROR_MORE_DATA"/>.</para>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.RegGetValueW(System.UIntPtr,System.String,System.String,System.UInt32,System.UInt32@,System.IntPtr@,System.UInt32@)">
            <summary>
            Retrieves the type and data for the specified registry value.
            </summary>
            <param name="hKey">
            <para>A handle to an open <see cref="!:registry"/> key. The key must have been opened with the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_QUERY_VALUE"/> access right. For more information, see <see cref="!:Registry"/> Key Security and Access Rights.</para>
            <para>This handle is returned by the <see cref="!:RegCreateKeyEx"/>, <see cref="!:RegCreateKeyTransacted"/>, <see cref="!:RegOpenKeyEx"/>, or <see cref="!:RegOpenKeyTransacted"/> function. It can also be one of the following predefined keys:</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CLASSES_ROOT"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_CONFIG"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_USER"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_LOCAL_MACHINE"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_PERFORMANCE_DATA"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_PERFORMANCE_NLSTEXT"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_PERFORMANCE_TEXT"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_USERS"/></para>
            </param>
            <param name="lpSubKey">
            <para>The name of the registry key. This key must be a subkey of the key specified by the <paramref name="hkey"/> parameter.</para>
            <para>Key names are not case sensitive.</para>
            </param>
            <param name="lpValue">
            <para>The name of the registry value.</para>
            <para>If this parameter is NULL or an empty string, "", the function retrieves the type and data for the key's unnamed or default value, if any.</para>
            <para>For more information, see Registry Element Size Limits.</para>
            <para>Keys do not automatically have an unnamed or default value. Unnamed values can be of any type.</para>
            </param>
            <param name="dwFlags">
            <para>The flags that restrict the data type of value to be queried. If the data type of the value does not meet this criteria, the function fails. This parameter can be one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_ANY"/></para><para>0x0000ffff</para></term>
            <description>No type restriction.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_DWORD"/></para><para>0x00000018</para></term>
            <description>Restrict type to 32-bit RRF_RT_REG_BINARY | RRF_RT_REG_DWORD.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_QWORD"/></para><para>0x00000048</para></term>
            <description>Restrict type to 64-bit RRF_RT_REG_BINARY | RRF_RT_REG_DWORD.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_BINARY"/></para><para>0x00000008</para></term>
            <description>Restrict type to REG_BINARY.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_DWORD"/></para><para>0x00000010</para></term>
            <description>Restrict type to REG_DWORD.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_EXPAND_SZ"/></para><para>0x00000004</para></term>
            <description>Restrict type to REG_EXPAND_SZ.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_MULTI_SZ"/></para><para>0x00000020</para></term>
            <description>Restrict type to REG_MULTI_SZ.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_NONE"/></para><para>0x00000001</para></term>
            <description>Restrict type to REG_NONE.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_QWORD"/></para><para>0x00000040</para></term>
            <description>Restrict type to REG_QWORD.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_SZ"/></para><para>0x00000002</para></term>
            <description>Restrict type to REG_SZ.</description>
            </item>
            </list>
            <para>This parameter can also include one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ID_TYPE_NULL"/></term>
            <description>The template has no associated ID.</description>
            </item>
            <item>
            <term><para><see cref="!:RRF_NOEXPAND"/></para><para>0x10000000</para></term>
            <description>Do not automatically expand environment strings if the value is of type <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_EXPAND_SZ"/>.</description>
            </item>
            <item>
            <term><para><see cref="!:RRF_ZEROONFAILURE"/></para><para>0x20000000</para></term>
            <description>If <paramref name="pvData"/> is not NULL, set the contents of the buffer to zeroes on failure.</description>
            </item>
            <item>
            <term><para><see cref="!:RRF_SUBKEY_WOW6464KEY"/></para><para>0x00010000</para></term>
            <description>
            <para>If <paramref name="lpSubKey"/> is not NULL, open the subkey that <paramref name="lpSubKey"/> specifies with the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_WOW64_64KEY"/> access rights. For information about these access rights, see Registry Key Security and Access Rights.</para>
            <para>You cannot specify <see cref="!:RRF_SUBKEY_WOW6464KEY"/> in combination with <see cref="!:RRF_SUBKEY_WOW6432KEY"/>.</para>
            </description>
            </item>
            <item>
            <term><para><see cref="!:RRF_SUBKEY_WOW6432KEY"/></para><para>0x00020000</para></term>
            <description>
            <para>If <paramref name="lpSubKey"/> is not NULL, open the subkey that <paramref name="lpSubKey"/> specifies with the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_WOW64_64KEY"/> access rights. For information about these access rights, see Registry Key Security and Access Rights.</para>
            <para>You cannot specify <see cref="!:RRF_SUBKEY_WOW6464KEY"/> in combination with <see cref="!:RRF_SUBKEY_WOW6432KEY"/>.</para>
            </description>
            </item>
            </list>
            </param>
            <param name="pdwType">A pointer to a variable that receives a code indicating the type of data stored in the specified value. For a list of the possible type codes, see Registry Value Types. This parameter can be NULL if the type is not required.</param>
            <param name="pvData">
            <para>A pointer to a buffer that receives the value's data. This parameter can be NULL if the data is not required.</para>
            <para>If the data is a string, the function checks for a terminating null character. If one is not found, the string is stored with a null terminator if the buffer is large enough to accommodate the extra character. Otherwise, the function fails and returns <see cref="!:ERROR_MORE_DATA"/>.</para>
            </param>
            <param name="pcbData">
            <para>A pointer to a variable that specifies the size of the buffer pointed to by the <paramref name="pvData"/> parameter, in bytes. When the function returns, this variable contains the size of the data copied to <paramref name="pvData"/>.</para>
            <para>The <paramref name="pcbData"/> parameter can be NULL only if <paramref name="pvData"/> is NULL.</para>
            <para>If the data has the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_SZ"/>, <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_MULTI_SZ"/> or <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_EXPAND_SZ"/> type, this size includes any terminating null character or characters. For more information, see Remarks.</para>
            <para>If the buffer specified by <paramref name="pvData"/> parameter is not large enough to hold the data, the function returns <see cref="!:ERROR_MORE_DATA"/> and stores the required buffer size in the variable pointed to by <paramref name="pcbData"/>. In this case, the contents of the <paramref name="pvData"/> buffer are undefined.</para>
            <para>If <paramref name="pvData"/> is NULL, and <paramref name="pcbData"/> is non-NULL, the function returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.ERROR_SUCCESS"/> and stores the size of the data, in bytes, in the variable pointed to by <paramref name="pcbData"/>. This enables an application to determine the best way to allocate a buffer for the value's data.</para>
            <para>If <paramref name="hKey"/> specifies <paramref name="HKEY_PERFORMANCE_DATA"/> and the <paramref name="pvData"/> buffer is not large enough to contain all of the returned data, the function returns <see cref="!:ERROR_MORE_DATA"/> and the value returned through the <paramref name="pcbData"/> parameter is undefined. This is because the size of the performance data can change from one call to the next. In this case, you must increase the buffer size and call <see cref="!:RegGetValue"/> again passing the updated buffer size in the <paramref name="pcbData"/> parameter. Repeat this until the function succeeds. You need to maintain a separate variable to keep track of the buffer size, because the value returned by <paramref name="pcbData"/> is unpredictable.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.ERROR_SUCCESS"/>.</para>
            <para>If the function fails, the return value is a system error code.</para>
            <para>If the <paramref name="pvData"/> buffer is too small to receive the value, the function returns <see cref="!:ERROR_MORE_DATA"/>.</para>
            <para>If <paramref name="dwFlags"/> specifies a combination of both <see cref="!:RRF_SUBKEY_WOW6464KEY"/> and <see cref="!:RRF_SUBKEY_WOW6432KEY"/>, the function returns <see cref="!:ERROR_INVALID_PARAMETER"/>.</para>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.RegGetValueW(System.UIntPtr,System.String,System.String,System.UInt32,System.UInt32@,System.IntPtr,System.UInt32@)">
            <summary>
            Retrieves the type and data for the specified registry value.
            </summary>
            <param name="hKey">
            <para>A handle to an open <see cref="!:registry"/> key. The key must have been opened with the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_QUERY_VALUE"/> access right. For more information, see <see cref="!:Registry"/> Key Security and Access Rights.</para>
            <para>This handle is returned by the <see cref="!:RegCreateKeyEx"/>, <see cref="!:RegCreateKeyTransacted"/>, <see cref="!:RegOpenKeyEx"/>, or <see cref="!:RegOpenKeyTransacted"/> function. It can also be one of the following predefined keys:</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CLASSES_ROOT"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_CONFIG"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_USER"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_LOCAL_MACHINE"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_PERFORMANCE_DATA"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_PERFORMANCE_NLSTEXT"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_PERFORMANCE_TEXT"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_USERS"/></para>
            </param>
            <param name="lpSubKey">
            <para>The name of the registry key. This key must be a subkey of the key specified by the <paramref name="hkey"/> parameter.</para>
            <para>Key names are not case sensitive.</para>
            </param>
            <param name="lpValue">
            <para>The name of the registry value.</para>
            <para>If this parameter is NULL or an empty string, "", the function retrieves the type and data for the key's unnamed or default value, if any.</para>
            <para>For more information, see Registry Element Size Limits.</para>
            <para>Keys do not automatically have an unnamed or default value. Unnamed values can be of any type.</para>
            </param>
            <param name="dwFlags">
            <para>The flags that restrict the data type of value to be queried. If the data type of the value does not meet this criteria, the function fails. This parameter can be one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_ANY"/></para><para>0x0000ffff</para></term>
            <description>No type restriction.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_DWORD"/></para><para>0x00000018</para></term>
            <description>Restrict type to 32-bit RRF_RT_REG_BINARY | RRF_RT_REG_DWORD.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_QWORD"/></para><para>0x00000048</para></term>
            <description>Restrict type to 64-bit RRF_RT_REG_BINARY | RRF_RT_REG_DWORD.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_BINARY"/></para><para>0x00000008</para></term>
            <description>Restrict type to REG_BINARY.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_DWORD"/></para><para>0x00000010</para></term>
            <description>Restrict type to REG_DWORD.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_EXPAND_SZ"/></para><para>0x00000004</para></term>
            <description>Restrict type to REG_EXPAND_SZ.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_MULTI_SZ"/></para><para>0x00000020</para></term>
            <description>Restrict type to REG_MULTI_SZ.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_NONE"/></para><para>0x00000001</para></term>
            <description>Restrict type to REG_NONE.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_QWORD"/></para><para>0x00000040</para></term>
            <description>Restrict type to REG_QWORD.</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.RRF_RT_REG_SZ"/></para><para>0x00000002</para></term>
            <description>Restrict type to REG_SZ.</description>
            </item>
            </list>
            <para>This parameter can also include one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ID_TYPE_NULL"/></term>
            <description>The template has no associated ID.</description>
            </item>
            <item>
            <term><para><see cref="!:RRF_NOEXPAND"/></para><para>0x10000000</para></term>
            <description>Do not automatically expand environment strings if the value is of type <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_EXPAND_SZ"/>.</description>
            </item>
            <item>
            <term><para><see cref="!:RRF_ZEROONFAILURE"/></para><para>0x20000000</para></term>
            <description>If <paramref name="pvData"/> is not NULL, set the contents of the buffer to zeroes on failure.</description>
            </item>
            <item>
            <term><para><see cref="!:RRF_SUBKEY_WOW6464KEY"/></para><para>0x00010000</para></term>
            <description>
            <para>If <paramref name="lpSubKey"/> is not NULL, open the subkey that <paramref name="lpSubKey"/> specifies with the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_WOW64_64KEY"/> access rights. For information about these access rights, see Registry Key Security and Access Rights.</para>
            <para>You cannot specify <see cref="!:RRF_SUBKEY_WOW6464KEY"/> in combination with <see cref="!:RRF_SUBKEY_WOW6432KEY"/>.</para>
            </description>
            </item>
            <item>
            <term><para><see cref="!:RRF_SUBKEY_WOW6432KEY"/></para><para>0x00020000</para></term>
            <description>
            <para>If <paramref name="lpSubKey"/> is not NULL, open the subkey that <paramref name="lpSubKey"/> specifies with the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_WOW64_64KEY"/> access rights. For information about these access rights, see Registry Key Security and Access Rights.</para>
            <para>You cannot specify <see cref="!:RRF_SUBKEY_WOW6464KEY"/> in combination with <see cref="!:RRF_SUBKEY_WOW6432KEY"/>.</para>
            </description>
            </item>
            </list>
            </param>
            <param name="pdwType">A pointer to a variable that receives a code indicating the type of data stored in the specified value. For a list of the possible type codes, see Registry Value Types. This parameter can be NULL if the type is not required.</param>
            <param name="pvData">
            <para>A pointer to a buffer that receives the value's data. This parameter can be NULL if the data is not required.</para>
            <para>If the data is a string, the function checks for a terminating null character. If one is not found, the string is stored with a null terminator if the buffer is large enough to accommodate the extra character. Otherwise, the function fails and returns <see cref="!:ERROR_MORE_DATA"/>.</para>
            </param>
            <param name="pcbData">
            <para>A pointer to a variable that specifies the size of the buffer pointed to by the <paramref name="pvData"/> parameter, in bytes. When the function returns, this variable contains the size of the data copied to <paramref name="pvData"/>.</para>
            <para>The <paramref name="pcbData"/> parameter can be NULL only if <paramref name="pvData"/> is NULL.</para>
            <para>If the data has the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_SZ"/>, <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_MULTI_SZ"/> or <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_EXPAND_SZ"/> type, this size includes any terminating null character or characters. For more information, see Remarks.</para>
            <para>If the buffer specified by <paramref name="pvData"/> parameter is not large enough to hold the data, the function returns <see cref="!:ERROR_MORE_DATA"/> and stores the required buffer size in the variable pointed to by <paramref name="pcbData"/>. In this case, the contents of the <paramref name="pvData"/> buffer are undefined.</para>
            <para>If <paramref name="pvData"/> is NULL, and <paramref name="pcbData"/> is non-NULL, the function returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.ERROR_SUCCESS"/> and stores the size of the data, in bytes, in the variable pointed to by <paramref name="pcbData"/>. This enables an application to determine the best way to allocate a buffer for the value's data.</para>
            <para>If <paramref name="hKey"/> specifies <paramref name="HKEY_PERFORMANCE_DATA"/> and the <paramref name="pvData"/> buffer is not large enough to contain all of the returned data, the function returns <see cref="!:ERROR_MORE_DATA"/> and the value returned through the <paramref name="pcbData"/> parameter is undefined. This is because the size of the performance data can change from one call to the next. In this case, you must increase the buffer size and call <see cref="!:RegGetValue"/> again passing the updated buffer size in the <paramref name="pcbData"/> parameter. Repeat this until the function succeeds. You need to maintain a separate variable to keep track of the buffer size, because the value returned by <paramref name="pcbData"/> is unpredictable.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.ERROR_SUCCESS"/>.</para>
            <para>If the function fails, the return value is a system error code.</para>
            <para>If the <paramref name="pvData"/> buffer is too small to receive the value, the function returns <see cref="!:ERROR_MORE_DATA"/>.</para>
            <para>If <paramref name="dwFlags"/> specifies a combination of both <see cref="!:RRF_SUBKEY_WOW6464KEY"/> and <see cref="!:RRF_SUBKEY_WOW6432KEY"/>, the function returns <see cref="!:ERROR_INVALID_PARAMETER"/>.</para>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.RegOpenKeyExW(System.UIntPtr,System.String,System.UInt32,System.Int32,System.UIntPtr@)">
            <summary>
            <para>Opens the specified registry key. Note that key names are not case sensitive.</para>
            <para>To perform transacted registry operations on a key, call the <see cref="!:RegOpenKeyTransacted"/> function.</para>
            </summary>
            <param name="hKey">
            <para>A handle to an open registry key. This handle is returned by the <see cref="!:RegCreateKeyEx"/> or <see cref="!:RegOpenKeyEx"/> function, or it can be one of the following predefined keys:</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CLASSES_ROOT"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_CONFIG"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_USER"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_LOCAL_MACHINE"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_USERS"/></para> 
            </param>
            <param name="lpSubKey">
            <para>The name of the registry subkey to be opened.</para>
            <para>Key names are not case sensitive.</para>
            <para>The <paramref name="lpSubKey"/> parameter can be a pointer to an empty string. If <paramref name="lpSubKey"/> is a pointer to an empty string and <paramref name="hKey"/> is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CLASSES_ROOT"/>, <paramref name="phkResult"/> receives the same <paramref name="hKey"/> handle passed into the function. Otherwise, <paramref name="phkResult"/> receives a new handle to the key specified by <paramref name="hKey"/>.</para>
            <para>The <paramref name="lpSubKey"/> parameter can be NULL only if hKey is one of the predefined keys. If <paramref name="lpSubKey"/> is NULL and <paramref name="hKey"/> is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CLASSES_ROOT"/>, <paramref name="phkResult"/> receives a new handle to the key specified by <paramref name="hKey"/>. Otherwise, <paramref name="phkResult"/> receives the same <paramref name="hKey"/> handle passed in to the function.</para>
            <para>For more information, see Registry Element Size Limits.</para>
            </param>
            <param name="ulOptions">
            <para>Specifies the option to apply when opening the key. Set this parameter to zero or the following:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_OPTION_OPEN_LINK"/></term>
            <description>The key is a symbolic link. Registry symbolic links should only be used when absolutely necessary.</description>
            </item>
            </list>
            </param>
            <param name="samDesired">A mask that specifies the desired access rights to the key to be opened. The function fails if the security descriptor of the key does not permit the requested access for the calling process. For more information, see Registry Key Security and Access Rights.</param>
            <param name="phkResult">A pointer to a variable that receives a handle to the opened key. If the key is not one of the predefined registry keys, call the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.RegCloseKey(System.UIntPtr)"/> function after you have finished using the handle.</param>
            <returns>
            <para>If the function succeeds, the return value is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.ERROR_SUCCESS"/>.</para>
            <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.FormatMessage(System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr@,System.UInt32,System.String[])"/> function with the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.FORMAT_MESSAGE_FROM_SYSTEM"/> flag to get a generic description of the error.</para>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.RegSetValueExW(System.UIntPtr,System.String,System.UInt32,System.UInt32,System.IntPtr,System.UInt32)">
            <summary>
            Sets the data and type of a specified value under a registry key.
            </summary>
            <param name="hKey">
            <para>A handle to an open registry key. The key must have been opened with the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.KEY_SET_VALUE"/> access right. For more information, see Registry Key Security and Access Rights.</para>
            <para>This handle is returned by the <see cref="!:RegCreateKeyEx"/>, <see cref="!:RegCreateKeyTransacted"/>, <see cref="!:RegOpenKeyEx"/>, or <see cref="!:RegOpenKeyTransacted"/> function. It can also be one of the following predefined keys:</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CLASSES_ROOT"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_CONFIG"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_CURRENT_USER"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_LOCAL_MACHINE"/></para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_USERS"/></para>
            <para>The Unicode version of this function supports the following additional predefined keys:</para>
            <list type="bullet">
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_PERFORMANCE_TEXT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.HKEY_PERFORMANCE_NLSTEXT"/></description>
            </item>
            </list>
            </param>
            <param name="lpValueName">
            <para>The name of the value to be set. If a value with this name is not already present in the key, the function adds it to the key.</para>
            <para>If <paramref name="lpValueName"/> is NULL or an empty string, "", the function sets the type and data for the key's unnamed or default value.</para>
            <para>For more information, see Registry Element Size Limits.</para>
            <para>Registry keys do not have default values, but they can have one unnamed value, which can be of any type.</para>
            </param>
            <param name="Reserved">This parameter is reserved and must be zero.</param>
            <param name="dwType">The type of data pointed to by the lpData parameter. For a list of the possible types, see Registry Value Types.</param>
            <param name="lpData">
            <para>The data to be stored.</para>
            <para>For string-based types, such as <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_SZ"/>, the string must be null-terminated. With the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_MULTI_SZ"/> data type, the string must be terminated with two null characters. String-literal values must be formatted using a backslash preceded by another backslash as an escape character. For example, specify "C:\\mydir\\myfile" to store the string "C:\mydir\myfile".</para>
            <para>Note  lpData indicating a null value is valid, however, if this is the case, cbData must be set to '0'.</para>
            </param>
            <param name="cbData">The size of the information pointed to by the lpData parameter, in bytes. If the data is of type <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_SZ"/>, <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_EXPAND_SZ"/>, or <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.REG_MULTI_SZ"/>, cbData must include the size of the terminating null character or characters.</param>
            <returns>
            <para>If the function succeeds, the return value is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.ERROR_SUCCESS"/>.</para>
            <para>If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.FormatMessage(System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr@,System.UInt32,System.String[])"/> function with the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.FORMAT_MESSAGE_FROM_SYSTEM"/> flag to get a generic description of the error.</para>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.RtlZeroMemory(System.IntPtr,System.IntPtr)">
            <summary>
            The <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.RtlZeroMemory(System.IntPtr,System.IntPtr)"/> routine fills a block of memory with zeros, given a pointer to the block and the length, in bytes, to be filled.
            </summary>
            <param name="Destination">A pointer to the memory block to be filled with zeros.</param>
            <param name="Length">The number of bytes to fill with zeros.</param>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAcquireFocus">
            <summary>
            Acquires window focus.
            </summary>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_ACCESSDENIED"/></term>
            <description>The calling process must be running under the Local System account.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncEnumBiometricUnits(System.UInt32,System.UInt32)">
            <summary>
            Asynchronously enumerates all attached biometric units that match the input factor type. For a synchronous version of this function, see <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumBiometricUnits(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA[]@,System.IntPtr@)"/>.
            </summary>
            <param name="FrameworkHandle">Handle to the framework session opened by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenFramework(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="Factor">A bitmask of <see cref="T:System.UInt32"/> flags that specifies the biometric unit types to be enumerated. Only <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_FINGERPRINT"/> is currently supported.</param>
            <returns>
            <para>The function returns an HRESULT indicating success or failure. Note that success indicates only that the arguments were valid. Failures encountered during the execution of the operation will be returned asynchronously to a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure using the notification method specified in the call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenFramework(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>You must set the <paramref name="FrameworkHandle"/> argument.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The bitmask contained in the <paramref name="Factor"/> parameter contains one or more an invalid type bits.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_OUTOFMEMORY"/></term>
            <description>There was insufficient memory to complete the request.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DISABLED"/></term>
            <description>Current administrative policy prohibits use of the Windows Biometric Framework API.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INCORRECT_SESSION_TYPE"/></term>
            <description>The <paramref name="FrameworkHandle"/> argument must represent an asynchronous framework session.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_SESSION_HANDLE_CLOSED"/></term>
            <description>The session handle has been marked for closure.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncEnumDatabases(System.UInt32,System.UInt32)">
            <summary>
            Asynchronously enumerates all registered databases that match a specified type. For a synchronous version of this function, see <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumDatabases(System.UInt32,System.IntPtr@,System.IntPtr@)"/>.
            </summary>
            <param name="FrameworkHandle">Handle to the framework session opened by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenFramework(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="Factor">A bitmask of <see cref="T:System.UInt32"/> flags that specifies the biometric database types to be enumerated. Only <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_FINGERPRINT"/> is currently supported.</param>
            <returns>
            <para>The function returns an HRESULT indicating success or failure. Note that success indicates only that the arguments were valid. Failures encountered during the execution of the operation will be returned asynchronously to a WINBIO_ASYNC_RESULT structure using the notification method specified in the call to WinBioAsyncOpenFramework.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>You must set the <paramref name="FrameworkHandle"/> argument.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The bitmask contained in the <paramref name="Factor"/> parameter contains one or more an invalid type bits.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_OUTOFMEMORY"/></term>
            <description>There was insufficient memory to complete the request.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INCORRECT_SESSION_TYPE"/></term>
            <description>The <paramref name="FrameworkHandle"/> argument must represent an asynchronous framework session.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncEnumServiceProviders(System.UInt32,System.UInt32)">
            <summary>
            Asynchronously returns information about installed biometric service providers. For a synchronous version of this function, see <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumServiceProviders(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BSP_SCHEMA[]@,System.IntPtr@)"/>.
            </summary>
            <param name="FrameworkHandle">Handle to the framework session opened by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenFramework(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="Factor">A bitmask of <see cref="T:System.UInt32"/> flags that specifies the biometric service provider types to be enumerated. For Windows 8, only <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_FINGERPRINT"/> is supported.</param>
            <returns>
            <para>The function returns an HRESULT indicating success or failure. Note that success indicates only that the arguments were valid. Failures encountered during the execution of the operation will be returned asynchronously to a WINBIO_ASYNC_RESULT structure using the notification method specified in the call to WinBioAsyncOpenFramework.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>You must set the <paramref name="FrameworkHandle"/> argument.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The bitmask contained in the <paramref name="Factor"/> parameter contains one or more an invalid type bits.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_OUTOFMEMORY"/></term>
            <description>There was insufficient memory to complete the request.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INCORRECT_SESSION_TYPE"/></term>
            <description>The <paramref name="FrameworkHandle"/> argument must represent an asynchronous framework session.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncMonitorFrameworkChanges(System.UInt32,System.UInt32)">
            <summary>
            Starts an asynchronous monitor of changes to the biometric framework. Currently, the only monitored changes that are supported occur when a biometric unit is attached to or detached from the computer.
            </summary>
            <param name="FrameworkHandle">Handle to the framework session opened by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenFramework(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="ChangeTypes">
            <para>A bitmask of type <see cref="T:System.UInt32"/> flags that indicates the types of events that should generate asynchronous notifications. Beginning with Windows 8, the following flag is available:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FRAMEWORK_CHANGE_UNIT"/></term>
            <description>A biometric unit has been attached to or detached from the computer.</description>
            </item>
            </list>
            </param>
            <returns>
            <para>The function returns an HRESULT indicating success or failure. Note that success indicates only that the arguments were valid. Failures encountered during the execution of the operation will be returned asynchronously to a WINBIO_ASYNC_RESULT structure using the notification method specified in the call to WinBioAsyncOpenFramework.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>You must set the <paramref name="FrameworkHandle"/> argument.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The bitmask contained in the <paramref name="ChangeTypes"/> parameter contains one or more an invalid type bits. Currently, the only available value is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FRAMEWORK_CHANGE_UNIT"/>.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INCORRECT_SESSION_TYPE"/></term>
            <description>The <paramref name="FrameworkHandle"/> argument must represent an asynchronous framework session.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenFramework(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)">
            <summary>
            Opens a handle to the biometric framework. You can use this handle to asynchronously enumerate biometric units, databases, and service providers and to receive asynchronous notification when biometric units are attached to the computer or removed.
            </summary>
            <param name="NotificationMethod">
            <para>Specifies how completion notifications for asynchronous operations in this framework session are to be delivered to the client application. This must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="!:WINBIO_ASYNC_NOTIFY_CALLBACK"/></term>
            <description>The framework invokes the callback function defined by the application.</description>
            </item>
            <item>
            <term><see cref="!:WINBIO_ASYNC_NOTIFY_MESSAGE"/></term>
            <description>The framework posts a window message to the application's message queue.</description>
            </item>
            </list>
            </param>
            <param name="TargetWindow">Handle of the window that will receive the completion notices. This value is ignored unless the <paramref name="NotificationMethod"/> parameter is set to WINBIO_ASYNC_NOTIFY_MESSAGE.</param>
            <param name="MessageCode">
            <para>Window message code the framework must send to signify completion notices. This value is ignored unless the <paramref name="NotificationMethod"/> parameter is set to WINBIO_ASYNC_NOTIFY_MESSAGE. The value must be within the range WM_APP(0x8000) to 0xBFFF.</para>
            <para>The Windows Biometric Framework sets the LPARAM value of the message to the address of the WINBIO_ASYNC_RESULT structure that contains the results of the operation. You must call WinBioFree to release the structure after you have finished using it.</para>
            </param>
            <param name="CallbackRoutine">Address of the callback routine to be invoked for completion notices. This value is ignored unless the <paramref name="NotificationMethod"/> parameter is set to WINBIO_ASYNC_NOTIFY_CALLBACK.</param>
            <param name="UserData">Address of a buffer supplied by the caller. The buffer is not modified by the framework or the biometric unit. It is returned in the WINBIO_ASYNC_RESULT structure. Your application can use the data to help it determine what actions to perform upon receipt of the completion notice or to maintain additional information about the requested operation.</param>
            <param name="AsynchronousOpen">
            <para>Specifies whether to block until the framework session has been opened. Specifying FALSE causes the process to block. Specifying TRUE causes the session to be opened asynchronously.</para>
            <para>If you specify FALSE to open the framework session synchronously, success or failure is returned to the caller directly by this function in the HRESULT return value. If the session is opened successfully, the first asynchronous completion event your application receives will be for an asynchronous operation requested after the framework has been open.</para>
            <para>If you specify TRUE to open the framework session asynchronously, the first asynchronous completion notice received will be for opening the framework. If the <paramref name="NotificationMethod"/> parameter is set to WINBIO_ASYNC_NOTIFY_CALLBACK, operation results are delivered to the WINBIO_ASYNC_RESULT structure in the callback function specified by the <paramref name="CallbackRoutine"/> parameter. If the <paramref name="NotificationMethod"/> parameter is set to WINBIO_ASYNC_NOTIFY_MESSAGE, operation results are delivered to the WINBIO_ASYNC_RESULT structure pointed to by the LPARAM field of the window message.</para>
            </param>
            <param name="FrameworkHandle">
            <para>If the function does not succeed, this parameter will be NULL.</para>
            <para>If the session is opened synchronously and successfully, this parameter will contain a pointer to the session handle.</para>
            <para>If you specify that the session be opened asynchronously, this method returns immediately, the session handle will be NULL, and you must examine the WINBIO_ASYNC_RESULT structure to determine whether the session was successfully opened.</para>
            </param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_OUTOFMEMORY"/></term>
            <description>There is not enough memory available to create the framework session.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>If you set the notification method to <see cref="!:WINBIO_ASYNC_NOTIFY_MESSAGE"/>, the <paramref name="TargetWindow"/> parameter cannot be NULL or HWND_BROADCAST and the <paramref name="MessageCode"/> parameter cannot be zero (0).</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>
            <para>The <paramref name="FrameworkHandle"/> parameter and the <paramref name="AsynchronousOpen"/> parameter must be set.</para>
            <para>If you set the notification method to <see cref="!:WINBIO_ASYNC_NOTIFY_CALLBACK"/>, you must also specify the address of a callback function in the <paramref name="CallbackRoutine"/> parameter.</para>
            </description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)">
            <summary>
            <para>Asynchronously connects to a biometric service provider and one or more biometric units. If successful, the function returns a biometric session handle. Every operation performed by using this handle will be completed asynchronously, including <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioCloseSession(System.UInt32)"/>, and the results will be returned to the client application by using the method specified in the <paramref name="NotificationMethod"/> parameter.</para>
            <para>For a synchronous version of this function, see <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>.</para>
            </summary>
            <param name="Factor">A bitmask of <see cref="T:System.UInt32"/> <paramref name="flags"/> that specifies the biometric unit types to be enumerated. Only <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_FINGERPRINT"/> is currently supported.</param>
            <param name="PoolType">
            <para>A ULONG value that specifies the type of the biometric units that will be used in the session. This can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_SYSTEM"/></term>
            <description>The session connects to a shared collection of biometric units managed by the service provider.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_PRIVATE"/></term>
            <description>The session connects to a collection of biometric units that are managed by the caller.</description>
            </item>
            </list>
            </param>
            <param name="Flags">
            <para>A ULONG value that specifies biometric unit configuration and access characteristics for the new session. Configuration <paramref name="flags"/> specify the general configuration of units in the session. Access <paramref name="flags"/> specify how the application will use the biometric units. You must specify one configuration flag but you can combine that flag with any access flag.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_DEFAULT"/></term>
            <description>
            <para>Group: configuration</para>
            <para>The biometric units operate in the manner specified during installation. You must use this value when the <paramref name="PoolType"/> parameter is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_SYSTEM"/>.</para>
            </description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_BASIC"/></term>
            <description>
            <para>Group: configuration</para>
            <para>The biometric units operate only as basic capture devices. All processing, matching, and storage operations is performed by software plug-ins.</para>
            </description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_ADVANCED"/></term>
            <description>
            <para>Group: configuration</para>
            <para>The biometric units use internal processing and storage capabilities.</para>
            </description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_RAW"/></term>
            <description>
            <para>Group: access</para>
            <para>The client application captures raw biometric data using <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioCaptureSample(System.UInt32,System.Byte,System.Byte,System.UInt32@,System.IntPtr@,System.IntPtr@,System.UInt32@)"/>.</para>
            </description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_MAINTENANCE"/></term>
            <description>
            <para>Group: access</para>
            <para>The client performs vendor-defined control operations on a biometric unit by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioControlUnitPrivileged(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32@)"/>.</para>
            </description>
            </item>
            </list>
            </param>
            <param name="UnitArray">Pointer to an array of biometric unit identifiers to be included in the session. You can call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumBiometricUnits(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA[]@,System.IntPtr@)"/> to enumerate the biometric units. Set this value to NULL if the <paramref name="PoolType"/> parameter is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_SYSTEM"/>.</param>
            <param name="UnitCount">A value that specifies the number of elements in the array pointed to by the <paramref name="UnitArray"/> parameter. Set this value to zero if the <paramref name="PoolType"/> parameter is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_SYSTEM"/>.</param>
            <param name="DatabaseId">
            <para>A value that specifies the database(s) to be used by the session. If the <paramref name="PoolType"/> parameter is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_PRIVATE"/>, you must specify the GUID of an installed database. If the <paramref name="PoolType"/> parameter is not <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_PRIVATE"/>, you can specify one of the following common values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="P:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DB_DEFAULT"/></term>
            <description>Each biometric unit in the sensor pool uses the default database specified in the default biometric unit configuration. You must specify this value if the <paramref name="PoolType"/> parameter is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_SYSTEM"/>. You cannot use this value if the <paramref name="PoolType"/> parameter is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_PRIVATE"/></description>
            </item>
            <item>
            <term><see cref="P:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DB_BOOTSTRAP"/></term>
            <description>You can specify this value to be used for scenarios prior to starting Windows. Typically, the database is part of the sensor chip or is part of the BIOS and can only be used for template enrollment and deletion.</description>
            </item>
            <item>
            <term><see cref="P:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DB_ONCHIP"/></term>
            <description>The database is on the sensor chip and is available for enrollment and matching.</description>
            </item>
            </list>
            </param>
            <param name="NotificationMethod">
            <para>Specifies how completion notifications for asynchronous operations in this biometric session are to be delivered to the client application. This must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="!:WINBIO_ASYNC_NOTIFY_CALLBACK"/></term>
            <description>The session invokes the callback function defined by the application.</description>
            </item>
            <item>
            <term><see cref="!:WINBIO_ASYNC_NOTIFY_MESSAGE"/></term>
            <description>The session posts a window message to the application's message queue.</description>
            </item>
            </list>
            </param>
            <param name="TargetWindow">Handle of the window that will receive the completion notices. This value is ignored unless the <paramref name="NotificationMethod"/> parameter is set to <see cref="!:WINBIO_ASYNC_NOTIFY_MESSAGE"/>.</param>
            <param name="MessageCode">
            <para>Window message code the framework must send to signify completion notices. This value is ignored unless the <paramref name="NotificationMethod"/> parameter is set to <see cref="!:WINBIO_ASYNC_NOTIFY_MESSAGE"/>. The value must be within the range <see cref="!:WM_APP"/>(0x8000) to 0xBFFF.</para>
            <para>The Windows Biometric Framework sets the LPARAM value of the message to the address of the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure that contains the results of the operation. You must call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioFree(System.IntPtr)"/> to release the structure after you have finished using it.</para>
            </param>
            <param name="CallbackRoutine">
            <para>Address of callback routine to be invoked when the operation started by using the session handle completes. This value is ignored unless the <paramref name="NotificationMethod"/> parameter is set to <see cref="!:WINBIO_ASYNC_NOTIFY_CALLBACK"/>.</para>
            </param>
            <param name="UserData">Address of a buffer supplied by the caller. The buffer is not modified by the framework or the biometric unit. It is returned in the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure. Your application can use the data to help it determine what actions to perform upon receipt of the completion notice or to maintain additional information about the requested operation.</param>
            <param name="AsynchronousOpen">
            <para>Specifies whether to block until the framework session has been opened. Specifying FALSE causes the process to block. Specifying TRUE causes the session to be opened asynchronously.</para>
            <para>If you specify FALSE to open the framework session synchronously, success or failure is returned to the caller directly by this function in the HRESULT return value. If the session is opened successfully, the first asynchronous completion event your application receives will be for an asynchronous operation requested after the framework has been open.</para>
            <para>If you specify TRUE to open the framework session asynchronously, the first asynchronous completion notice received will be for opening the framework. If the <paramref name="NotificationMethod"/> parameter is set to <see cref="!:WINBIO_ASYNC_NOTIFY_CALLBACK"/>, operation results are delivered to the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure in the callback function specified by the <paramref name="CallbackRoutine"/> parameter. If the <paramref name="NotificationMethod"/> parameter is set to <see cref="!:WINBIO_ASYNC_NOTIFY_MESSAGE"/>, operation results are delivered to the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure pointed to by the LPARAM field of the window message.</para>
            </param>
            <param name="SessionHandle">
            <para>If the function does not succeed, this parameter will be NULL.</para>
            <para>If the session is opened synchronously and successfully, this parameter will contain a pointer to the session handle.</para>
            <para>If you specify that the session be opened asynchronously, this method returns immediately, the session handle will be NULL, and you must examine the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure to determine whether the session was successfully opened.</para>
            </param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_OUTOFMEMORY"/></term>
            <description>There is not enough memory available to create the biometric session.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>If you set the notification method to WINBIO_ASYNC_NOTIFY_MESSAGE, the <paramref name="TargetWindow"/> parameter cannot be NULL or HWND_BROADCAST and the <paramref name="MessageCode"/> parameter cannot be zero (0).</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description><para>The <paramref name="SessionHandle"/> parameter and the <paramref name="AsynchronousOpen"/> parameter must be set.</para>
            <para>If you set the notification method to <see cref="!:WINBIO_ASYNC_NOTIFY_CALLBACK"/>, you must also specify the address of a callback function in the <paramref name="CallbackRoutine"/> parameter.</para></description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_ACCESSDENIED"/></term>
            <description>The <paramref name="Flags"/> parameter contains the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_RAW"/> or the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_MAINTENANCE"/> flag and the caller has not been granted either access permission.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_UNIT"/></term>
            <description>One or more of the biometric unit numbers specified in the <paramref name="UnitArray"/> parameter is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_NOT_ACTIVE_CONSOLE"/></term>
            <description>The client application is running on a remote desktop client and is attempting to open a system pool session.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_SENSOR_UNAVAILABLE"/></term>
            <description>The <paramref name="PoolType"/> parameter is set to <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_PRIVATE"/> and one or more of the requested sensors in that pool is not available.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DISABLED"/></term>
            <description>Current administrative policy prohibits use of the Windows Biometric Framework API.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioCancel(System.UInt32)">
            <summary>
            Cancels all pending biometric operations for a specified session.
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioCaptureSample(System.UInt32,System.Byte,System.Byte,System.UInt32@,System.IntPtr@,System.IntPtr@,System.UInt32@)">
            <summary>
            Captures a biometric sample and fills a biometric information record (BIR) with the raw or processed data.
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="Purpose">
            <para>A <see cref="T:System.Byte"/> bitmask that specifies the intended use of the sample. This can be a bitwise OR of the following values:</para>
            <list type="bullet">
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PURPOSE_VERIFY"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PURPOSE_IDENTIFY"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PURPOSE_ENROLL"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PURPOSE_ENROLL_FOR_VERIFICATION"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PURPOSE_ENROLL_FOR_IDENTIFICATION"/></description>
            </item>
            </list>
            </param>
            <param name="Flags">
            <para>A value that specifies the type of processing to be applied to the captured sample. This can be a bitwise OR of the following security and processing level flags:</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_PRIVACY"/> (Encrypt the sample.)</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_INTEGRITY"/> (Sign the sample or protect it by using a message authentication code (MAC).)</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_SIGNED"/> (If this flag and the WINBIO_DATA_FLAG_INTEGRITY flag are set, sign the sample. If this flag is not set but the WINBIO_DATA_FLAG_INTEGRITY flag is set, compute a MAC.)</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_RAW"/> (Return the sample exactly as it was captured by the sensor.)</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_INTERMEDIATE"/> (Return the sample after it has been cleaned and filtered.)</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_PROCESSED"/> (Return the sample after it is ready to be used for the purpose specified by the Purpose parameter.)</para>
            </param>
            <param name="UnitId">A pointer to a <see cref="T:System.UInt32"/> value that contains the ID of the biometric unit that generated the sample.</param>
            <param name="Sample">Address of a variable that receives a pointer to a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR"/> structure that contains the sample. When you have finished using the structure, you must pass the pointer to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioFree(System.IntPtr)"/> to release the memory allocated for the sample.</param>
            <param name="SampleSize">A pointer to a SIZE_T value that contains the size, in bytes, of the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR"/> structure returned in the Sample parameter.</param>
            <param name="RejectDetail">
            <para>A pointer to a <see cref="T:System.UInt32"/> value that contains additional information about the failure to capture a biometric sample. If the capture succeeded, this parameter is set to zero. The following values are defined for fingerprint capture:</para>
            <list type="bullet">
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_HIGH"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_LOW"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_LEFT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_RIGHT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_FAST"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SLOW"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_POOR_QUALITY"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SKEWED"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SHORT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_MERGE_FAILURE"/></description>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_ACCESSDENIED"/></term>
            <description>The caller does not have permission to capture raw samples, or the session was not opened by using the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_RAW"/> flag.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="!:E_NOTIMPL"/></term>
            <description>The biometric unit does not support the requested operation.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The <paramref name="UnitId"/>, <paramref name="Sample"/>, <paramref name="SampleSize"/>, and <paramref name="RejectDetail"/> pointers cannot be NULL.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_ENROLLMENT_IN_PROGRESS"/></term>
            <description>The operation could not be completed because the biometric unit is currently being used for an enrollment transaction (system pool only).</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioCaptureSampleWithCallback(System.UInt32,System.Byte,System.Byte,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_CALLBACK,System.IntPtr)">
            <summary>
            <para>Captures a biometric sample asynchronously and returns the raw or processed data in a biometric information record (BIR). The function returns immediately to the caller, captures the sample on a separate thread, and calls into an application-defined callback function to update operation status.</para>
            <para>Important  We recommend that, beginning with Windows 8, you no longer use this function to start an asynchronous operation. Instead, do the following:</para>
            <list type="bullet">
            <item>
            <description>Implement a <see cref="!:PWINBIO_ASYNC_COMPLETION_CALLBACK"/> function to receive notice when the operation completes.</description>
            </item>
            <item>
            <description>Call the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/> function. Pass the address of your callback in the <paramref name="CallbackRoutine"/> parameter. Pass <see cref="!:WINBIO_ASYNC_NOTIFY_CALLBACK"/> in the <paramref name="NotificationMethod"/> parameter. Retrieve an asynchronous session handle.</description>
            </item>
            <item>
            <description>Use the asynchronous session handle to call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioCaptureSample(System.UInt32,System.Byte,System.Byte,System.UInt32@,System.IntPtr@,System.IntPtr@,System.UInt32@)"/>. When the operation finishes, the Windows Biometric Framework will allocate and initialize a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure with the results and invoke your callback with a pointer to the results structure.</description>
            </item>
            <item>
            <description>Call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioFree(System.IntPtr)"/> from your callback implementation to release the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure after you have finished using it.</description>
            </item>
            </list>
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session.</param>
            <param name="Purpose">
            <para>A <see cref="T:System.Byte"/> bitmask that specifies the intended use of the sample. This can be a bitwise OR of the following values:</para>
            <list type="bullet">
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PURPOSE_VERIFY"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PURPOSE_IDENTIFY"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PURPOSE_ENROLL"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PURPOSE_ENROLL_FOR_VERIFICATION"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PURPOSE_ENROLL_FOR_IDENTIFICATION"/></description>
            </item>
            </list>
            </param>
            <param name="Flags">
            <para>A value that specifies the type of processing to be applied to the captured sample. This can be a bitwise OR of the following security and processing level flags:</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_PRIVACY"/> (Encrypt the sample.)</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_INTEGRITY"/> (Sign the sample or protect it by using a message authentication code (MAC).)</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_SIGNED"/> (If this flag and the WINBIO_DATA_FLAG_INTEGRITY flag are set, sign the sample. If this flag is not set but the WINBIO_DATA_FLAG_INTEGRITY flag is set, compute a MAC.)</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_RAW"/> (Return the sample exactly as it was captured by the sensor.)</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_INTERMEDIATE"/> (Return the sample after it has been cleaned and filtered.)</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_PROCESSED"/> (Return the sample after it is ready to be used for the purpose specified by the Purpose parameter.)</para>
            </param>
            <param name="CaptureCallback">Address of a callback function that will be called by the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioCaptureSampleWithCallback(System.UInt32,System.Byte,System.Byte,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_CALLBACK,System.IntPtr)"/> function when the capture operation succeeds or fails. You must create the callback.</param>
            <param name="CaptureCallbackContext">Address of an application-defined data structure that is passed to the callback function in its <paramref name="CaptureCallbackContext"/> parameter. This structure can contain any data that the custom callback function is designed to handle.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_ACCESSDENIED"/></term>
            <description>The caller does not have permission to capture raw samples, or the session was not opened by using the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_RAW"/> flag.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="!:E_NOTIMPL"/></term>
            <description>The biometric unit does not support the requested operation.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The <paramref name="UnitId"/>, <paramref name="Sample"/>, <paramref name="SampleSize"/>, and <paramref name="RejectDetail"/> pointers cannot be NULL.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_ENROLLMENT_IN_PROGRESS"/></term>
            <description>The operation could not be completed because the biometric unit is currently being used for an enrollment transaction (system pool only).</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioCloseFramework(System.UInt32)">
            <summary>
            Closes a framework handle previously opened with <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenFramework(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.
            </summary>
            <param name="FrameworkHandle">Handle to the framework session that will be closed.</param>
            <returns>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error.</returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioCloseSession(System.UInt32)">
            <summary>
            Closes a biometric session and releases associated resources.
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioControlUnit(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32@)">
            <summary>
            Allows the caller to perform vendor-defined control operations on a biometric unit. This function is provided for access to extended vendor operations for which elevated privileges are not required. If access rights are required, call the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioControlUnitPrivileged(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32@)"/> function.
            </summary>
            <param name="SessionHandle">A WINBIO_SESSION_HANDLE value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="UnitId">A <see cref="T:System.UInt32"/> value that identifies the biometric unit. This value must correspond to the unit ID used previously in the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioLockUnit(System.UInt32,System.UInt32)"/> function.</param>
            <param name="Component">
            <para>A WINBIO_COMPONENT value that specifies the component within the biometric unit that should perform the operation. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_COMPONENT_SENSOR"/></term>
            <description>Send the command to the sensor adapter.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_COMPONENT_ENGINE"/></term>
            <description>Send the command to the engine adapter.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_COMPONENT_STORAGE"/></term>
            <description>Send the command to the storage adapter.</description>
            </item>
            </list>
            </param>
            <param name="ControlCode">A vendor-defined code recognized by the biometric unit specified by the <paramref name="UnitId"/> parameter and the adapter specified by the <paramref name="Component"/> parameter.</param>
            <param name="SendBuffer">Address of the buffer that contains the control information to be sent to the adapter specified by the <paramref name="Component"/> parameter. The format and content of the buffer is vendor-defined.</param>
            <param name="SendBufferSize">Size, in bytes, of the buffer specified by the <paramref name="SendBuffer"/> parameter.</param>
            <param name="ReceiveBuffer">Address of the buffer that receives information sent by the adapter specified by the <paramref name="Component"/> parameter. The format and content of the buffer is vendor-defined.</param>
            <param name="ReceiveBufferSize">Size, in bytes, of the buffer specified by the <paramref name="ReceiveBuffer"/> parameter.</param>
            <param name="ReceiveDataSize">Pointer to a SIZE_T value that contains the size, in bytes, of the data written to the buffer specified by the <paramref name="ReceiveBuffer"/> parameter.</param>
            <param name="OperationStatus">Pointer to an integer that contains a vendor-defined status code that specifies the outcome of the control operation.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The value specified in the <paramref name="ControlCode"/> parameter is not recognized.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The <paramref name="SendBuffer"/>, <paramref name="ReceiveBuffer"/>, <paramref name="ReceiveDataSize"/>, <paramref name="OperationStatus"/> parameters cannot be NULL.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_CONTROL_CODE"/></term>
            <description>The value specified in the <paramref name="ControlCode"/> parameter is not recognized.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_LOCK_VIOLATION"/></term>
            <description>The biometric unit specified by the <paramref name="UnitId"/> parameter must be locked before any control operations can be performed.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioControlUnitPrivileged(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32@)">
            <summary>
            Allows the caller to perform privileged vendor-defined control operations on a biometric unit. The client must call this function to perform extended vendor operations that require elevated access rights. If no privileges are required, the client can call the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioControlUnit(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32@)"/> function.
            </summary>
            <param name="SessionHandle">A WINBIO_SESSION_HANDLE value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="UnitId">A <see cref="T:System.UInt32"/> value that identifies the biometric unit. This value must correspond to the unit ID used previously in the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioLockUnit(System.UInt32,System.UInt32)"/> function.</param>
            <param name="Component">
            <para>A WINBIO_COMPONENT value that specifies the component within the biometric unit that should perform the operation. This can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_COMPONENT_SENSOR"/></term>
            <description>Send the command to the sensor adapter.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_COMPONENT_ENGINE"/></term>
            <description>Send the command to the engine adapter.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_COMPONENT_STORAGE"/></term>
            <description>Send the command to the storage adapter.</description>
            </item>
            </list>
            </param>
            <param name="ControlCode">A vendor-defined code recognized by the biometric unit specified by the <paramref name="UnitId"/> parameter and the adapter specified by the <paramref name="Component"/> parameter.</param>
            <param name="SendBuffer">Address of the buffer that contains the control information to be sent to the adapter specified by the <paramref name="Component"/> parameter. The format and content of the buffer is vendor-defined.</param>
            <param name="SendBufferSize">Size, in bytes, of the buffer specified by the <paramref name="SendBuffer"/> parameter.</param>
            <param name="ReceiveBuffer">Address of the buffer that receives information sent by the adapter specified by the <paramref name="Component"/> parameter. The format and content of the buffer is vendor-defined.</param>
            <param name="ReceiveBufferSize">Size, in bytes, of the buffer specified by the <paramref name="ReceiveBuffer"/> parameter.</param>
            <param name="ReceiveDataSize">Pointer to a SIZE_T value that contains the size, in bytes, of the data written to the buffer specified by the <paramref name="ReceiveBuffer"/> parameter.</param>
            <param name="OperationStatus">Pointer to an integer that contains a vendor-defined status code that specifies the outcome of the control operation.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The value specified in the <paramref name="ControlCode"/> parameter is not recognized.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The <paramref name="SendBuffer"/>, <paramref name="ReceiveBuffer"/>, <paramref name="ReceiveDataSize"/>, <paramref name="OperationStatus"/> parameters cannot be NULL.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_ACCESSDENIED"/></term>
            <description>The caller does not have permission to perform the operation, or the session was not opened by using <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_MAINTENANCE"/>.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The value specified in the <paramref name="ControlCode"/> parameter is not recognized.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_LOCK_VIOLATION"/></term>
            <description>The biometric unit specified by the <paramref name="UnitId"/> parameter must be locked before any control operations can be performed.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioDeleteTemplate(System.UInt32,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY*,System.Byte)">
            <summary>
            Deletes a biometric template from the template store.
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="UnitId">A <see cref="T:System.UInt32"/> value that identifies the biometric unit where the template is located.</param>
            <param name="Identity">Pointer to a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY"/> structure that contains the GUID or SID of the template to be deleted. If the Type member of the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY"/> structure is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ID_TYPE_WILDCARD"/>, templates matching the <paramref name="SubFactor"/> parameter will be deleted for all identities. Only administrators can perform wildcard identity deletion.</param>
            <param name="SubFactor">A <see cref="T:System.Byte"/> value that provides additional information about the template to be deleted. If you specify <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SUBTYPE_ANY"/>, all templates for the biometric unit specified by the <paramref name="UnitId"/> parameter are deleted.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The <paramref name="UnitId"/> parameter contains zero or the SubFactor contains <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SUBTYPE_NO_INFORMATION"/>.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The pointer specified in the <paramref name="Identity"/> parameter cannot be NULL.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_ENROLLMENT_IN_PROGRESS"/></term>
            <description>The operation could not be completed because the biometric unit is currently being used for an enrollment transaction.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollCaptureWithCallback(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ENROLL_CAPTURE_CALLBACK,System.IntPtr)">
            <summary>
            <para>Asynchronously captures a biometric sample and adds it to a template. The function returns immediately to the caller, performs enrollment on a separate thread, and calls into an application-defined callback function to update operation status.</para>
            <para>Important  We recommend that, beginning with Windows 8, you no longer use this function to start an asynchronous operation. Instead, do the following:</para>
            <list type="bullet">
            <item>
            <description>Implement a <see cref="!:PWINBIO_ASYNC_COMPLETION_CALLBACK"/> function to receive notice when the operation completes.</description>
            </item>
            <item>
            <description>Call the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/> function. Pass the address of your callback in the CallbackRoutine parameter. Pass <see cref="!:WINBIO_ASYNC_NOTIFY_CALLBACK"/> in the NotificationMethod parameter. Retrieve an asynchronous session handle.</description>
            </item>
            <item>
            <description>Use the asynchronous session handle to call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollCapture(System.UInt32,System.UInt32@)"/>. When the operation finishes, the Windows Biometric Framework will allocate and initialize a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure with the results and invoke your callback with a pointer to the results structure.</description>
            </item>
            <item>
            <description>Call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioFree(System.IntPtr)"/> from your callback implementation to release the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure after you have finished using it.</description>
            </item>
            </list>
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session.</param>
            <param name="EnrollCallback">Address of a callback function that will be called by the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollCaptureWithCallback(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ENROLL_CAPTURE_CALLBACK,System.IntPtr)"/> function when the capture operation succeeds or fails. You must create the callback.</param>
            <param name="EnrollCallbackContext">Pointer to an optional application-defined structure that is passed to the <paramref name="EnrollCallbackContext"/> parameter of the callback function. This structure can contain any data that the custom callback function is designed to handle.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_ACCESSDENIED"/></term>
            <description>The calling account is not allowed to perform enrollment.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The pointer specified by the <paramref name="EnrollCallback"/> parameter cannot be NULL.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollBegin(System.UInt32,System.Byte,System.UInt32)">
            <summary>
            Initiates a biometric enrollment sequence and creates an empty biometric template.
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="SubFactor">
            <para>A <see cref="T:System.Byte"/> value that provides additional information about the enrollment. This must be one of the following values:</para>
            <list type="bullet">
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_THUMB"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_INDEX_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_MIDDLE_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_RING_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_LITTLE_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_THUMB"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_INDEX_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_MIDDLE_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_RING_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_LITTLE_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_FOUR_FINGERS"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_FOUR_FINGERS"/></description>
            </item>
            </list>
            </param>
            <param name="UnitId">A <see cref="T:System.UInt32"/> value that identifies the biometric unit. This value cannot be zero. You can find a unit ID by calling the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumBiometricUnits(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA[]@,System.IntPtr@)"/> or <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioLocateSensor(System.UInt32,System.UInt32@)"/> functions.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_ACCESSDENIED"/></term>
            <description>The caller does not have permission to enroll.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The SubFactor parameter cannot equal <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SUBTYPE_NO_INFORMATION"/> or <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SUBTYPE_ANY"/>, and the <paramref name="UnitId"/> parameter cannot equal zero.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_ENROLLMENT_IN_PROGRESS"/></term>
            <description>An enrollment operation is already in progress, and only one enrollment can occur at a given time.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_LOCK_VIOLATION"/></term>
            <description>The biometric unit is in use and is locked.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollCapture(System.UInt32,System.UInt32@)">
            <summary>
            Captures a biometric sample and adds it to a template.
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="RejectDetail">
            <para>A pointer to a ULONG value that contains additional information the failure to capture a biometric sample. If the capture succeeded, this parameter is set to zero. The following values are defined for fingerprint capture:</para>
            <list type="bullet">
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_HIGH"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_LOW"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_LEFT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_RIGHT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_FAST"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SLOW"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_POOR_QUALITY"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SKEWED"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SHORT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_MERGE_FAILURE"/></description>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_ACCESSDENIED"/></term>
            <description>The calling account is not allowed to perform enrollment.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The pointer specified by the <paramref name="RejectDetail"/> parameter cannot be NULL.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_BAD_CAPTURE"/></term>
            <description>The sample could not be captured. Use the <paramref name="RejectDetail"/> value for more information.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_LOCK_VIOLATION"/></term>
            <description>The biometric unit is in use and is locked.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_I_MORE_DATA"/></term>
            <description>The matching engine requires one or more additional samples to generate a reliable template. You should update instructions to the user to submit more samples and call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollCapture(System.UInt32,System.UInt32@)"/> again.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollCommit(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.Boolean@)">
            <summary>
            Finalizes a pending biometric template and saves it to the database associated with the biometric unit used for enrollment.
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="Identity">Pointer to a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY"/> structure that receives the identifier (GUID or SID) of the template.</param>
            <param name="IsNewTemplate">Pointer to a Boolean value that specifies whether the template being added to the database is new.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The pointers specified by the <paramref name="Identity"/> and <paramref name="IsNewTemplate"/> parameters cannot be NULL.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATABASE_FULL"/></term>
            <description>There is no space available in the database for the template.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DUPLICATE_TEMPLATE"/></term>
            <description>The template matches one already saved in the database with a different identity or sub-factor (system pool only).</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_LOCK_VIOLATION"/></term>
            <description>The biometric unit is in use and is locked.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollDiscard(System.UInt32)">
            <summary>
            Ends the enrollment sequence and discards a pending biometric template.
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_ACCESSDENIED"/></term>
            <description>The caller does not have permission to enroll.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_LOCK_VIOLATION"/></term>
            <description>The biometric unit is in use and is locked.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollSelect(System.UInt32,System.UInt64)">
             <summary>
             Specifies the individual that you want to enroll when data that represents multiple individuals is present in the sample buffer. Starting with Windows 10, build 1607, this function is available to use with a mobile image.
             </summary>
             <param name="SessionHandle">
            <para>A <see cref="T:System.UInt32"/> value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</para>
            <para>For enrollment in facial recognition, use <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/> with the PoolType parameter set to <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_SYSTEM"/> to get the handle.</para>
             </param>
             <param name="SelectorValue">A value that identifies that individual that you want to select for enrollment.</param>
             <returns>If the function succeeds, it returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumBiometricUnits(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA[]@,System.IntPtr@)">
            <summary>
            Enumerates all attached biometric units that match the input type.
            </summary>
            <param name="Factor">A bitmask of <see cref="T:System.UInt32"/> flags that specifies the biometric unit types to be enumerated. Only <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_FINGERPRINT"/> is currently supported.</param>
            <param name="UnitSchemaArray">Address of a variable that receives a pointer to an array of <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA"/> structures that contain information about each enumerated biometric unit. If the function does not succeed, the pointer is set to NULL. If the function succeeds, you must pass the pointer to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioFree(System.IntPtr)"/> to release memory allocated internally for the array.</param>
            <param name="UnitCount">Pointer to a value that specifies the number of structures pointed to by the <paramref name="UnitSchemaArray"/> parameter.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The bitmask contained in the <paramref name="Factor"/> parameter contains one or more an invalid type bits.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_OUTOFMEMORY"/></term>
            <description>There was insufficient memory to complete the request.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The <paramref name="UnitSchemaArray"/> and <paramref name="UnitCount"/> parameters cannot be NULL.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DISABLED"/></term>
            <description>Current administrative policy prohibits use of the Windows Biometric Framework API.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumDatabases(System.UInt32,System.IntPtr@,System.IntPtr@)">
            <summary>
            Enumerates all registered databases that match a specified type.
            </summary>
            <param name="Factor">A bitmask of <see cref="T:System.UInt32"/> flags that specifies the biometric unit types to be enumerated. Only <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_FINGERPRINT"/> is currently supported.</param>
            <param name="StorageSchemaArray">Address of a variable that receives a pointer to an array of <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_STORAGE_SCHEMA"/> structures that contain information about each database. If the function does not succeed, the pointer is set to NULL. If the function succeeds, you must pass the pointer to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioFree(System.IntPtr)"/> to release memory allocated internally for the array.</param>
            <param name="StorageCount">Pointer to a value that specifies the number of structures pointed to by the <paramref name="StorageSchemaArray"/> parameter.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The bitmask contained in the Factor parameter contains one or more an invalid type bits.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_OUTOFMEMORY"/></term>
            <description>There was insufficient memory to complete the request.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The <paramref name="StorageSchemaArray"/> and <paramref name="StorageCount"/> parameters cannot be NULL.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumEnrollments(System.UInt32,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.IntPtr@,System.IntPtr@)">
            <summary>
            Retrieves the biometric sub-factors enrolled for a specified identity and biometric unit.
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="UnitId">A <see cref="T:System.UInt32"/> value that specifies the biometric unit.</param>
            <param name="Identity">Pointer to a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY"/> structure that contains the GUID or SID of the template from which the sub-factors are to be retrieved.</param>
            <param name="SubFactorArray">Address of a variable that receives a pointer to an array of sub-factors. If the function does not succeed, the pointer is set to NULL. If the function succeeds, you must pass the pointer to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioFree(System.IntPtr)"/> to release memory allocated internally for the array.</param>
            <param name="SubFactorCount">Pointer to a value that specifies the number of elements in the array pointed to by the <paramref name="SubFactorArray"/> parameter. If the function does not succeed, this value is set to zero.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The <paramref name="UnitId"/> parameter cannot be zero.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The <paramref name="Identity"/>, <paramref name="SubFactorArray"/>, and <paramref name="SubFactorCount"/> parameters cannot be NULL.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_ENROLLMENT_IN_PROGRESS"/></term>
            <description>The operation could not be completed because the biometric unit specified by the <paramref name="UnitId"/> parameter is currently being used for an enrollment transaction.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_UNKNOWN_ID"/></term>
            <description>The GUID or SID specified by the Identity parameter cannot be found.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumServiceProviders(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BSP_SCHEMA[]@,System.IntPtr@)">
            <summary>
            Retrieves information about installed biometric service providers.
            </summary>
            <param name="Factor">A bitmask of <see cref="T:System.UInt32"/> flags that specifies the biometric unit types to be enumerated. Only <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_FINGERPRINT"/> is currently supported.</param>
            <param name="BspSchemaArray">Address of a variable that receives a pointer to an array of <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BSP_SCHEMA"/> structures that contain information about each of the available service providers. If the function does not succeed, the pointer is set to NULL. If the function succeeds, you must pass the pointer to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioFree(System.IntPtr)"/> to release memory allocated internally for the array.</param>
            <param name="BspCount">Pointer to a value that specifies the number of structures pointed to by the <paramref name="BspSchemaArray"/> parameter.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The bitmask contained in the Factor parameter contains one or more an invalid type bits.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_OUTOFMEMORY"/></term>
            <description>There was insufficient memory to complete the request.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The <paramref name="BspSchemaArray"/> and <paramref name="BspCount"/> parameters cannot be NULL.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioFree(System.IntPtr)">
            <summary>
            Releases memory allocated for the client application by an earlier call to a Windows Biometric Framework API function.
            </summary>
            <param name="Address">Address of the memory block to delete.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The <paramref name="Address"/> parameter cannot be NULL.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioGetCredentialState(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_TYPE,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_STATE@)">
            <summary>
            Retrieves a value that specifies whether credentials have been set for the specified user.
            </summary>
            <param name="Identity">A <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY"/> structure that contains the SID of the user account for which the credential is being queried.</param>
            <param name="Type">
            <para>A <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_TYPE"/> value that specifies the credential type. This can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="!:WINBIO_CREDENTIAL_PASSWORD"/></term>
            <description>The password-based credential is checked.</description>
            </item>
            </list>
            </param>
            <param name="CredentialState">
            <para>Pointer to a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_STATE"/> enumeration value that specifies whether user credentials have been set. This can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="!:WINBIO_CREDENTIAL_NOT_SET"/></term>
            <description>A credential has not been specified.</description>
            </item>
            <item>
            <term><see cref="!:WINBIO_CREDENTIAL_SET"/></term>
            <description>A credential has been specified.</description>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_ACCESSDENIED"/></term>
            <description>The caller does not have permission to retrieve the credential state.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_UNKNOWN_ID"/></term>
            <description>The specified identity does not exist.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_CRED_PROV_DISABLED"/></term>
            <description>Current administrative policy prohibits use of the credential provider.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioIdentify(System.UInt32,System.UInt32@,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.Byte@,System.UInt32@)">
            <summary>
            Captures a biometric sample and determines whether it matches an existing biometric template.
            </summary>
            <param name="SessionHandle [in][in]">A <see cref="T:System.UInt32"/> value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="UnitId [out, optional][out,optional]">A pointer to a ULONG value that specifies the biometric unit used to perform the identification.</param>
            <param name="Identity [out, optional][out,optional]">Pointer to a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY"/> structure that receives the GUID or SID of the user providing the biometric sample.</param>
            <param name="SubFactor [out, optional][out,optional]">Pointer to a <see cref="T:System.Byte"/> value that receives the sub-factor associated with the biometric sample. See the Remarks section for more details.</param>
            <param name="RejectDetail">
            <para>A pointer to a <see cref="T:System.UInt32"/> value that contains additional information about the failure to capture a biometric sample. If the capture succeeded, this parameter is set to zero. The following values are defined for fingerprint capture:</para>
            <list type="bullet">
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_HIGH"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_LOW"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_LEFT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_RIGHT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_FAST"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SLOW"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_POOR_QUALITY"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SKEWED"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SHORT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_MERGE_FAILURE"/></description>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The pointer specified by the <paramref name="UnitId"/>, <paramref name="Identity"/>, <paramref name="SubFactor"/>, or <paramref name="RejectDetail"/> parameters cannot be NULL.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_BAD_CAPTURE"/></term>
            <description>The sample could not be captured. Use the <paramref name="RejectDetail"/> value for more information.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_ENROLLMENT_IN_PROGRESS"/></term>
            <description>The operation could not be completed because the biometric unit is currently being used for an enrollment transaction (system pool only).</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_UNKNOWN_ID"/></term>
            <description>The biometric sample does not match any saved in the database.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioIdentifyWithCallback(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTIFY_CALLBACK,System.IntPtr)">
            <summary>
            <para>Asynchronously captures a biometric sample and determines whether it matches an existing biometric template. The function returns immediately to the caller, performs capture and identification on a separate thread, and calls into an application-defined callback function to update operation status.</para>
            <para>Important  We recommend that, beginning with Windows 8, you no longer use this function to start an asynchronous operation. Instead, do the following:</para>
            <list type="bullet">
            <item>
            <description>Implement a <see cref="!:PWINBIO_ASYNC_COMPLETION_CALLBACK"/> function to receive notice when the operation completes.</description>
            </item>
            <item>
            <description>Call the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/> function. Pass the address of your callback in the CallbackRoutine parameter. Pass <see cref="!:WINBIO_ASYNC_NOTIFY_CALLBACK"/> in the NotificationMethod parameter. Retrieve an asynchronous session handle.</description>
            </item>
            <item>
            <description>Use the asynchronous session handle to call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioIdentify(System.UInt32,System.UInt32@,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.Byte@,System.UInt32@)"/>. When the operation finishes, the Windows Biometric Framework will allocate and initialize a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure with the results and invoke your callback with a pointer to the results structure.</description>
            </item>
            <item>
            <description>Call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioFree(System.IntPtr)"/> from your callback implementation to release the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure after you have finished using it.</description>
            </item>
            </list>
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session.</param>
            <param name="IdentifyCallback">Address of a callback function that will be called by the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioIdentifyWithCallback(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTIFY_CALLBACK,System.IntPtr)"/> function when identification succeeds or fails. You must create the callback.</param>
            <param name="IdentifyCallbackContext">Pointer to an application-defined data structure that is passed to the callback function in its <see cref="!:IdentifyCallbackContext"/> parameter. This structure can contain any data that the custom callback function is designed to handle.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The SessionHandle and IdentifyCallback parameter</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioGetDomainLogonSetting(System.Boolean@,System.UInt32@)">
            <summary>
            Retrieves a value that specifies whether users can log on to a domain by using biometric information.
            </summary>
            <param name="Value">Pointer to a Boolean value that specifies whether biometric domain logons are enabled.</param>
            <param name="Source">
            <para>Pointer to a WINBIO_SETTING_SOURCE_TYPE value that specifies the setting source. This can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SETTING_SOURCE_INVALID"/></term>
            <description>The setting is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SETTING_SOURCE_DEFAULT"/></term>
            <description>The setting originated from built-in policy.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SETTING_SOURCE_LOCAL"/></term>
            <description>The setting originated in the local computer registry.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SETTING_SOURCE_POLICY"/></term>
            <description>The setting was created by Group Policy.</description>
            </item>
            </list>
            </param>
            <returns>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values.</returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioGetEnabledSetting(System.Boolean@,System.UInt32@)">
            <summary>
            Retrieves a value that specifies whether the Windows Biometric Framework is currently enabled.
            </summary>
            <param name="Value">Pointer to a Boolean value that specifies whether the Windows Biometric Framework is currently enabled.</param>
            <param name="Source">
            <para>Pointer to a WINBIO_SETTING_SOURCE_TYPE value that specifics the setting source. This can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SETTING_SOURCE_INVALID"/></term>
            <description>The setting is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SETTING_SOURCE_DEFAULT"/></term>
            <description>The setting originated from built-in policy.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SETTING_SOURCE_LOCAL"/></term>
            <description>The setting originated in the local computer registry.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SETTING_SOURCE_POLICY"/></term>
            <description>The setting was created by Group Policy.</description>
            </item>
            </list>
            </param>
            <returns>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values.</returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioGetEnrolledFactors(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY*,System.UInt32*)">
            <summary>
            Gets information about the biometric enrollments that the specified user has on the computer. Biometric enrollments include enrollments for facial recognition, fingerprint scanning, iris scanning, and so on.
            </summary>
            <param name="AccountOwner"></param>
            <param name="EnrolledFactors">
            <para>A set of <see cref="T:System.UInt32"/> flags that indicate the biometric enrollments that the specified user has on the computer. A value of 0 indicates that the user has no biometric enrollments.</para>
            <para>These enrollments represent system pool enrollments only, such as enrollments that you can use to authenticate a user for sign-in, unlock, and so on.This value does not include private pool enrollments.</para>
            <para>If you specify the wildcard identity type for the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY"/> structure that you use for the AccountOwner parameter, this set of flags represents the combined set of enrollments for all users with accounts on the computer.</para>
            </param>
            <returns>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values.</returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioGetLogonSetting(System.Boolean@,System.UInt32@)">
            <summary>
            Retrieves a value that indicates whether users can log on by using biometric information.
            </summary>
            <param name="Value">Pointer to a Boolean value that specifies whether biometric logons are enabled.</param>
            <param name="Source">
            <para>Pointer to a WINBIO_SETTING_SOURCE_TYPE value that specifics the setting source. This can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SETTING_SOURCE_INVALID"/></term>
            <description>The setting is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SETTING_SOURCE_DEFAULT"/></term>
            <description>The setting originated from built-in policy.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SETTING_SOURCE_LOCAL"/></term>
            <description>The setting originated in the local computer registry.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SETTING_SOURCE_POLICY"/></term>
            <description>The setting was created by Group Policy.</description>
            </item>
            </list>
            </param>
            <returns>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values.</returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioGetProperty(System.UInt32,System.UInt32,System.UInt32,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY*,System.Byte,System.IntPtr@,System.IntPtr@)">
            <summary>
            Retrieves a session, unit, or template property.
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="PropertyType">A <see cref="T:System.UInt32"/> value that specifies the source of the property information. Currently this must be <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_TYPE_UNIT"/>.</param>
            <param name="PropertyId">A <see cref="T:System.UInt32"/> value that specifies the property to be queried. Currently this must be <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_SAMPLE_HINT"/>.</param>
            <param name="UnitId">A <see cref="T:System.UInt32"/> value that identifies the biometric unit. This value cannot be zero. You can find a unit ID by calling the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumBiometricUnits(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA[]@,System.IntPtr@)"/> or <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioLocateSensor(System.UInt32,System.UInt32@)"/> functions.</param>
            <param name="Identity">Reserved. This must be NULL.</param>
            <param name="SubFactor">Reserved. This must be <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SUBTYPE_NO_INFORMATION"/>.</param>
            <param name="PropertyBuffer">Address of a pointer to a buffer that receives the property value.</param>
            <param name="PropertyBufferSize">Pointer to a variable that receives the size, in bytes, of the buffer pointed to by the <paramref name="PropertyBuffer"/> parameter.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle specified by the <paramref name="SessionHandle"/> parameter is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The <paramref name="Identity"/>, <paramref name="PropertyBuffer"/>, or <paramref name="PropertyBufferSize"/> arguments cannot be NULL.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The <paramref name="UnitId"/>, <paramref name="Identity"/>, or <paramref name="SubFactor"/> arguments are incorrect.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_PROPERTY_TYPE"/></term>
            <description>The value of the <paramref name="PropertyType"/> argument is incorrect.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_PROPERTY_ID"/></term>
            <description>The value of the <paramref name="PropertyId"/> argument is incorrect.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_LOCK_VIOLATION"/></term>
            <description>The caller attempted to query a property that resides inside of a locked region.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_UNSUPPORTED_PROPERTY"/></term>
            <description>The object being queried does not support the specified property.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_ENROLLMENT_IN_PROGRESS"/></term>
            <description>The operation could not be completed because the specified biometric unit is currently being used for an enrollment transaction (system pool only).</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioLocateSensor(System.UInt32,System.UInt32@)">
            <summary>
            Retrieves the ID number of a biometric unit selected interactively by a user.
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="UnitId">A pointer to a ULONG value that specifies the biometric unit.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The pointer specified by the UnitId parameter cannot be NULL.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_ENROLLMENT_IN_PROGRESS"/></term>
            <description>The operation could not be completed because the biometric unit is currently being used for an enrollment transaction (system pool only).</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioLocateSensorWithCallback(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_LOCATE_SENSOR_CALLBACK,System.IntPtr)">
            <summary>
            <para>Asynchronously retrieves the ID number of the biometric unit selected interactively by a user. The function returns immediately to the caller, processes on a separate thread, and reports the selected biometric unit by calling an application-defined callback function.</para>
            <para>Important  We recommend that, beginning with Windows 8, you no longer use this function to start an asynchronous operation. Instead, do the following:</para>
            <list type="bullet">
            <item>
            <description>Implement a <see cref="!:PWINBIO_ASYNC_COMPLETION_CALLBACK"/> function to receive notice when the operation completes.</description>
            </item>
            <item>
            <description>Call the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/> function. Pass the address of your callback in the CallbackRoutine parameter. Pass <see cref="!:WINBIO_ASYNC_NOTIFY_CALLBACK"/> in the NotificationMethod parameter. Retrieve an asynchronous session handle.</description>
            </item>
            <item>
            <description>Use the asynchronous session handle to call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioLocateSensor(System.UInt32,System.UInt32@)"/>. When the operation finishes, the Windows Biometric Framework will allocate and initialize a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure with the results and invoke your callback with a pointer to the results structure.</description>
            </item>
            <item>
            <description>Call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioFree(System.IntPtr)"/> from your callback implementation to release the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure after you have finished using it.</description>
            </item>
            </list>
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session.</param>
            <param name="LocateCallback">Address of a callback function that will be called by the WinBioLocateSensorWithCallback function when sensor location succeeds or fails. You must create the callback.</param>
            <param name="LocateCallbackContext">Address of an application-defined data structure that is passed to the callback function in its LocateCallbackContext parameter. This structure can contain any data that the custom callback function is designed to handle.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The address specified by the Locate</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioLockUnit(System.UInt32,System.UInt32)">
            <summary>
            Locks a biometric unit for exclusive use by a single session.
            </summary>
            <param name="SessionHandle">A WINBIO_SESSION_HANDLE value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="UnitId">A WINBIO_UNIT_ID value that specifies the biometric unit to be locked.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The <paramref name="UnitId"/> parameter cannot contain zero.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_ENROLLMENT_IN_PROGRESS"/></term>
            <description>The operation could not be completed because the specified biometric unit is currently being used for an enrollment transaction (system pool only).</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_LOCK_VIOLATION"/></term>
            <description>The biometric unit cannot be locked because the specified session already has another unit locked.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)">
            <summary>
            Connects to a biometric service provider and one or more biometric units.
            </summary>
            <param name="Factor">A bitmask of <para>WINBIO_BIOMETRIC_TYPE</para> flags that specifies the biometric unit types to be enumerated. Only <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_FINGERPRINT"/> is currently supported.</param>
            <param name="PoolType">
            <para>A ULONG value that specifies the type of the biometric units that will be used in the session. This can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_SYSTEM"/></term>
            <description>The session connects to a shared collection of biometric units managed by the service provider.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_PRIVATE"/></term>
            <description>The session connects to a collection of biometric units that are managed by the caller.</description>
            </item>
            </list>
            </param>
            <param name="Flags">
            <para>A ULONG value that specifies biometric unit configuration and access characteristics for the new session. Configuration flags specify the general configuration of units in the session. Access flags specify how the application will use the biometric units. You must specify one configuration flag but you can combine that flag with any access flag.</para>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_DEFAULT"/></term>
            <description><para>Group: configuration</para><para>The biometric units operate in the manner specified during installation. You must use this value when the <paramref name="PoolType"/> parameter is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_SYSTEM"/>.</para></description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_BASIC"/></term>
            <description><para>Group: configuration</para><para>The biometric units operate only as basic capture devices. All processing, matching, and storage operations is performed by software plug-ins.</para></description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_ADVANCED"/></term>
            <description><para>Group: configuration</para><para>The biometric units use internal processing and storage capabilities.</para></description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_RAW"/></term>
            <description><para>Group: access</para><para>The client application captures raw biometric data using <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioCaptureSample(System.UInt32,System.Byte,System.Byte,System.UInt32@,System.IntPtr@,System.IntPtr@,System.UInt32@)"/>.</para></description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_MAINTENANCE"/></term>
            <description><para>Group: access</para><para>The client performs vendor-defined control operations on a biometric unit by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioControlUnitPrivileged(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32@)"/>.</para></description>
            </item>
            </param>
            <param name="UnitArray">Pointer to an array of biometric unit identifiers to be included in the session. You can call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumBiometricUnits(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA[]@,System.IntPtr@)"/> to enumerate the biometric units. Set this value to NULL if the <paramref name="PoolType"/> parameter is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_SYSTEM"/>.</param>
            <param name="UnitCount">A value that specifies the number of elements in the array pointed to by the <paramref name="UnitArray"/> parameter. Set this value to zero if the <paramref name="PoolType"/> parameter is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_SYSTEM"/>.</param>
            <param name="DatabaseId">
            <para>A value that specifies the database(s) to be used by the session. If the <paramref name="PoolType"/> parameter is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_PRIVATE"/>, you must specify the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.GUID"/> of an installed database. If the <paramref name="PoolType"/> parameter is not <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_PRIVATE"/>, you can specify one of the following common values.</para>
            <item>
            <term><see cref="P:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DB_DEFAULT"/></term>
            <description>Each biometric unit in the sensor pool uses the default database specified in the default biometric unit configuration. You must specify this value if the <paramref name="PoolType"/> parameter is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_SYSTEM"/>. You cannot use this value if the <paramref name="PoolType"/> parameter is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_PRIVATE"/></description>
            </item>
            <item>
            <term><see cref="P:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DB_BOOTSTRAP"/></term>
            <description>You can specify this value to be used for scenarios prior to starting Windows. Typically, the database is part of the sensor chip or is part of the BIOS and can only be used for template enrollment and deletion.</description>
            </item>
            <item>
            <term><see cref="P:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DB_ONCHIP"/></term>
            <description>The database is on the sensor chip and is available for enrollment and matching.</description>
            </item>
            </param>
            <param name="SessionHandle">Pointer to the new session handle. If the function does not succeed, the handle is set to zero.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>One or more arguments have incorrect values or are incompatible with other arguments.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The session handle pointer in the <paramref name="SessionHandle"/> parameter cannot be NULL.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_ACCESSDENIED"/></term>
            <description>The <paramref name="Flags"/> parameter contains the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_RAW"/> or the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FLAG_MAINTENANCE"/> flag and the caller has not been granted either access permission.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_UNIT"/></term>
            <description>One or more of the biometric unit numbers specified in the <paramref name="UnitArray"/> parameter is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_NOT_ACTIVE_CONSOLE"/></term>
            <description>The client application is running on a remote desktop client and is attempting to open a system pool session.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_SENSOR_UNAVAILABLE"/></term>
            <description>The <paramref name="PoolType"/> parameter is set to <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_PRIVATE"/> and one or more of the requested sensors in that pool is not available.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DISABLED"/></term>
            <description>Current administrative policy prohibits use of the Windows Biometric Framework API.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioLogonIdentifiedUser(System.UInt32)">
            <summary>
            The <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioLogonIdentifiedUser(System.UInt32)"/> function causes a fast user switch to the account associated with the last successful identification operation performed by the biometric session.
            </summary>
            <param name="SessionHandle"></param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_ACCESSDENIED"/></term>
            <description>The caller does not have permission to switch users or the biometric session is out of date.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_FALSE"/></term>
            <description>The user identified by the <paramref name="SessionHandle"/> parameter is the same as the current user.</description>
            </item>
            <item>
            <term><see cref="!:SEC_E_LOGON_DENIED"/></term>
            <description>The user could not be logged on.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_CRED_PROV_DISABLED"/></term>
            <description>Current administrative policy prohibits use of the credential provider.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_FAST_USER_SWITCH_DISABLED"/></term>
            <description>Fast user switching is not enabled.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_SAS_ENABLED"/></term>
            <description>Fast user switching cannot be performed because secure logon (CTRL+ALT+DELETE) is currently enabled.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioMonitorPresence(System.UInt32,System.UInt32)">
            <summary>
            Turns on the face-recognition or iris-monitoring mechanism for the specified biometric unit. Starting with Windows 10, build 1607, this function is available to use with a mobile image.
            </summary>
            <param name="SessionHandle">An asynchronous handle for the biometric session that you obtained by calling the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/> function with the PoolType parameter set to <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_SYSTEM"/>.</param>
            <param name="UnitId">he identifier of the biometric unit for which you want to turn on the face-recognition or iris-monitoring mechanism.</param>
            <returns></returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioRegisterEventMonitor(System.UInt32,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_CALLBACK,System.IntPtr)">
            <summary>
            The <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioRegisterEventMonitor(System.UInt32,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_CALLBACK,System.IntPtr)"/> function Registers a callback function to receive event notifications from the service provider associated with an open session.
            </summary>
            <param name="SessionHandle">A WINBIO_SESSION_HANDLE value that identifies the open biometric session. Open the session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>.</param>
            <param name="EventMask">
            <para>A value that specifies the types of events to monitor. Only the fingerprint provider is currently supported. You must specify one of the following flags.</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_FP_UNCLAIMED"/> (The sensor detected a finger swipe that was not requested by the application, or the requesting application does not have window focus. The Windows Biometric Framework calls into your callback function to indicate that a finger swipe has occurred but does not try to identify the fingerprint.)</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_FP_UNCLAIMED_IDENTIFY"/> (The sensor detected a finger swipe that was not requested by the application, or the requesting application does not have window focus. The Windows Biometric Framework attempts to identify the fingerprint and passes the result of that process to your callback function.)</para>
            </param>
            <param name="EventCallback">Address of a callback function that receives the event notifications sent by the Windows Biometric Framework. You must define this function.</param>
            <param name="EventCallbackContext">An optional application-defined value that is returned in the pvContext parameter of the callback function. This value can contain any data that the custom callback function is designed to handle.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The address of the callback function specified by the EventCallback parameter cannot be NULL.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The <paramref name="EventMask"/> parameter cannot be zero and you cannot specify both <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_FP_UNCLAIMED"/> and <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_FP_UNCLAIMED_IDENTIFY"/> at the same time.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_EVENT_MONITOR_ACTIVE"/></term>
            <description>An active event monitor has already been registered.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_OPERATION"/></term>
            <description>The service provider does not support event notification.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioReleaseFocus">
            <summary>
            Releases window focus.
            </summary>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_ACCESSDENIED"/></term>
            <description>The calling process must be running under the Local System account.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioRemoveAllCredentials">
            <summary>
            Removes all credentials from the store.
            </summary>
            <returns>If the function succeeds, it returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values.</returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioRemoveAllDomainCredentials">
            <summary>
            Removes all user credentials for the current domain from the store.
            </summary>
            <returns>If the function succeeds, it returns S_OK. If the function fails, it returns an HRESULT value that indicates the error. For a list of common error codes, see Common HRESULT Values.</returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioRemoveCredential(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_TYPE)">
            <summary>
            Deletes a biometric logon credential for a specified user. Starting with Windows 10, build 1607, this function is available to use with a mobile image.
            </summary>
            <param name="Identity">A <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY"/> structure that contains the SID of the user account for which the logon credential will be removed.</param>
            <param name="Type">
            <para>A <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_TYPE"/> value that specifies the credential type. This can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="!:WINBIO_CREDENTIAL_PASSWORD"/></term>
            <description>The password-based credential will be deleted.</description>
            </item>
            <item>
            <term><see cref="!:WINBIO_CREDENTIAL_ALL"/></term>
            <description>All logon credentials for the user will be deleted.</description>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_ACCESSDENIED"/></term>
            <description>The caller does not have permission to delete the credential.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_CRED_PROV_NO_CREDENTIAL"/></term>
            <description>The specified identity does not exist or does not have any related records in the credential store.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioSetCredential(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_TYPE,System.IntPtr,System.IntPtr,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_FORMAT)">
            <summary>
            Saves a biometric logon credential for the current user.
            </summary>
            <param name="Type">A <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_TYPE"/> value that specifies the credential type. Currently, this can be WINBIO_CREDENTIAL_PASSWORD.</param>
            <param name="Credential">A pointer to a variable length array of bytes that contains the credential. The format depends on the <paramref name="Type"/> and <paramref name="Format"/> parameters.</param>
            <param name="CredentialSize">Size, in bytes, of the value specified by the <paramref name="Credential"/> parameter.</param>
            <param name="Format">
            <para>A <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_FORMAT"/> enumeration value that specifies the format of the credential. If the Type parameter is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CREDENTIAL_TYPE.WINBIO_CREDENTIAL_PASSWORD"/>, this can be one of the following:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="!:WINBIO_PASSWORD_GENERIC"/></term>
            <description>The credential is a plaintext NULL-terminated Unicode string.</description>
            </item>
            <item>
            <term><see cref="!:WINBIO_PASSWORD_PACKED"/></term>
            <description>The credential was wrapped by using the CredProtect function and packed by using the CredPackAuthenticationBuffer function. This is recommended.</description>
            </item>
            <item>
            <term><see cref="!:WINBIO_PASSWORD_PROTECTED"/></term>
            <description>The password credential was wrapped with CredProtect.</description>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_ACCESSDENIED"/></term>
            <description>The caller does not have permission to set the credential.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_UNKNOWN_ID"/></term>
            <description>The user has not enrolled a biometric sample.</description>
            </item>
            <item>
            <term><see cref="!:SEC_E_LOGON_DENIED"/></term>
            <description>The credential was not valid for the current user.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_CRED_PROV_DISABLED"/></term>
            <description>Current administrative policy prohibits use of the credential provider.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioSetProperty(System.UInt32,System.UInt32,System.UInt32,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY*,System.Byte,System.IntPtr,System.IntPtr)">
            <summary>
            Sets the value of a standard property associated with a biometric session, unit, template, or account. Starting with Windows 10, build 1607, this function is available to use with a mobile image.
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="PropertyType">A <see cref="T:System.UInt32"/> value that specifies the source of the property information. Currently this must be <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_TYPE_ACCOUNT"/>.</param>
            <param name="PropertyId">A <see cref="T:System.UInt32"/> value that specifies the property to be queried. Currently this must be <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_ANTI_SPOOF_POLICY"/>. All other properties are read-only.</param>
            <param name="UnitId">A <see cref="T:System.UInt32"/> value that identifies the biometric unit. For the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_ANTI_SPOOF_POLICY"/> property, this value must be 0.</param>
            <param name="Identity">Address of a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY"/> structure that specifies the account for which you want to set the property.</param>
            <param name="SubFactor">Reserved. This must be <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SUBTYPE_NO_INFORMATION"/>.</param>
            <param name="PropertyBuffer">A pointer to a structure that specifies the new value for the property. This value cannot be NULL. For setting the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_ANTI_SPOOF_POLICY"/> property, the structure must be a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANTI_SPOOF_POLICY"/> structure.</param>
            <param name="PropertyBufferSize">The size, in bytes, of the structure to which the <paramref name="PropertyBuffer"/> parameter points. This value cannot be 0.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioUnlockUnit(System.UInt32,System.UInt32)">
            <summary>
            Releases the session lock on the specified biometric unit.
            </summary>
            <param name="SessionHandle">A WINBIO_SESSION_HANDLE value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="UnitId">A WINBIO_UNIT_ID value that specifies the biometric unit to unlock.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The <paramref name="UnitId"/> parameter cannot contain zero.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_LOCK_VIOLATION"/></term>
            <description>The biometric unit specified by the UnitId parameter is not currently locked by the session.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioUnregisterEventMonitor(System.UInt32)">
            <summary>
            The <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioUnregisterEventMonitor(System.UInt32)"/> function cancels event notifications from the service provider associated with an open biometric session.
            </summary>
            <param name="SessionHandle">A WINBIO_SESSION_HANDLE value that identifies the open biometric session. Open the session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioVerify(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.Byte,System.UInt32@,System.Boolean@,System.UInt32@)">
            <summary>
            Captures a biometric sample and determines whether the sample corresponds to the specified user identity.
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <param name="Identity">Pointer to a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY"/> structure that contains the GUID or SID of the user providing the biometric sample.</param>
            <param name="SubFactor">
            <para>A <see cref="T:System.Byte"/> value that specifies the sub-factor associated with the biometric sample. The Windows Biometric Framework (WBF) currently supports only fingerprint capture and can use the following constants to represent sub-type information.</para>
            <list type="bullet">
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_THUMB"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_INDEX_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_MIDDLE_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_RING_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_LITTLE_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_THUMB"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_INDEX_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_MIDDLE_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_RING_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_LITTLE_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_FOUR_FINGERS"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_FOUR_FINGERS"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SUBTYPE_ANY"/></description>
            </item>
            </list>
            </param>
            <param name="UnitId">A pointer to a <see cref="T:System.UInt32"/> value that specifies the biometric unit that performed the verification.</param>
            <param name="Match">Pointer to a Boolean value that specifies whether the captured sample matched the user identity specified by the <paramref name="Identity"/> parameter.</param>
            <param name="RejectDetail">
            <para>A pointer to a ULONG value that contains additional information about the failure to capture a biometric sample. If the capture succeeded, this parameter is set to zero. The following values are defined for fingerprint capture:</para>
            <list type="bullet">
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_HIGH"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_LOW"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_LEFT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_RIGHT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_FAST"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SLOW"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_POOR_QUALITY"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SKEWED"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SHORT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_MERGE_FAILURE"/></description>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The <paramref name="SubFactor"/> argument is incorrect.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The pointer specified by the <paramref name="UnitId"/>, <paramref name="Identity"/>, <paramref name="SubFactor"/>, or <paramref name="RejectDetail"/> parameters cannot be NULL.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_BAD_CAPTURE"/></term>
            <description>The biometric sample could not be captured. Use the <paramref name="RejectDetail"/> value for more information.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_ENROLLMENT_IN_PROGRESS"/></term>
            <description>The operation could not be completed because the specified biometric unit is currently being used for an enrollment transaction (system pool only).</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_NO_MATCH"/></term>
            <description>The biometric sample does not correspond to the specified <paramref name="Identity"/> and <paramref name="SubFactor"/> combination.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioVerifyWithCallback(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.Byte,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_VERIFY_CALLBACK,System.IntPtr)">
            <summary>
            <para>Asynchronously captures a biometric sample and determines whether the sample corresponds to the specified user identity. The function returns immediately to the caller, performs capture and verification on a separate thread, and calls into an application-defined callback function to update operation status.</para>
            <para>Important  We recommend that, beginning with Windows 8, you no longer use this function to start an asynchronous operation. Instead, do the following:</para>
            <list type="bullet">
            <item>
            <description>Implement a <see cref="!:PWINBIO_ASYNC_COMPLETION_CALLBACK"/> function to receive notice when the operation completes.</description>
            </item>
            <item>
            <description>Call the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/> function. Pass the address of your callback in the CallbackRoutine parameter. Pass <see cref="!:WINBIO_ASYNC_NOTIFY_CALLBACK"/> in the NotificationMethod parameter. Retrieve an asynchronous session handle.</description>
            </item>
            <item>
            <description>Use the asynchronous session handle to call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioVerify(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.Byte,System.UInt32@,System.Boolean@,System.UInt32@)"/>. When the operation finishes, the Windows Biometric Framework will allocate and initialize a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure with the results and invoke your callback with a pointer to the results structure.</description>
            </item>
            <item>
            <description>Call <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioFree(System.IntPtr)"/> from your callback implementation to release the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure after you have finished using it.</description>
            </item>
            </list>
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session.</param>
            <param name="Identity">Pointer to a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY"/> structure that contains the GUID or SID of the user providing the biometric sample.</param>
            <param name="SubFactor">A <see cref="T:System.Byte"/> value that specifies the sub-factor associated with the biometric sample. See the Remarks section for more details.</param>
            <param name="VerifyCallback">Address of a callback function that will be called by the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioVerifyWithCallback(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.Byte,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_VERIFY_CALLBACK,System.IntPtr)"/> function when verification succeeds or fails. You must create the callback.</param>
            <param name="VerifyCallbackContext">An optional application-defined structure that is returned in the <paramref name="VerifyCallbackContext"/> parameter of the callback function. This structure can contain any data that the custom callback function is designed to handle.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_INVALIDARG"/></term>
            <description>The <paramref name="SubFactor"/> argument is incorrect.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_POINTER"/></term>
            <description>The pointer specified by the Identity and <paramref name="VerifyCallback"/> parameters cannot be NULL.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioWait(System.UInt32)">
            <summary>
            Blocks caller execution until all pending biometric operations for a session have been completed or canceled.
            </summary>
            <param name="SessionHandle">A <see cref="T:System.UInt32"/> value that identifies an open biometric session. Open a synchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32[],System.IntPtr,System.Guid*,System.UInt32@)"/>. Open an asynchronous session handle by calling <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/>.</param>
            <returns>
            <para>If the function succeeds, it returns <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/>. If the function fails, it returns an HRESULT value that indicates the error. Possible values include, but are not limited to, those in the following table. For a list of common error codes, see Common HRESULT Values.</para>
            <list type="table">
            <listheader>
            <term>Return code</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.E_HANDLE"/></term>
            <description>The session handle is not valid.</description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.GUID">
            <summary>
            <para>GUIDs identify objects such as interfaces, manager entry-point vectors (EPVs), and class objects. A GUID is a 128-bit value consisting of one group of 8 hexadecimal digits, followed by three groups of 4 hexadecimal digits each, followed by one group of 12 hexadecimal digits. The following example GUID shows the groupings of hexadecimal digits in a GUID: 6B29FC40-CA47-1067-B31D-00DD010662DA</para>
            <para>The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.GUID"/> structure stores a GUID.</para>
            </summary>
        </member>
        <member name="M:WinBiometricDotNet.Interop.SafeNativeMethods.GUID.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the Guid structure by using the specified integers and bytes.
            </summary>
            <param name="a">The first 4 bytes of the GUID.</param>
            <param name="b">The next 2 bytes of the GUID.</param>
            <param name="c">The next 2 bytes of the GUID.</param>
            <param name="d">The next byte of the GUID.</param>
            <param name="e">The next byte of the GUID.</param>
            <param name="f">The next byte of the GUID.</param>
            <param name="g">The next byte of the GUID.</param>
            <param name="h">The next byte of the GUID.</param>
            <param name="i">The next byte of the GUID.</param>
            <param name="j">The next byte of the GUID.</param>
            <param name="k">The next byte of the GUID.</param>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.GUID.Data1">
            <summary>
            Specifies the first 8 hexadecimal digits of the GUID.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.GUID.Data2">
            <summary>
            Specifies the first group of 4 hexadecimal digits.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.GUID.Data3">
            <summary>
            Specifies the second group of 4 hexadecimal digits.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.GUID.Data4">
            <summary>
            Array of 8 bytes. The first 2 bytes contain the third group of 4 hexadecimal digits. The remaining 6 bytes contain the final 12 hexadecimal digits.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.LARGE_INTEGER">
            <summary>
            Represents a 64-bit signed integer value.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.LARGE_INTEGER.QuadPart">
            <summary>
            An unsigned 64-bit integer.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.LARGE_INTEGER.LowPart">
            <summary>
            The low-order 32 bits.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.LARGE_INTEGER.HighPart">
            <summary>
            The high-order 32 bits.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.SECURITY_ATTRIBUTES">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.SECURITY_ATTRIBUTES"/> structure contains the security descriptor for an object and specifies whether the handle retrieved by specifying this structure is inheritable. This structure provides security settings for objects created by various functions, such as <see cref="!:CreateFile"/>, <see cref="!:CreatePipe"/>, <see cref="!:CreateProcess"/>, <see cref="!:RegCreateKeyEx"/>, or <see cref="!:RegSaveKeyEx"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.SECURITY_ATTRIBUTES.nLength">
            <summary>
            The size, in bytes, of this structure. Set this value to the size of the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.SECURITY_ATTRIBUTES"/> structure.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.SECURITY_ATTRIBUTES.lpSecurityDescriptor">
            <summary>
            <para>A pointer to a <see cref="!:SECURITY_DESCRIPTOR"/> structure that controls access to the object. If the value of this member is NULL, the object is assigned the default security descriptor associated with the access token of the calling process. This is not the same as granting access to everyone by assigning a NULL discretionary access control list (DACL). By default, the default DACL in the access token of a process allows access only to the user represented by the access token.</para>
            <para>For information about creating a security descriptor, see Creating a Security Descriptor.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.SECURITY_ATTRIBUTES.bInheritHandle">
            <summary>
            A Boolean value that specifies whether the returned handle is inherited when a new process is created. If this member is TRUE, the new process inherits the handle.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.SID_AND_ATTRIBUTES">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.SID_AND_ATTRIBUTES"/> structure represents a security identifier (SID) and its attributes. SIDs are used to uniquely identify users or groups.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.SID_AND_ATTRIBUTES.Sid">
            <summary>
            A pointer to a SID structure.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.SID_AND_ATTRIBUTES.Attributes">
            <summary>
            Specifies attributes of the SID. This value contains up to 32 one-bit flags. Its meaning depends on the definition and use of the SID.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_USER">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_USER"/> structure identifies the user associated with an access token.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.TOKEN_USER.User">
            <summary>
            Specifies a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.SID_AND_ATTRIBUTES"/> structure representing the user associated with the access token. There are currently no attributes defined for user security identifiers (SIDs).
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT"/> structure contains the results of an asynchronous operation.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT.SessionHandle">
            <summary>
            Handle of an asynchronous session started by calling the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenSession(System.UInt32,System.UInt32,System.UInt32,System.UInt32*,System.IntPtr,System.Guid*,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/> function or the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncOpenFramework(WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_NOTIFICATION_METHOD,System.IntPtr,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_COMPLETION_CALLBACK,System.IntPtr,System.Int32,System.UInt32@)"/> function.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT.Operation">
            <summary>
            Type of the asynchronous operation. For more information, see WINBIO_OPERATION_TYPE Constants.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT.SequenceNumber">
            <summary>
            Sequence number of the asynchronous operation. The integers are assigned sequentially for each operation in a biometric session, starting at one (1). For any session, the open operation is always assigned the first sequence number and the close operation is assigned the last sequence number. If your application queues multiple operations, you can use sequence numbers to perform error handling. For example, you can ignore operation results until a specific sequence number is sent to the application.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT.TimeStamp">
            <summary>
            System date and time at which the biometric operation began. For more information, see the <see cref="!:GetSystemTimeAsFileTime"/> function.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT.ApiStatus">
            <summary>
            Error code returned by the operation.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT.UnitId">
            <summary>
            Biometric unit ID number.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT.UserData">
            <summary>
            Address of a buffer supplied by the caller. The buffer is not modified by the framework or the biometric unit. Your application can use the data to help it determine what actions to perform upon receipt of the completion notice or to maintain additional information about the requested operation.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT.Parameter">
            <summary>
            Union that encloses nested structures that contain additional information about the success or failure of asynchronous operations begun by the client application.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_PARAMETERS">
            <summary>
            Union that encloses nested structures that contain additional information about the success or failure of asynchronous operations begun by the client application.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_PARAMETERS.Verify">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioVerify(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.Byte,System.UInt32@,System.Boolean@,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_PARAMETERS.Identify">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioIdentify(System.UInt32,System.UInt32@,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.Byte@,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_PARAMETERS.EnrollBegin">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollBegin(System.UInt32,System.Byte,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_PARAMETERS.EnrollCapture">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollCapture(System.UInt32,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_PARAMETERS.EnrollCommit">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollCommit(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_PARAMETERS.EnumEnrollments">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumEnrollments(System.UInt32,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.IntPtr@,System.IntPtr@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_PARAMETERS.CaptureSample">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioCaptureSample(System.UInt32,System.Byte,System.Byte,System.UInt32@,System.IntPtr@,System.IntPtr@,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_PARAMETERS.DeleteTemplate">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioDeleteTemplate(System.UInt32,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY*,System.Byte)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_PARAMETERS.GetProperty">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioGetProperty(System.UInt32,System.UInt32,System.UInt32,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY*,System.Byte,System.IntPtr@,System.IntPtr@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_PARAMETERS.SetProperty">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_PARAMETERS.GetEvent">
            <summary>
            Contains status information about the event that was raised.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_PARAMETERS.ControlUnit">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioControlUnit(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32@)"/> or <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioControlUnitPrivileged(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_PARAMETERS.EnumServiceProviders">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumServiceProviders(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BSP_SCHEMA[]@,System.IntPtr@)"/> or <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncEnumServiceProviders(System.UInt32,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_PARAMETERS.EnumBiometricUnits">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumBiometricUnits(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA[]@,System.IntPtr@)"/> or <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncEnumBiometricUnits(System.UInt32,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_PARAMETERS.EnumDatabases">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumDatabases(System.UInt32,System.IntPtr@,System.IntPtr@)"/> or <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncEnumDatabases(System.UInt32,System.UInt32)"/>.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_VERIFY">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioVerify(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.Byte,System.UInt32@,System.Boolean@,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_VERIFY.Match">
            <summary>
            Specifies whether the captured sample matched the user identity.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_VERIFY.RejectDetail">
            <summary>
            Additional information about verification failure. For more information, see Remarks.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_IDENTITY">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioIdentify(System.UInt32,System.UInt32@,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.Byte@,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_IDENTITY.Identity">
            <summary>
            GUID or SID of the user providing the biometric sample.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_IDENTITY.SubFactor">
            <summary>
            Sub-factor associated with the biometric sample. For more information, see Remarks.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_IDENTITY.RejectDetail">
            <summary>
            Additional information about the failure, if any, to capture and identify a biometric sample. For more information, see Remarks.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENROLLBEGIN">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollBegin(System.UInt32,System.Byte,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENROLLBEGIN.SubFactor">
            <summary>
            Additional information about the enrollment. For more information, see Remarks.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENROLLCAPTURE">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollCapture(System.UInt32,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENROLLCAPTURE.RejectDetail">
            <summary>
            Additional information about the failure to capture a biometric sample. For more information, see Remarks.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENROLLCOMMIT">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnrollCommit(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENROLLCOMMIT.Identity">
            <summary>
            GUID or SID of the template to be saved.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENROLLCOMMIT.IsNewTemplate">
            <summary>
            Specifies whether the template being added to the database is new.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENUMENROLLMENTS">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumEnrollments(System.UInt32,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY@,System.IntPtr@,System.IntPtr@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENUMENROLLMENTS.Identity">
            <summary>
            GUID or SID of the template from which the sub-factors were retrieved.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENUMENROLLMENTS.SubFactorCount">
            <summary>
            Number of elements in the array pointed to by the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENUMENROLLMENTS.SubFactorArray"/> member.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENUMENROLLMENTS.SubFactorArray">
            <summary>
            Pointer to an array of sub-factors. For more information, see Remarks.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_CAPTURESAMPLE">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioCaptureSample(System.UInt32,System.Byte,System.Byte,System.UInt32@,System.IntPtr@,System.IntPtr@,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_CAPTURESAMPLE.Sample">
            <summary>
            Pointer to a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR"/> structure that contains the sample.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_CAPTURESAMPLE.SampleSize">
            <summary>
            Size, in bytes, of the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR"/> structure returned in the Sample member.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_CAPTURESAMPLE.RejectDetail">
            <summary>
            Additional information about the failure to capture a biometric sample. For more information, see Remarks.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_DELETESAMPLE">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioDeleteTemplate(System.UInt32,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY*,System.Byte)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_DELETESAMPLE.Identity">
            <summary>
            GUID or SID of the template that was deleted.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_DELETESAMPLE.SubFactor">
            <summary>
            Additional information about the template.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_GETPROPERTY">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioGetProperty(System.UInt32,System.UInt32,System.UInt32,System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY*,System.Byte,System.IntPtr@,System.IntPtr@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_GETPROPERTY.PropertyType">
            <summary>
            Source of the property information. Currently this will be <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_TYPE_UNIT"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_GETPROPERTY.PropertyId">
            <summary>
            The property that was queried. Currently this will be <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_SAMPLE_HINT"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_GETPROPERTY.Identity">
            <summary>
            This is a reserved value and will be NULL.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_GETPROPERTY.SubFactor">
            <summary>
            This is reserved and will be WINBIO_SUBTYPE_NO_INFORMATION.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_GETPROPERTY.PropertyBufferSize">
            <summary>
            Size, in bytes, of the property value pointed to by the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_GETPROPERTY.PropertyBuffer"/> member.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_GETPROPERTY.PropertyBuffer">
            <summary>
            Pointer to the property value.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_SETPROPERTY">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_SETPROPERTY.PropertyType">
            <summary>
            Source of the property information. Currently this will be <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_TYPE_UNIT"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_SETPROPERTY.PropertyId">
            <summary>
            The property that was queried. Currently this will be <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_PROPERTY_SAMPLE_HINT"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_SETPROPERTY.Identity">
            <summary>
            This is a reserved value and will be NULL.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_SETPROPERTY.SubFactor">
            <summary>
            This is reserved and will be WINBIO_SUBTYPE_NO_INFORMATION.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_SETPROPERTY.PropertyBufferSize">
            <summary>
            Size, in bytes, of the property value pointed to by the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_SETPROPERTY.PropertyBuffer"/> member.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_SETPROPERTY.PropertyBuffer">
            <summary>
            Pointer to the property value.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_GETEVENT">
            <summary>
            Contains status information about the event that was raised.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_GETEVENT.Event">
            <summary>
            Contains event information.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_CONTROLUNIT">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioControlUnit(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32@)"/> or <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioControlUnitPrivileged(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32@)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_CONTROLUNIT.Component">
            <summary>
            The component within the biometric unit that performed the operation.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_CONTROLUNIT.ControlCode">
            <summary>
            Vendor-defined code recognized by the biometric unit specified by the UnitId parameter of the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioControlUnit(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32@)"/> or <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioControlUnitPrivileged(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@,System.UInt32@)"/> function and the adapter specified by the Component parameter.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_CONTROLUNIT.OperationStatus">
            <summary>
            Vendor-defined status code that specifies the outcome of the control operation.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_CONTROLUNIT.SendBuffer">
            <summary>
            Pointer to a buffer that contains the control information sent to the adapter by the component. The format and content of the buffer is vendor-defined.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_CONTROLUNIT.SendBufferSize">
            <summary>
            Size, in bytes, of the buffer specified by the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_CONTROLUNIT.SendBuffer"/> member.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_CONTROLUNIT.ReceiveBuffer">
            <summary>
            Pointer to a buffer that receives information sent by the adapter specified by the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_CONTROLUNIT.Component"/> member. The format and content of the buffer is vendor-defined.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_CONTROLUNIT.ReceiveBufferSize">
            <summary>
            Size, in bytes, of the buffer specified by the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_CONTROLUNIT.ReceiveBuffer"/> member.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_CONTROLUNIT.ReceiveDataSize">
            <summary>
            Size, in bytes, of the data written to the buffer specified by the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_CONTROLUNIT.ReceiveBuffer"/> member.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENUMSERVICEPROVIDERS">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumServiceProviders(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BSP_SCHEMA[]@,System.IntPtr@)"/> or <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncEnumServiceProviders(System.UInt32,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENUMSERVICEPROVIDERS.BspCount">
            <summary>
            The number of structures pointed to by the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENUMSERVICEPROVIDERS.BspSchemaArray"/> member.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENUMSERVICEPROVIDERS.BspSchemaArray">
            <summary>
            Pointer to an array of <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BSP_SCHEMA"/> structures that contain information about each of the available service providers.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENUMBIOMETRICUNITS">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumBiometricUnits(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA[]@,System.IntPtr@)"/> or <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncEnumBiometricUnits(System.UInt32,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENUMBIOMETRICUNITS.UnitCount">
            <summary>
            Number of structures pointed to by the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENUMBIOMETRICUNITS.UnitSchemaArray"/> member.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENUMBIOMETRICUNITS.UnitSchemaArray">
            <summary>
            An array of <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA"/> structures that contain information about each enumerated biometric unit.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENUMDATABASES">
            <summary>
            Contains the results of an asynchronous call to <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumDatabases(System.UInt32,System.IntPtr@,System.IntPtr@)"/> or <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioAsyncEnumDatabases(System.UInt32,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENUMDATABASES.StorageCount">
            <summary>
            Number of structures pointed to by the <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENUMDATABASES.StorageSchemaArray"/> member.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ASYNC_RESULT_ENUMDATABASES.StorageSchemaArray">
            <summary>
            Array of <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_STORAGE_SCHEMA"/> structures that contain information about each database.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR"/> structure represents a biometric information record (BIR). The information record contains header, data, and signature blocks.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR.HeaderBlock">
            <summary>
            A <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_DATA"/> structure that contains the size, in bytes, and offset of the BIR header. The header contains information that describes the contents of the information record.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR.StandardDataBlock">
            <summary>
            A <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_DATA"/> structure that contains the size, in bytes, and offset of processed or unprocessed biometric information created by the Windows Biometric Framework (WBF).
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR.VendorDataBlock">
            <summary>
            A <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_DATA"/> structure that contains the size, in bytes, and offset of processed or unprocessed biometric information provided by vendor sensors and software.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR.SignatureBlock">
            <summary>
            An optional <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_DATA"/> structure that contains the size, in bytes, and offset of the digital signature message authentication code (MAC) that can be used to verify the integrity of the BIR. If present, the signature or MAC must cover the header and data blocks.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_DATA">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_DATA"/> structure specifies the size, in bytes, and the offset of a block of biometric information. This structure is used by the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR"/> structure to specify where the various parts of a biometric information record are located.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_DATA.Size">
            <summary>
            Size, in bytes, of the biometric information.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_DATA.Offset">
            <summary>
            Offset, in bytes from the beginning of the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR"/> structure, of the biometric information.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_HEADER">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_HEADER"/> structure contains the Common Biometric Exchange File Format (CBEFF) Patron Format A information that describes the rest of the BIR.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_HEADER.ValidFields">
            <summary>
            A Patron Format A bitmask that indicates which CBEFF optional fields are present in the BIR. For more information about all members of <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_HEADER"/>, follow the link in the Remarks section to the NISTIR 6529-A Specification.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_HEADER.HeaderVersion">
            <summary>
            <para>A structure of type WINBIO_BIR_VERSION that specifies the CBEFF header version.</para>
            <para>Versions are represented as 8-bit values of the form: 0xNM, where N is the major version and M is the minor version.</para>
            <para><code>typedef UCHAR WINBIO_BIR_VERSION, *PWINBIO_BIR_VERSION;</code></para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_HEADER.PatronHeaderVersion">
            <summary>
            A structure of type WINBIO_BIR_VERSION that specifies PATRON_HEADER_VERSION.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_HEADER.DataFlags">
            <summary>
            A structure of type <see cref="T:System.Byte"/> that specifies the level of processing expected for a data capture.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_HEADER.Type">
            <summary>
            A structure of type <see cref="T:System.UInt32"/> that specifies the biometric type.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_HEADER.Subtype">
            <summary>
            A structure of type WINBIO_BIOMETRIC_SENSOR_SUBTYPE that specifies the biometric subtype.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_HEADER.Purpose">
            <summary>
            A structure of type <see cref="T:System.Byte"/> that specifies the intended use of the data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_HEADER.DataQuality">
            <summary>
            <para>A structure of type WINBIO_BIR_QUALITY that specifies the biometric data quality. Quality measurements are represented as signed integers in the range 0-100, except:</para>
            <para>-1 Quality measurements are supported by the BIR creator, but no value is set in the BIR.</para>
            <para>-2 Quality measurements are not supported by the BIR creator.</para>
            <para><code>typedef CHAR WINBIO_BIR_QUALITY, *PWINBIO_BIR_QUALITY;</code></para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_HEADER.CreationDate">
            <summary>
            Specifies the creation date and time of this BIR in UTC by using the format YYYYMMDDhhmmss.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_HEADER.ValidityPeriod">
            <summary>
            Specifies the validity period of this BIR by using the format described in CreationDate.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_HEADER.BiometricDataFormat">
            <summary>
            A structure of type WINBIO_REGISTERED_FORMAT that specifies the data format of the StandardDataBlock for this <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR_HEADER.ProductId">
            <summary>
            A structure of type WINBIO_REGISTERED_FORMAT that specifies the product identifier for the component that generated the StandardDataBlock for this <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR"/>.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BLANK_PAYLOAD">
            <summary>
            The IOCTL_BIOMETRIC_RESET and IOCTL_BIOMETRIC_UPDATE_FIRMWARE IOCTLs return the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BLANK_PAYLOAD"/> structure as output.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BLANK_PAYLOAD.PayloadSize">
            <summary>
            The total size of the payload. This includes the fixed length structure and any variable data at the end.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BLANK_PAYLOAD.WinBioHresult">
            <summary>
            <para>The status detail of the I/O operation. This is where WINBIO error and information codes will be passed. The following table shows possible values.</para>
            <list type="table">
            <listheader>
            <term>Status value</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/></term>
            <description>The operation completed successfully.</description>
            </item>
            <item>
            <term><see cref="!:HRESULT_FROM_NT"/>(STATUS_IO_DEVICE_ERROR)</term>
            <description>The driver could not gather the necessary information from the device.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DEVICE_BUSY"/></term>
            <description>The device is in the middle of a vendor-specific operation. This should only be returned when the device cannot be reset, and the vendor-specific operation cannot be canceled.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BSP_SCHEMA">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BSP_SCHEMA"/> structure describes the capabilities of a biometric service provider. This structure is used by the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumServiceProviders(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BSP_SCHEMA[]@,System.IntPtr@)"/> function.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BSP_SCHEMA.BiometricFactor">
            <summary>
            The type of biometric measurement used by this device. Currently this must be <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_FINGERPRINT"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BSP_SCHEMA.BspId">
            <summary>
            A value that uniquely identifies this biometric service provider component.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BSP_SCHEMA.Description">
            <summary>
            A NULL-terminated Unicode string that contains a description of the biometric service provider.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BSP_SCHEMA.Vendor">
            <summary>
            A NULL-terminated Unicode string that contains the name of the vendor supplying the biometric service provider.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BSP_SCHEMA.Version">
            <summary>
            A <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_VERSION"/> structure the contains the software version of the biometric service provider component.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CALIBRATION_INFO">
            <summary>
            The IOCTL_BIOMETRIC_CALIBRATE IOCTL returns the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CALIBRATION_INFO"/> structure as output.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CALIBRATION_INFO.PayloadSize">
            <summary>
            The total size of the payload. This includes the fixed length structure and any variable data at the end.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CALIBRATION_INFO.WinBioHresult">
            <summary>
            <para>The status detail of the I/O operation. This is where WINBIO error and information codes will be passed. The following table shows possible values.</para>
            <list type="table">
            <listheader>
            <term>Status value</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/></term>
            <description>The operation completed successfully.</description>
            </item>
            <item>
            <term><see cref="!:HRESULT_FROM_NT"/>(STATUS_IO_DEVICE_ERROR)</term>
            <description>The driver could not gather the necessary information from the device.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DEVICE_BUSY"/></term>
            <description>The device is in the middle of a vendor-specific operation. This should only be returned when the device cannot be reset, and the vendor-specific operation cannot be canceled.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CALIBRATION_INFO.CalibrationData">
            <summary>
            A structure of type <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA"/> that contains calibration data specific to this sensor. This member is optional.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_DATA">
            <summary>
            The IOCTL_BIOMETRIC_CAPTURE_DATA IOCTL returns the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_DATA"/> structure as output.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_DATA.PayloadSize">
            <summary>
            The total size of the payload. This includes the fixed length structure and any variable data at the end.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_DATA.WinBioHresult">
            <summary>
            <para>The status detail of the I/O operation. This is where WINBIO error and information codes will be passed. The following table shows possible values for this member.</para>
            <list type="table">
            <listheader>
            <term>Status value</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/></term>
            <description>The operation completed successfully.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DATA_COLLECTION_IN_PROGRESS"/></term>
            <description>There is already a data collection IOCTL pending.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_UNSUPPORTED_DATA_FORMAT"/></term>
            <description>The format specified is not supported by this driver and device.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_UNSUPPORTED_DATA_TYPE"/></term>
            <description>The type of data requested is not supported by this driver and device.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_INVALID_DEVICE_STATE"/></term>
            <description>The device could not be put into biometric capture mode. This could be because the device is in another non-data collection mode.</description>
            </item>
            <item>
            <term><see cref="!:HRESULT_FROM_NT"/>(STATUS_IO_DEVICE_ERROR)</term>
            <description>The operation was not completed due to device error.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_DEVICE_BUSY"/></term>
            <description>The device is in the middle of a vendor-specific operation.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_CANCELED"/></term>
            <description>The operation was canceled either by the caller, or an IOCTL_BIOMETRIC_RESET request.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_E_UNSUPPORTED_PURPOSE"/></term>
            <description>The capture purpose specified is not supported by the driver.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_DATA.SensorStatus">
            <summary>
            The <see cref="T:System.UInt32"/> status of the sensor after the capture has occurred.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_DATA.RejectDetail">
            <summary>
            If the sensor status was <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_REJECT"/>, this member contains a <see cref="T:System.UInt32"/> value.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_DATA.CaptureData">
            <summary>
            A structure of type <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA"/> that contains data captured by the device, of the format specified. The Data array member of the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA"/> structure should contain a <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR"/> structure.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_PARAMETERS">
            <summary>
            The IOCTL_BIOMETRIC_CAPTURE_DATA IOCTL uses the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_PARAMETERS"/> structure as input.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_PARAMETERS.PayloadSize">
            <summary>
            The total size of the payload.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_PARAMETERS.Purpose">
            <summary>
            Specifies a <see cref="T:System.Byte"/> reason for the data collection. Some sensors will go into a different mode depending on the reason for the data capture.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_PARAMETERS.Format">
            <summary>
            Specifies the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_REGISTERED_FORMAT"/> format of the data to be returned.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_PARAMETERS.VendorFormat">
            <summary>
            An optional WINBIO_UUID vendor GUID. This indicates the preferred format of the vendor-specific data in the BIR.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPTURE_PARAMETERS.Flags">
            <summary>
            Specifies the <see cref="T:System.Byte"/> level of processing and other attributes for the data to be returned. If format owner and type are the Windows standard, this must be <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA_FLAG_RAW"/>.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA"/> structure specifies data in IOCTL payloads.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA.Size">
            <summary>
            Specifies the size, in bytes, of the payload.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA.Data">
            <summary>
            Specifies an array that contains the payload. Frequently this member contains a structure of type <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_BIR"/>.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DIAGNOSTICS">
            <summary>
            The IOCTL_BIOMETRIC_GET_SENSOR_STATUS IOCTL returns the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DIAGNOSTICS"/> structure as output.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DIAGNOSTICS.PayloadSize">
            <summary>
            The total size of the payload. This includes the fixed length structure and any variable data at the end.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DIAGNOSTICS.WinBioHresult">
            <summary>
            <para>The status detail of the I/O operation. This is where WINBIO error and information codes will be passed. The following table shows possible values.</para>
            <list type="table">
            <listheader>
            <term>Status value</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/></term>
            <description>The operation completed successfully.</description>
            </item>
            <item>
            <term><see cref="!:HRESULT_FROM_NT"/>(STATUS_IO_DEVICE_ERROR)</term>
            <description>The driver could not gather the necessary information from the device.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DIAGNOSTICS.SensorStatus">
            <summary>
            A structure of type <see cref="T:System.UInt32"/> that contains the operating status of the biometric sensor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DIAGNOSTICS.VendorDiagnostics">
            <summary>
            An optional <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA"/> structure for vendor-specific additional information.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT"/> structure contains status information sent to the callback routine when an event notice is raised.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT.Type">
            <summary>
            <para>A value that specifies the types of events to monitor. Only the fingerprint provider is currently supported. You must specify one of the following flags.</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_FP_UNCLAIMED"/> (The sensor detected a finger swipe that was not requested by the application, or the requesting application does not have window focus. The Windows Biometric Framework calls into your callback function to indicate that a finger swipe has occurred but does not try to identify the fingerprint.)</para>
            <para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_FP_UNCLAIMED_IDENTIFY"/> (The sensor detected a finger swipe that was not requested by the application, or the requesting application does not have window focus. The Windows Biometric Framework attempts to identify the fingerprint and passes the result of that process to your callback function.)</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_PARAMETERS.Unclaimed">
            <summary>
            Structure returned for biometric sample capture.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_PARAMETERS.UnclaimedIdentify">
            <summary>
            Structure returned for biometric capture and identification. Identification determines whether a sample can be associated with an existing biometric template.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_PARAMETERS.Error">
            <summary>
            Structure that identifies the success or failure of the operation being monitored.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_UNCLAIMED">
            <summary>
            Structure returned for biometric sample capture.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_UNCLAIMED.UnitId">
            <summary>
            The biometric unit that generated the sample.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_UNCLAIMED.RejectDetail">
            <summary>
            <para>A ULONG value that contains additional information regarding failure to capture a biometric sample. If a capture succeeded, this parameter is set to zero. The following values are defined for fingerprint capture:</para>
            <list type="bullet">
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_HIGH"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_LOW"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_LEFT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_RIGHT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_FAST"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SLOW"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_POOR_QUALITY"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SKEWED"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SHORT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_MERGE_FAILURE"/></description>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_UNCLAIMEDIDENTITY">
            <summary>
            Structure returned for biometric capture and identification. Identification determines whether a sample can be associated with an existing biometric template.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_UNCLAIMEDIDENTITY.UnitId">
            <summary>
            The biometric unit that generated the sample.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_UNCLAIMEDIDENTITY.Identity">
            <summary>
            A <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY"/> structure that contains the GUID or SID of the user providing the biometric sample.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_UNCLAIMEDIDENTITY.SubFactor">
            <summary>
            <para>A WINBIO_BIOMETRIC_SUBTYPE value that specifies the sub-factor associated with a biometric sample. The Windows Biometric Framework (WBF) currently supports only fingerprint capture and uses the following constants to represent sub-type information.</para>
            <list type="bullet">
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_UNKNOWN"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_THUMB"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_INDEX_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_MIDDLE_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_RING_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_LITTLE_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_THUMB"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_INDEX_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_MIDDLE_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_RING_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_LITTLE_FINGER"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_RH_FOUR_FINGERS"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_LH_FOUR_FINGERS"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ANSI_381_POS_TWO_THUMBS"/></description>
            </item>
            </list>
            <para>Important</para>
            <para>Do not attempt to validate the value supplied for the SubFactor value. The Windows Biometrics Service will validate the supplied value before passing it through to your implementation. If the value is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SUBTYPE_NO_INFORMATION"/> or <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SUBTYPE_ANY"/>, then validate where appropriate.</para>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_UNCLAIMEDIDENTITY.RejectDetail">
            <summary>
            <para>A ULONG value that contains additional information about the failure to capture a biometric sample. If the capture succeeded, this parameter is set to zero. The following values are defined for fingerprint capture:</para>
            <list type="bullet">
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_HIGH"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_LOW"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_LEFT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_RIGHT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_FAST"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SLOW"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_POOR_QUALITY"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SKEWED"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_TOO_SHORT"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_MERGE_FAILURE"/></description>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_UERROR">
            <summary>
            Structure that identifies the success or failure of the operation being monitored.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_EVENT_UERROR.ErrorCode">
            <summary>
            HRESULT value that contains <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/> or an error code that resulted from computations performed by the Windows Biometric Framework.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_GET_INDICATOR">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_GET_INDICATOR"/> structure is the OUT payload for IOCTL_BIOMETRIC_GET_INDICATOR.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_GET_INDICATOR.PayloadSize">
            <summary>
            Specifies the total size of the payload, which includes the fixed length structure and any variable data at the end.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_GET_INDICATOR.WinBioHresult">
            <summary>
            Specifies an HRESULT that contains the status of the I/O operation. See IOCTL_BIOMETRIC_GET_INDICATOR for possible values.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_GET_INDICATOR.IndicatorStatus">
            <summary>
            Specifies a structure of type <see cref="T:System.UInt32"/>, which indicateswhether the indicator light is on or off.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY">
            <summary>
            Contains the results of an asynchronous call to WinBioEnrollCapture.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY.Type">
            <summary>
            <para>Specifies the format of the identity information contained in this structure. This can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ID_TYPE_NULL"/></term>
            <description>The template has no associated ID.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ID_TYPE_WILDCARD"/></term>
            <description>The structure matches all template identities.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ID_TYPE_GUID"/></term>
            <description>The structure contains a GUID associated with the template.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ID_TYPE_SID"/></term>
            <description>The structure contains the account SID associated with the template.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY.Value">
            <summary>
            A union that can contain one of the following values:
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY_ACCOUNTSID">
            <summary>
            A structure that contains an account SID if the Type member is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ID_TYPE_SID"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY_ACCOUNTSID.Size">
            <summary>
            The number of characters in the SID.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY_ACCOUNTSID.Data">
            <summary>
            An array of unsigned characters that contain the SID. The current maximum size of the array is 68 characters.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY_VALUE">
            <summary>
            A union that can contain one of the following values:
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY_VALUE.Null">
            <summary>
            Contains 1 if the Type member is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ID_TYPE_NULL"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY_VALUE.Wildcard">
            <summary>
            Contains 1 if the Type member is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ID_TYPE_WILDCARD"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY_VALUE.TemplateGuid">
            <summary>
            Contains a 128-bit GUID value that identifies the template if the Type member is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ID_TYPE_GUID"/>.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_IDENTITY_VALUE.AccountSid">
            <summary>
            A structure that contains an account SID if the Type member is <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_ID_TYPE_SID"/>.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_REGISTERED_FORMAT">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_REGISTERED_FORMAT"/> structure specifies a biometric data format.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_REGISTERED_FORMAT.Owner">
            <summary>
            Specifies format owner.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_REGISTERED_FORMAT.Type">
            <summary>
            Specifies format type.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_ATTRIBUTES">
            <summary>
            The IOCTL_BIOMETRIC_GET_ATTRIBUTES structure returns the <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_ATTRIBUTES"/> structure as output.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_ATTRIBUTES.PayloadSize">
            <summary>
            A DWORD value that indicates the total size of the payload, including the fixed length structure and any variable data at the end.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_ATTRIBUTES.WinBioHresult">
            <summary>
            <para>An HRESULT value that indicates containing status detail of the I/O operation. The following table includes possible values.</para>
            <list type="table">
            <listheader>
            <term>Status value</term>
            <description>Description</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.S_OK"/></term>
            <description>The operation completed successfully.</description>
            </item>
            <item>
            <term><see cref="!:HRESULT_FROM_NT"/>(STATUS_IO_DEVICE_ERROR)</term>
            <description>The driver could not gather the necessary information from the device.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_ATTRIBUTES.WinBioVersion">
            <summary>
            A structure of type <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_VERSION"/> that contains a WinBio WBDI version that is supported by the driver. To be compatible with the WinBio service, <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_ATTRIBUTES.WinBioVersion"/> must contain the same major version as the current major version of the WinBio service, in addition to a minor version that is less than or equal to the current minor version of the WinBio service.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_ATTRIBUTES.SensorType">
            <summary>
            A structure of type <see cref="T:System.UInt32"/> that contains a bitmask with type(s) of biometric data that is collected by the sensor. In Windows 7, only <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_FINGERPRINT"/> is supported.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_ATTRIBUTES.SensorSubType">
            <summary>
            A structure of type <see cref="T:System.UInt32"/> that contains additional information about the sensor. For example, this member could specify whether the sensor requires the user to simply touch the sensor or swipe a finger over the sensor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_ATTRIBUTES.Capabilities">
            <summary>
            A structure of type <see cref="T:System.UInt32"/>, which indicates which capabilities are supported by the device.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_ATTRIBUTES.ManufacturerName">
            <summary>
            A structure of type WINBIO_STRING that contains the name of the device manufacturer.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_ATTRIBUTES.ModelName">
            <summary>
            A structure of type WINBIO_STRING that contains the name of the device model.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_ATTRIBUTES.SerialNumber">
            <summary>
            A structure of type WINBIO_STRING that contains the serial number of the device, if one exists.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_ATTRIBUTES.FirmwareVersion">
            <summary>
            A structure of type <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_VERSION"/> that contains the version of the firmware that is loaded on the device.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_ATTRIBUTES.SupportedFormatEntries">
            <summary>
            The number of formats that are supported by the driver and device. There must be at least one, which is the Windows standard format.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_ATTRIBUTES.SupportedFormat">
            <summary>
            A structure of type <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_REGISTERED_FORMAT"/> that contains a list of the formats supported by the driver and device.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SET_INDICATOR">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SET_INDICATOR"/> structure is the IN payload for IOCTL_BIOMETRIC_SET_INDICATOR.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SET_INDICATOR.PayloadSize">
            <summary>
            Specifies the total size of the payload, which includes the fixed length structure and any variable data at the end.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SET_INDICATOR.IndicatorStatus">
            <summary>
            Specifies a structure of type <see cref="T:System.UInt32"/> that indicates whether the indicator light should be set on or off.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_STORAGE_SCHEMA">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_STORAGE_SCHEMA"/> structure describes the capabilities of a biometric storage adapter. This structure is used by the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumDatabases(System.UInt32,System.IntPtr@,System.IntPtr@)"/> function.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_STORAGE_SCHEMA.BiometricFactor">
            <summary>
            The type of biometric measurement saved in the database.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_STORAGE_SCHEMA.DatabaseId">
            <summary>
            A GUID that identifies the database.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_STORAGE_SCHEMA.DataFormat">
            <summary>
            A GUID that identifies the format of the templates in the database.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_STORAGE_SCHEMA.Attributes">
            <summary>
            <para>Information about the characteristics of the database. This can be a bitwise OR of the following constants.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATABASE_FLAG_MASK"/></para><para>0xFFFF0000</para></term>
            <description>0xFFFF0000</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATABASE_FLAG_REMOTE"/></para><para>0x00020000</para></term>
            <description>0x00020000</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATABASE_FLAG_REMOVABLE"/></para><para>0x00010000</para></term>
            <description>0x00010000</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATABASE_TYPE_DBMS"/></para><para>0x00000002</para></term>
            <description>0x00000002</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATABASE_TYPE_FILE"/></para><para>0x00000001</para></term>
            <description>0x00000001</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATABASE_TYPE_MASK"/></para><para>0x0000FFFF</para></term>
            <description>0x0000FFFF</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATABASE_TYPE_ONCHIP"/></para><para>0x00000003</para></term>
            <description>0x00000003</description>
            </item>
            <item>
            <term><para><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATABASE_TYPE_SMARTCARD"/></para><para>0x00000004</para></term>
            <description>0x00000004</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_STORAGE_SCHEMA.FilePath">
            <summary>
            The path and file name of the database if it resides on the computer disk.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_STORAGE_SCHEMA.ConnectionString">
            <summary>
            A string value that can be sent to a database server to identify the database.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SUPPORTED_ALGORITHMS">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SUPPORTED_ALGORITHMS"/> structure is the OUT payload for IOCTL_BIOMETRIC_GET_SUPPORTED_ALGORITHMS.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SUPPORTED_ALGORITHMS.PayloadSize">
            <summary>
            Specifies the total size of the payload, which includes the fixed length structure and any variable data at the end.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SUPPORTED_ALGORITHMS.WinBioHresult">
            <summary>
            Specifies the HRESULT status of the I/O operation.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SUPPORTED_ALGORITHMS.NumberOfAlgorithms">
            <summary>
            Specifies the number of algorithms in the data block.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SUPPORTED_ALGORITHMS.AlgorithmData">
            <summary>
            Specifies a structure of type WINBIO_DATA that contains NULL-terminated UTF-8 OID strings that represent the algorithms supported by the device.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA"/> structure describes the capabilities of a biometric unit. It is used by the <see cref="M:WinBiometricDotNet.Interop.SafeNativeMethods.WinBioEnumBiometricUnits(System.UInt32,WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA[]@,System.IntPtr@)"/> function.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA.UnitId">
            <summary>
            A value that identifies the biometric unit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA.PoolType">
            <summary>
            <para>A ULONG value that specifies the type of the biometric unit. This can be one of the following values:</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_UNKNOWN"/></term>
            <description>The type is unknown.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_SYSTEM"/></term>
            <description>The session connects to a shared collection of biometric units managed by the service provider.</description>
            </item>
            <item>
            <term><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_POOL_PRIVATE"/></term>
            <description>The session connects to a collection of biometric units that are managed by the caller.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA.BiometricFactor">
            <summary>
            A value that specifies the type of the biometric unit. Only <see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_FINGERPRINT"/> is currently supported.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA.SensorSubType">
            <summary>
            <para>A sensor subtype defined for the biometric type specified by the BiometricFactor member. Only fingerprint types (<see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_TYPE_FINGERPRINT"/>) are currently supported. The following subtypes are currently defined for fingerprints:</para>
            <list type="bullet">
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_SENSOR_SUBTYPE_UNKNOWN"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_SENSOR_SUBTYPE_SWIPE"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_FP_SENSOR_SUBTYPE_TOUCH"/></description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA.Capabilities">
            <summary>
            <para>A bitmask of the biometric sensor capabilities. This can be a bitwise OR of the following values:</para>
            <list type="bullet">
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_SENSOR"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_MATCHING"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_DATABASE"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_PROCESSING"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_ENCRYPTION"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_NAVIGATION"/></description>
            </item>
            <item>
            <description><see cref="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_CAPABILITY_INDICATOR"/></description>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA.DeviceInstanceId">
            <summary>
            A string value that contains the device ID. The string can contain up to 256 Unicode characters including a terminating NULL character.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA.Description">
            <summary>
            A string value that contains a description of the biometric unit. The string can contain up to 256 Unicode characters including a terminating NULL character.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA.Manufacturer">
            <summary>
            A string value that contains the name of the manufacturer. The string can contain up to 256 Unicode characters including a terminating NULL character.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA.Model">
            <summary>
            A string value that contains the model number of the biometric unit. The string can contain up to 256 Unicode characters including a terminating NULL character.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA.SerialNumber">
            <summary>
            A NULL-terminated Unicode string that contains the serial number of the biometric unit. The string can contain up to 256 Unicode characters including a terminating NULL character.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UNIT_SCHEMA.FirmwareVersion">
            <summary>
            A <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_VERSION"/> structure that contains the major and minor version numbers for the biometric unit.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UPDATE_FIRMWARE">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UPDATE_FIRMWARE"/> structure is the IN payload for IOCTL_BIOMETRIC_UPDATE_FIRMWARE.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UPDATE_FIRMWARE.PayloadSize">
            <summary>
            Specifies the total size of the payload, which includes the fixed length structure and any variable data at the end.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_UPDATE_FIRMWARE.FirmwareData">
            <summary>
            Specifies a structure of type <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_DATA"/> that contains the vendor-specific firmware image.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_VERSION">
            <summary>
            The <see cref="T:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_VERSION"/> structure contains the software version number of a biometric service provider component.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_VERSION.MajorVersion">
            <summary>
            A DWORD that contains the major version number.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Interop.SafeNativeMethods.WINBIO_VERSION.MinorVersion">
            <summary>
            A DWORD that contains the minor version number.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.LocateSensorEventArgs">
            <summary>
            Provides data for the <see cref="E:WinBiometricDotNet.WinBiometric.SensorLocated"/> event handler.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.LocateSensorEventArgs.OperationStatus">
            <summary>
            Gets the error code returned by the capture operation.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.LocateSensorEventArgs.UnitId">
            <summary>
            Gets a value that specifies the biometric unit.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.OperationType">
            <summary>
            The <see cref="T:WinBiometricDotNet.OperationType"/> enumeration specifies the type of asynchronous operation being performed.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.None">
            <summary>
            No operation has been identified.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.Open">
            <summary>
            A biometric session was opened.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.Close">
            <summary>
            A biometric session was closed.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.Verify">
            <summary>
            A biometric sample was verified against a user identity.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.Identify">
            <summary>
            A biometric sample was captured and compared to an existing template.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.LocateSensor">
            <summary>
            The ID number of a biometric unit was retrieved.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.EnrollBegin">
            <summary>
            A biometric enrollment sequence was initiated.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.EnrollCapture">
            <summary>
            A biometric sample was captured and added to the template.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.EnrollCommit">
            <summary>
            A pending biometric template was finalized.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.EnrollDiscard">
            <summary>
            A pending biometric template was discarded.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.EnumEnrollments">
            <summary>
            The sub-factors for a given template were enumerated.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.DeleteTemplate">
            <summary>
            A biometric template was deleted from the store.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.CaptureSample">
            <summary>
            A biometric sample was captured.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.GetProperty">
            <summary>
            A biometric session, unit, or template property was retrieved.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.SetProperty">
            <summary>
            A biometric session, unit, template, or account property was set.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.GetEvent">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.LockUnit">
            <summary>
            A biometric unit was locked for exclusive use by a session.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.UnlockUnit">
            <summary>
            The session lock on a biometric unit was released.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.ControlUnit">
            <summary>
            Vendor defined operations were performed on a control unit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.ControlUnitPrivileged">
            <summary>
            Privileged vendor defined operations were performed on a control unit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.OpenFramework">
            <summary>
            A handle to the biometric framework was opened.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.CloseFramework">
            <summary>
            A handle to the biometric framework was closed.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.EnumServiceProviders">
            <summary>
            The installed biometric service providers were enumerated.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.EnumBiometricUnits">
            <summary>
            The attached biometric units were enumerated.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.EnumDatabases">
            <summary>
            The registered databases were enumerated.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.UnitArrival">
            <summary>
            A biometric unit was created.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.OperationType.UnitRemoval">
            <summary>
            A biometric unit was deleted.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.PolicySource">
            <summary>
            The <see cref="T:WinBiometricDotNet.PolicySource"/> enumeration specifies the possible sources of policy information for the detection of spoofing for biometric factors.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.PolicySource.Unknown">
            <summary>
            The source of the policy is unknown.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.PolicySource.Default">
            <summary>
            The policy is the default policy that the Windows Biometric Framework provides.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.PolicySource.Local">
            <summary>
            The policy that the individual user set for their account by using the Settings app. This policy overrides the default policy.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.PolicySource.Admin">
            <summary>
            A group policy that the IT administrator set for the enterprise. Individual users cannot override this policy.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.PropertyId">
            <summary>
            The <see cref="T:WinBiometricDotNet.PropertyId"/> enumeration specifies the property to be queried.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.PropertyId.SampleHint">
            <summary>
            Estimates the maximum number of good biometric samples that are required to complete an enrollment template.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.PropertyId.ExtendedSensorInfo">
            <summary>
            Contains extended information about the capabilities and attributes of the sensor component that is connected to a specific biometric unit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.PropertyId.ExtendedEngineInfo">
            <summary>
            Contains extended information about the capabilities and attributes of the engine component that is connected to a specific biometric unit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.PropertyId.ExtendedStorageInfo">
            <summary>
            Contains extended information about the capabilities and attributes of the storage component that is connected to a specific biometric unit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.PropertyId.ExtendedEnrollmentStatus">
            <summary>
            Contains extended information about the status of an in-progress enrollment on a specific biometric unit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.PropertyId.AntiSpoofPolicy">
            <summary>
            Contains the values of the antispoofing policy for a specific user account.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.PropertyType">
            <summary>
            The <see cref="T:WinBiometricDotNet.PropertyType"/> enumeration specifies the source of the property information.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.PropertyType.Session">
            <summary>
            The property applies to a specific biometric session.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.PropertyType.Unit">
            <summary>
            The property applies to a specific biometric template.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.PropertyType.Template">
            <summary>
            The property applies to a specific biometric unit.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.PropertyType.Account">
            <summary>
            The property applies to a specific user account that has a biometric enrollment.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Purpose">
            <summary>
            The <see cref="T:WinBiometricDotNet.Purpose"/> enumeration specifies the intended use of the sample.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Purpose.NoPurposeAvailable">
            <summary>
            No purpose is specified.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Purpose.Verify">
            <summary>
            Verify the identity of a user.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Purpose.Identify">
            <summary>
            Identify a user.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Purpose.Enroll">
            <summary>
            Enroll a user.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Purpose.EnrollForVerification">
            <summary>
            Capture a biometric sample and determine whether the sample corresponds to the specified user identity.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Purpose.EnrollForIdentification">
            <summary>
            Capture a biometric sample and determine whether it matches an existing biometric template.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.Purpose.Auidit">
            <summary>
            Extra information that can be used for logging or for display.
            </summary>
            <remarks>This value is ignored on input by all functions. On output, it will only be available if supported by the biometric unit and you specify WINBIO_DATA_FLAG_RAW in the Flags parameter of the <see cref="M:WinBiometricDotNet.WinBiometric.CaptureSample(WinBiometricDotNet.Session,WinBiometricDotNet.Purpose,WinBiometricDotNet.DataFlags)"/> function.</remarks>
        </member>
        <member name="T:WinBiometricDotNet.RejectDetail">
            <summary>
            The <see cref="T:WinBiometricDotNet.RejectDetail"/> enumeration specifies the reason a biometric fingerprint capture or identification procedure did not succeed.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.RejectDetail.FingerprintTooHigh">
            <summary>
            The finger scan began too high on the finger.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.RejectDetail.FingerprintTooLow">
            <summary>
            The finger scan began too low on the finger.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.RejectDetail.FingerprintTooLeft">
            <summary>
            The finger was too far left during scanning.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.RejectDetail.FingerprintTooRight">
            <summary>
            The finger was too far right during scanning.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.RejectDetail.FingerprintTooFast">
            <summary>
            The finger was swiped too quickly on the sensor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.RejectDetail.FingerprintTooSlow">
            <summary>
            The finger was swiped too slowly on the sensor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.RejectDetail.FingerprintPoorQuality">
            <summary>
            The scan quality was too poor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.RejectDetail.FingerprintTooSkewed">
            <summary>
            The finger did not pass straight across the sensor.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.RejectDetail.FingerprintTooShort">
            <summary>
            Not enough of the finger was scanned.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.RejectDetail.FingerprintMergeFailure">
            <summary>
            The fingerprint captures could not be combined.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Runtime.InteropServices.Marshal">
            <summary>
            Provides a collection of methods for converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.
            </summary>
        </member>
        <member name="M:WinBiometricDotNet.Runtime.InteropServices.Marshal.GetWinBiometricExceptionFromHR(System.Int32)">
            <summary>
            Converts the specified HRESULT error code to a corresponding <see cref="T:WinBiometricDotNet.WinBiometricException"/> object.
            </summary>
            <param name="errorCode">The HRESULT to be converted.</param>
            <returns>An object that represents the converted HRESULT.</returns>
        </member>
        <member name="M:WinBiometricDotNet.Runtime.InteropServices.Marshal.PtrToAsyncResult(System.IntPtr)">
            <summary>
            Marshals data from an LPARAM value of windows message to a <see cref="T:WinBiometricDotNet.AsyncResult"/> object.
            </summary>
            <param name="ptr">A LPARAM value of windows message.</param>
            <returns><see cref="T:WinBiometricDotNet.AsyncResult"/>.</returns>
            <remarks><paramref name="ptr"/> will be released when this method returns.</remarks>
        </member>
        <member name="T:WinBiometricDotNet.SampleCapturedHandler">
            <summary>
            Represents the method that will handle the <see cref="E:WinBiometricDotNet.WinBiometric.SampleCaptured"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:WinBiometricDotNet.CaptureSampleEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:WinBiometricDotNet.SensorLocatedHandler">
            <summary>
            Represents the method that will handle the <see cref="E:WinBiometricDotNet.WinBiometric.SensorLocated"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:WinBiometricDotNet.LocateSensorEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:WinBiometricDotNet.SensorStatus">
            <summary>
            The <see cref="T:WinBiometricDotNet.SensorStatus"/> enumeration specifies the status of the sensor after the capture has occurred.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.SensorStatus.Accept">
            <summary>
            The sensor just successfully completed a capture operation.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.SensorStatus.Reject">
            <summary>
            The sensor rejected the previous capture operation.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.SensorStatus.Ready">
            <summary>
            The sensor is ready to capture data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.SensorStatus.Busy">
            <summary>
            The sensor is busy or in a state where it cannot capture data.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.SensorStatus.NotCalibrated">
            <summary>
            The sensor must be calibrated before it is put into data collection mode.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.SensorStatus.Failure">
            <summary>
            The sensor device failed.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.Session">
            <summary>
            Represent the session handle that connects to a biometric service provider and one or more biometric units.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.Session.Handle">
            <summary>
            Get the pointer to the session handle.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.Session.IsAsynchronous">
            <summary>
            Gets a value indicating whether the session handle was generated by asynchronous function.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.SettingSourceType">
            <summary>
            The <see cref="T:WinBiometricDotNet.SettingSourceType"/> enumeration determine the Windows Biometric Framework is currently enabled.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.SettingSourceType.Invalid">
            <summary>
            The setting is not valid.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.SettingSourceType.Default">
            <summary>
            The setting originated from built-in policy.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.SettingSourceType.Policy">
            <summary>
            The setting was created by Group Policy.
            </summary>
        </member>
        <member name="F:WinBiometricDotNet.SettingSourceType.Local">
            <summary>
            The setting originated in the local computer registry.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.UnclaimedEvent">
            <summary>
            The <see cref="T:WinBiometricDotNet.UnclaimedEvent"/> class contains the event for biometric sample capture.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.UnclaimedEvent.RejectDetail">
            <summary>
            Gets a value that contains additional information about the failure to capture a biometric sample.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.UnclaimedEvent.UnidId">
            <summary>
            Gets the biometric unit that generated the sample.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.UnclaimedIdentifyEvent">
            <summary>
            The <see cref="T:WinBiometricDotNet.UnclaimedIdentifyEvent"/> class contains the event for biometric capture and identification.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.UnclaimedIdentifyEvent.FingerPosition">
            <summary>
            Gets a value that specifies the sub-factor associated with a biometric sample.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.UnclaimedIdentifyEvent.Identity">
            <summary>
            Gets the data that contains the GUID or SID of the user providing the biometric sample.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.UnclaimedIdentifyEvent.RejectDetail">
            <summary>
            Gets a value that contains additional information about the failure to capture a biometric sample.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.UnclaimedIdentifyEvent.UnidId">
            <summary>
            Gets the biometric unit that generated the sample.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.VerifyEventArgs">
            <summary>
            Provides data for the <see cref="E:WinBiometricDotNet.WinBiometric.SensorLocated"/> event handler.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.VerifyEventArgs.Result">
            <summary>
            Gets a value that represents the result of an event.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.VerifyHandler">
            <summary>
            Represents the method that will handle the <see cref="E:WinBiometricDotNet.WinBiometric.Verified"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:WinBiometricDotNet.VerifyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:WinBiometricDotNet.VerifyResult">
            <summary>
            The <see cref="T:WinBiometricDotNet.VerifyResult"/> class contains a result returned from <see cref="M:WinBiometricDotNet.WinBiometric.Verify(WinBiometricDotNet.Session,WinBiometricDotNet.FingerPosition)"/> or <see cref="M:WinBiometricDotNet.WinBiometric.VerifyWithCallback(WinBiometricDotNet.Session,WinBiometricDotNet.FingerPosition)"/>.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.VerifyResult.IsMatch">
            <summary>
            Gets a value indicating whether the captured sample matched the user identity specified.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.VerifyResult.OperationStatus">
            <summary>
            Gets the error code returned by the capture operation.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.VerifyResult.RejectDetail">
            <summary>
            Gets a value that contains additional information about the failure to capture a biometric sample.
            </summary>
        </member>
        <member name="P:WinBiometricDotNet.VerifyResult.UnitId">
            <summary>
            Gets a value that specifies the biometric unit that performed the verification.
            </summary>
        </member>
        <member name="T:WinBiometricDotNet.WinBiometric">
            <summary>
            Provides functionality to execute interface that Windows Biometric Framework exposes.
            </summary>
        </member>
        <member name="E:WinBiometricDotNet.WinBiometric.AsyncCompleted">
            <summary>
            Occurs when the operation started by using the session handle completes.
            </summary>
        </member>
        <member name="E:WinBiometricDotNet.WinBiometric.EnrollCaptured">
            <summary>
            Occurs when the capture operation succeeds or fails.
            </summary>
        </member>
        <member name="E:WinBiometricDotNet.WinBiometric.EventMonitored">
            <summary>
            Occurs when receives the event notifications sent by the Windows Biometric Framework.
            </summary>
        </member>
        <member name="E:WinBiometricDotNet.WinBiometric.Identified">
            <summary>
            Occurs when identification succeeds or fails.
            </summary>
        </member>
        <member name="E:WinBiometricDotNet.WinBiometric.SampleCaptured">
            <summary>
            Occurs when the capture operation succeeds or fails.
            </summary>
        </member>
        <member name="E:WinBiometricDotNet.WinBiometric.SensorLocated">
            <summary>
            Occurs when sensor location succeeds or fails.
            </summary>
        </member>
        <member name="E:WinBiometricDotNet.WinBiometric.Verified">
            <summary>
            Occurs when verification succeeds or fails.
            </summary>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.AcquireFocus">
            <summary>
            Acquires window focus.
            </summary>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.AsyncEnumBiometricUnits(WinBiometricDotNet.Framework,WinBiometricDotNet.BiometricTypes)">
            <summary>
            Asynchronously enumerates all attached biometric units that match the input biometric type.
            </summary>
            <param name="framework">The handle to the biometric framework.</param>
            <param name="biometricTypes">The bitmask of <see cref="T:WinBiometricDotNet.BiometricTypes"/> flags that specifies the biometric unit types to be enumerated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="framework"/> parameter is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.AsyncEnumDatabases(WinBiometricDotNet.Framework,WinBiometricDotNet.BiometricTypes)">
            <summary>
            Asynchronously enumerates all registered databases that match a specified biometric type.
            </summary>
            <param name="framework">The handle to the biometric framework.</param>
            <param name="biometricTypes">The bitmask of <see cref="T:WinBiometricDotNet.BiometricTypes"/> flags that specifies the biometric database types to be enumerated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="framework"/> parameter is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.AsyncEnumServiceProviders(WinBiometricDotNet.Framework,WinBiometricDotNet.BiometricTypes)">
            <summary>
            Asynchronously returns information about installed biometric service providers.
            </summary>
            <param name="framework">The handle to the biometric framework.</param>
            <param name="biometricTypes">The bitmask of <see cref="T:WinBiometricDotNet.BiometricTypes"/> flags that specifies the biometric service provider types to be enumerated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="framework"/> parameter is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.AsyncMonitorFrameworkChanges(WinBiometricDotNet.Framework,WinBiometricDotNet.ChangeTypes)">
            <summary>
            Starts an asynchronous monitor of changes to the biometric framework.
            </summary>
            <param name="framework">The handle to the biometric framework.</param>
            <param name="changeType">The bitmask of type <see cref="T:WinBiometricDotNet.ChangeTypes"/> flags that indicates the types of events that should generate asynchronous notifications.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="framework"/> parameter is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.AsyncOpenFramework(System.IntPtr)">
            <summary>
            Asynchronously opens a handle to the biometric framework.
            </summary>
            <param name="userData">The buffer supplied by the caller.</param>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.AsyncOpenFramework(System.IntPtr,System.UInt32)">
            <summary>
            Asynchronously opens a handle to the biometric framework.
            </summary>
            <param name="targetWindow">The handle of the window that will receive the completion notices.</param>
            <param name="messageCode">The window message code the framework must send to signify completion notices.</param>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.AsyncOpenSession(System.IntPtr)">
            <summary>
            Asynchronously connects to a biometric service provider and one or more biometric units.
            </summary>
            <param name="userData">The buffer supplied by the caller.</param>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.AsyncOpenSession(System.IntPtr,System.UInt32)">
            <summary>
            Asynchronously connects to a biometric service provider and one or more biometric units.
            </summary>
            <param name="targetWindow">The handle of the window that will receive the completion notices.</param>
            <param name="messageCode">The window message code the framework must send to signify completion notices.</param>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.BeginEnroll(WinBiometricDotNet.Session,WinBiometricDotNet.FingerPosition,System.UInt32)">
            <summary>
            Initiates a biometric enrollment sequence and creates an empty biometric template.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <param name="position">A <see cref="T:WinBiometricDotNet.FingerPosition"/> that provides additional information about the enrollment.</param>
            <param name="unitId">The value that identifies the biometric unit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.Cancel(WinBiometricDotNet.Session)">
            <summary>
            Cancels all pending biometric operations for a specified session.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.CaptureEnroll(WinBiometricDotNet.Session)">
            <summary>
            Captures a biometric sample and adds it to a template.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <returns><see cref="T:WinBiometricDotNet.CaptureEnrollResult"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.CaptureEnrollWithCallback(WinBiometricDotNet.Session)">
            <summary>
            Asynchronously captures a biometric sample and adds it to a template.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.CaptureSample(WinBiometricDotNet.Session,WinBiometricDotNet.Purpose,WinBiometricDotNet.DataFlags)">
            <summary>
            Captures a biometric sample and fills a biometric information record (BIR) with the raw or processed data.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <param name="purpose">A <see cref="T:WinBiometricDotNet.Purpose"/> bitmask that specifies the intended use of the sample.</param>
            <param name="flags">A <see cref="T:WinBiometricDotNet.DataFlags"/> that specifies the type of processing to be applied to the captured sample.</param>
            <returns><see cref="T:WinBiometricDotNet.CaptureSampleResult"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.CaptureSampleWithCallback(WinBiometricDotNet.Session,WinBiometricDotNet.Purpose,WinBiometricDotNet.DataFlags)">
            <summary>
            Captures a biometric sample asynchronously and returns the raw or processed data in a biometric information record (BIR).
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <param name="purpose">A <see cref="T:WinBiometricDotNet.Purpose"/> bitmask that specifies the intended use of the sample.</param>
            <param name="flags">A <see cref="T:WinBiometricDotNet.DataFlags"/> that specifies the type of processing to be applied to the captured sample.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.CloseFramework(WinBiometricDotNet.Framework)">
            <summary>
            Closes a framework handle previously opened one.
            </summary>
            <param name="framework">The handle to the biometric framework.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="framework"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.CloseSession(WinBiometricDotNet.Session)">
            <summary>
            Closes a biometric session and releases associated resources.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.CommitEnroll(WinBiometricDotNet.Session)">
            <summary>
            Finalizes a pending biometric template and saves it to the database associated with the biometric unit used for enrollment.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <returns><see cref="T:WinBiometricDotNet.BiometricIdentity"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.ControlUnit(WinBiometricDotNet.Session,System.UInt32,WinBiometricDotNet.Component,System.UInt32,System.Byte[],System.Byte[],System.IntPtr@,System.UInt32@)">
            <summary>
            Allows the caller to perform vendor-defined control operations on a biometric unit.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <param name="unitId">The value that identifies the biometric unit.</param>
            <param name="component">The value that specifies the component within the biometric unit that should perform the operation.</param>
            <param name="controlCode">The value that specifies the vendor-defined code recognized by the biometric unit.</param>
            <param name="sendBuffer">The buffer that contains the control information sent to the adapter by the component.</param>
            <param name="receiveBuffer">The buffer that receives information sent by the adapter specified by the <paramref name="component"/> parameter.</param>
            <param name="receiveDataSize">A size, in bytes, of the data written to the buffer specified by the <paramref name="receiveBuffer"/> parameter.</param>
            <param name="operationStatus">The value that specifies the vendor-defined status code that specifies the outcome of the control operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/>, <paramref name="sendBuffer"/> or <paramref name="receiveBuffer"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.ControlUnitPrivileged(WinBiometricDotNet.Session,System.UInt32,WinBiometricDotNet.Component,System.UInt32,System.Byte[],System.Byte[],System.IntPtr@,System.UInt32@)">
            <summary>
            Allows the caller to perform privileged vendor-defined control operations on a biometric unit.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <param name="unitId">The value that identifies the biometric unit.</param>
            <param name="component">The value that specifies the component within the biometric unit that should perform the operation.</param>
            <param name="controlCode">The value that specifies the vendor-defined code recognized by the biometric unit.</param>
            <param name="sendBuffer">The buffer that contains the control information sent to the adapter by the component.</param>
            <param name="receiveBuffer">The buffer that receives information sent by the adapter specified by the <paramref name="component"/> parameter.</param>
            <param name="receiveDataSize">A size, in bytes, of the data written to the buffer specified by the <paramref name="receiveBuffer"/> parameter.</param>
            <param name="operationStatus">The value that specifies the vendor-defined status code that specifies the outcome of the control operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/>, <paramref name="sendBuffer"/> or <paramref name="receiveBuffer"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.DeleteTemplate(WinBiometricDotNet.Session,System.UInt32,WinBiometricDotNet.BiometricIdentity,WinBiometricDotNet.FingerPosition)">
            <summary>
            Deletes a biometric template from the template store.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <param name="unitId">The value that identifies the biometric unit where the template is located.</param>
            <param name="identity">The the data that contains the GUID or SID of the template to be deleted.</param>
            <param name="position">The value that provides additional information about the template to be deleted.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> or <paramref name="identity"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.DiscardEnroll(WinBiometricDotNet.Session)">
            <summary>
            Ends the enrollment sequence and discards a pending biometric template. 
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.EnumBiometricDatabases(WinBiometricDotNet.BiometricTypes)">
            <summary>
            Enumerates all registered databases that match a specified biometric type.
            </summary>
            <param name="biometricTypes">The bitmask of <see cref="T:WinBiometricDotNet.BiometricTypes"/> flags that specifies the biometric database types to be enumerated.</param>
            <returns>An enumerable collection of the <see cref="T:WinBiometricDotNet.BiometricUnit"/>.</returns>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.EnumBiometricUnits(WinBiometricDotNet.BiometricTypes)">
            <summary>
            Enumerates all attached biometric units that match the input biometric type.
            </summary>
            <param name="biometricTypes">The bitmask of <see cref="T:WinBiometricDotNet.BiometricTypes"/> flags that specifies the biometric unit types to be enumerated.</param>
            <returns>An enumerable collection of the <see cref="T:WinBiometricDotNet.BiometricDatabase"/>.</returns>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.EnumEnrollments(WinBiometricDotNet.Session,System.UInt32)">
            <summary>
            Retrieves the biometric sub-factors enrolled for a specified identity and biometric unit.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <param name="unitId">The value that identifies the biometric unit.</param>
            <returns>An enumerable collection of the <see cref="T:WinBiometricDotNet.FingerPosition"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.EnumServiceProviders(WinBiometricDotNet.BiometricTypes)">
            <summary>
            Retrieves information about installed biometric service providers.
            </summary>
            <param name="biometricTypes">The bitmask of <see cref="T:WinBiometricDotNet.BiometricTypes"/> flags that specifies the biometric service provider types to be enumerated.</param>
            <returns>An enumerable collection of the <see cref="T:WinBiometricDotNet.BiometricServiceProvider"/>.</returns>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.GetCredentialState(WinBiometricDotNet.BiometricIdentity,WinBiometricDotNet.CredentialTypes)">
            <summary>
            Retrieves a value that specifies whether credentials have been set for the specified user.
            </summary>
            <param name="identity">The data that contains the SID of the user account for which the credential is being queried.</param>
            <param name="credentialType">The value that specifies the credential type.</param>
            <returns>The value that specifies whether user credentials have been set.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="identity"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.GetDomainLogonSetting(System.Boolean@,WinBiometricDotNet.SettingSourceType@)">
            <summary>
            Retrieves a value that specifies whether users can log on to a domain by using biometric information.
            </summary>
            <param name="value">When this method returns, contains value that specifies whether biometric domain logons are enabled.</param>
            <param name="source">When this method returns, contains value that specifies the setting source.</param>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.GetEnabledSetting(System.Boolean@,WinBiometricDotNet.SettingSourceType@)">
            <summary>
            Retrieves a value that specifies whether the Windows Biometric Framework is currently enabled.
            </summary>
            <param name="value">When this method returns, contains value that specifies whether the Windows Biometric Framework is currently enabled.</param>
            <param name="source">When this method returns, contains value that specifies the setting source.</param>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.GetEnrolledFactors(WinBiometricDotNet.BiometricIdentity)">
            <summary>
            Gets information about the biometric enrollments that the specified user has on the computer.
            </summary>
            <param name="accountOwner">The data for the user whose biometric enrollments you want to get.</param>
            <returns>The flags that indicate the biometric enrollments that the specified user has on the computer.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="accountOwner"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.GetLogonSetting(System.Boolean@,WinBiometricDotNet.SettingSourceType@)">
            <summary>
            Retrieves a value that indicates whether users can log on by using biometric information.
            </summary>
            <param name="value">When this method returns, contains value that specifies whether biometric logons are enabled.</param>
            <param name="source">When this method returns, contains value that specifies the setting source.</param>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.GetProperty(WinBiometricDotNet.Session,WinBiometricDotNet.PropertyType,WinBiometricDotNet.PropertyId,System.UInt32,WinBiometricDotNet.BiometricIdentity,WinBiometricDotNet.FingerPosition,System.Byte[]@)">
            <summary>
            Retrieves a session, unit, or template property.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <param name="propertyType">The value that specifies the source of the property information.</param>
            <param name="propertyId">The value that specifies the property that you want to query.</param>
            <param name="unitId">The value that identifies the biometric unit.</param>
            <param name="identity">The data that provides the SID of the account for which you want to get the antispoofing policy, if you specify <see cref="F:WinBiometricDotNet.PropertyId.AntiSpoofPolicy"/> as the value of the <paramref name="propertyId"/> parameter.</param>
            <param name="position">Reserved.</param>
            <param name="propertyBuffer">When this method returns, contains the property value.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> or <paramref name="identity"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.Identify(WinBiometricDotNet.Session)">
            <summary>
            Captures a biometric sample and determines whether it matches an existing biometric template.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <returns><see cref="T:WinBiometricDotNet.IdentifyResult"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.IdentifyWithCallback(WinBiometricDotNet.Session)">
            <summary>
            Asynchronously captures a biometric sample and determines whether it matches an existing biometric template.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.LocateSensor(WinBiometricDotNet.Session)">
            <summary>
            Retrieves the ID number of a biometric unit selected interactively by a user.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <returns>The ID number of a biometric unit selected interactively by a user.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.LocateSensorWithCallback(WinBiometricDotNet.Session)">
            <summary>
            Asynchronously retrieves the ID number of the biometric unit selected interactively by a user.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.LockUnit(WinBiometricDotNet.Session,System.UInt32)">
            <summary>
            Locks a biometric unit for exclusive use by a single session.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <param name="unitId">The value that specifies the biometric unit to be locked.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.LogonIdentifiedUser(WinBiometricDotNet.Session)">
            <summary>
            Causes a fast user switch to the account associated with the last successful identification operation performed by the biometric session.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <returns>true if the function has the switched to the account associated with the last successful identification operation performed by the biometric session; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.MonitorPresence(WinBiometricDotNet.Session,System.UInt32)">
            <summary>
            Turns on the face-recognition or iris-monitoring mechanism for the specified biometric unit.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <param name="unitId">The identifier of the biometric unit for which you want to turn on the face-recognition or iris-monitoring mechanism.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.OpenFramework(System.IntPtr)">
            <summary>
            Opens a handle to the biometric framework.
            </summary>
            <param name="userData">The buffer supplied by the caller.</param>
            <returns><see cref="T:WinBiometricDotNet.Framework"/>.</returns>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.OpenFramework(System.IntPtr,System.UInt32)">
            <summary>
            Opens a handle to the biometric framework.
            </summary>
            <param name="targetWindow">The handle of the window that will receive the completion notices.</param>
            <param name="messageCode">The window message code the framework must send to signify completion notices.</param>
            <returns><see cref="T:WinBiometricDotNet.Framework"/>.</returns>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.OpenSession">
            <summary>
            Connects to a biometric service provider and one or more biometric units.
            </summary>
            <returns><see cref="T:WinBiometricDotNet.Session"/>.</returns>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.OpenSession(System.IntPtr)">
            <summary>
            Connects to a biometric service provider and one or more biometric units.
            </summary>
            <param name="userData">The buffer supplied by the caller.</param>
            <returns><see cref="T:WinBiometricDotNet.Session"/>.</returns>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.OpenSession(System.IntPtr,System.UInt32)">
            <summary>
            Connects to a biometric service provider and one or more biometric units.
            </summary>
            <param name="targetWindow">The handle of the window that will receive the completion notices.</param>
            <param name="messageCode">The window message code the framework must send to signify completion notices.</param>
            <returns><see cref="T:WinBiometricDotNet.Session"/>.</returns>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.RegisterEventMonitor(WinBiometricDotNet.Session,WinBiometricDotNet.EventTypes)">
            <summary>
            Starts to receive event notifications from the service provider associated with an open session.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <param name="eventType">A value that specifies the types of events to monitor.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.ReleaseFocus">
            <summary>
            Releases window focus.
            </summary>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.RemoveAllCredentials">
            <summary>
            Removes all credentials from the store.
            </summary>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.RemoveAllDomainCredentials">
            <summary>
            Removes all user credentials for the current domain from the store.
            </summary>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.RemoveCredential(WinBiometricDotNet.BiometricIdentity,WinBiometricDotNet.CredentialTypes)">
            <summary>
            Deletes a biometric logon credential for a specified user.
            </summary>
            <param name="identity">A <see cref="T:WinBiometricDotNet.BiometricIdentity"/> that contains the SID of the user account for which the logon credential will be removed.</param>
            <param name="credentialType">A <see cref="T:WinBiometricDotNet.CredentialTypes"/> that specifies the credential type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="identity"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.SelectEnroll(WinBiometricDotNet.Session,System.UInt64)">
            <summary>
            Specifies the individual that you want to enroll when data that represents multiple individuals is present in the sample buffer.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <param name="selectorValue">The value that identifies that individual that you want to select for enrollment.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.SetCredential(WinBiometricDotNet.CredentialTypes,System.Byte[],WinBiometricDotNet.CredentialFormat)">
            <summary>
            Saves a biometric logon credential for the current user.
            </summary>
            <param name="credentialType">A <see cref="T:WinBiometricDotNet.CredentialTypes"/> that specifies the credential type.</param>
            <param name="credential">The buffer that contains the credential.</param>
            <param name="format">A <see cref="T:WinBiometricDotNet.CredentialFormat"/> that specifies the format of the credential.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="credential"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.UnlockUnit(WinBiometricDotNet.Session,System.UInt32)">
            <summary>
            Releases the session lock on the specified biometric unit.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <param name="unitId">The value that specifies the biometric unit to unlock.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.UnregisterEventMonitor(WinBiometricDotNet.Session)">
            <summary>
            Cancels event notifications from the service provider associated with an open biometric session.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.Verify(WinBiometricDotNet.Session,WinBiometricDotNet.FingerPosition)">
            <summary>
            Captures a biometric sample and determines whether the sample corresponds to the specified user identity.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <param name="position">A <see cref="T:WinBiometricDotNet.FingerPosition"/> that specifies the sub-factor associated with the biometric sample.</param>
            <returns><see cref="T:WinBiometricDotNet.VerifyResult"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.VerifyWithCallback(WinBiometricDotNet.Session,WinBiometricDotNet.FingerPosition)">
            <summary>
            Asynchronously captures a biometric sample and determines whether the sample corresponds to the specified user identity.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <param name="position">A <see cref="T:WinBiometricDotNet.FingerPosition"/> that specifies the sub-factor associated with the biometric sample.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometric.Wait(WinBiometricDotNet.Session)">
            <summary>
            Blocks caller execution until all pending biometric operations for a session have been completed or canceled.
            </summary>
            <param name="session">A <see cref="T:WinBiometricDotNet.Session"/> that identifies an open biometric session.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="session"/> is null.</exception>
        </member>
        <member name="T:WinBiometricDotNet.WinBiometricException">
            <summary>
            The exception is general exception for Windows Biometric Framework. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometricException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WinBiometricDotNet.WinBiometricException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:WinBiometricDotNet.WinBiometricException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WinBiometricDotNet.WinBiometricException"/> class with a specified HRESULT, a coded numerical value that is assigned to a specific exception.
            </summary>
            <param name="hresult">HRESULT, a coded numerical value that is assigned to a specific exception.</param>
        </member>
    </members>
</doc>
